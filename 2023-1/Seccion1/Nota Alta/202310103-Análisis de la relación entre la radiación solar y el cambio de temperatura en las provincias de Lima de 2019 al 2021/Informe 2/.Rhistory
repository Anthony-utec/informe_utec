legend("topright", legend=c("Media", "Mediana","Moda"), col=c("red", "blue","black"), lwd=2)
plot(density(DFP$RH2M), main="Densidad de Húmedad \nRelativa")
resumen_variable(DFP$PRECPT)
plot(density(DFP$PRECPT), main = "Densidad de Precipitación", xlab = "PRECPT")
resumen_variable(DFP$PS)
modaPS <- as.numeric(names(Moda(DFP$PS)))
plot(density(DFP$PS), main="Densidad de Presión")
abline(v=mean(DFP$PS), col="red", lwd=2, lty = "dashed")
abline(v=median(DFP$PS), col="green3", lwd=2, lty = "dashed")
abline(v=modaPS, col = "blue3", lwd=2, lty = "dashed")
legend("topright", legend=c("Media", "Mediana", "Moda"), col=c("red", "green3","blue3"), lwd=2)
fechas_limite <- c(as.Date(c("2022-03-20", "2022-06-20", "2022-09-22", "2022-12-21")),
as.Date(c("2021-03-20", "2021-06-20", "2021-09-22", "2021-12-21")),
as.Date(c("2020-03-19", "2020-06-20", "2020-09-22", "2020-12-21")),
as.Date(c("2019-03-20", "2019-06-21", "2019-09-23", "2019-12-21")),
as.Date(c("2018-03-20", "2018-06-21", "2018-09-22", "2018-12-21")))
estaciones <- c("Verano", "Otoño", "Invierno", "Primavera")
DFP$SEASON <- estaciones[cut(DFP$DATE, breaks = fechas_limite, labels = FALSE) %% 4 + 1]
barplot(table(DFP$SEASON), main = "Estaciones del año", xlab = "Estación", ylab = "Frecuencia", col=c("lightblue3","orange3","green3","yellow3"))
Moda(DFP$SEASON)
RAD_MEAN_MO_YEAR <- aggregate(DFP$RAD_SOL, by=list(DFP$YEAR, DFP$MO), FUN=mean)
colnames(RAD_MEAN_MO_YEAR)[1] <- "YEAR"
colnames(RAD_MEAN_MO_YEAR)[2] <- "MO"
colnames(RAD_MEAN_MO_YEAR)[3] <- "RAD_SOL_MEAN"
RAD_MEAN_MO_YEAR
ggplot(RAD_MEAN_MO_YEAR, aes(x = MO, y = RAD_SOL_MEAN, color = factor(YEAR))) +
geom_line() +
labs(x = "Mes", y = "Radiación Solar Promedio", title = "Radiación solar promedio por mes y año") +
scale_x_continuous(breaks = 1:12) +
scale_color_discrete(name = "Año")
T2M_MEAN_SEASON_YEAR <- aggregate(DFP$T2M, by=list(DFP$YEAR, DFP$SEASON), FUN=mean)
colnames(T2M_MEAN_SEASON_YEAR)[1] <- "YEAR"
colnames(T2M_MEAN_SEASON_YEAR)[2] <- "SEASON"
colnames(T2M_MEAN_SEASON_YEAR)[3] <- "T2M_MEAN"
T2M_MEAN_SEASON_YEAR
ggplot(T2M_MEAN_SEASON_YEAR, aes(x = SEASON, y = T2M_MEAN, color = factor(YEAR))) +
geom_point() +
labs(x = "Estación", y = "Temperatura Promedio", title = "Temperatura promedio por estación y año") +
scale_color_discrete(name = "Año")
cov(DFP$T2M, DFP$RAD_SOL)
smoothScatter(DFP$RAD_SOL, DFP$T2M,
main = "Relación entre Radiación Solar y Temperatura",
xlab = "Radiación Solar (W/m^2.h)", ylab = "Temperatura (°C)")
# Ajustar línea de tendencia
fit <- lm(DFP$T2M ~ DFP$RAD_SOL)
abline(fit, col = "red")
# Calcular el coeficiente de correlación
cor <- round(cor(DFP$RAD_SOL, DFP$T2M, method="pearson"),2)
# Agregar la leyenda
legend("topleft",
legend = c(paste("Línea de tendencia: y = ", round(fit$coefficients[2],2), "*x + ",
round(fit$coefficients[1],2), sep=""),
paste("Coeficiente de correlación: ", cor)),
col=c("red","black"), lty=1, lwd=2, cex=0.8, bty="n")
DFP_CORR <- DFP[, c("RAD_SOL", "RAD_UVA", "IND_RAD_UV", "T2M", "RH2M", "QV2M", "PRECPT", "PS", "WS10M")]
corrplot(cor(DFP_CORR), method = "square", tl.cex = 0.7, tl.srt = 90, tl.col = "black", addCoef.col = 1, addgrid.col = 1)
data <- data.frame(
CategoriaA = rep(c("A", "B", "C"), each = 50),
CategoriaB = rep(c("X", "Y", "Z"), times = 50)
)
# Crear el gráfico de mosaico con ggplot2
ggplot(data, aes(x = CategoriaA, fill = CategoriaB)) +
geom_bar(position = "fill")
Categoria_IND_RAD_UV <-cut(DFP$IND_RAD_UV, breaks = c(0,3,6,8,11,20), labels = c("Baja","Moderada","Alta","Muy Alta","Extrema Alta"),include.lowest = TRUE)
EspacioM <- data.frame(DFP, Categoria_IND_RAD_UV)
# Variable IND_RAD_SOL
tabla_ind <- table(EspacioM$Categoria_IND_RAD_UV)
indice_rad_uv_baja <- as.numeric(tabla_ind["Baja"])
indice_rad_uv_moderada <- as.numeric(tabla_ind["Moderada"])
indice_rad_uv_alta <- as.numeric(tabla_ind["Alta"])
indice_rad_uv_malta <- as.numeric(tabla_ind["Muy Alta"])
indice_rad_uv_ealta <- as.numeric(tabla_ind["Extrema Alta"])
# Probabilidades de Indice Radiación UV
casos_totales <- length(EspacioM$Categoria_IND_RAD_UV)
prob_indice_rad_uv_baja <- round(indice_rad_uv_baja/casos_totales,2)
prob_indice_rad_uv_moderada <- round(indice_rad_uv_moderada/casos_totales,2)
prob_indice_rad_uv_alta <- round(indice_rad_uv_alta/casos_totales,2)
prob_indice_rad_uv_malta  <- round(indice_rad_uv_malta/casos_totales,2)
prob_indice_rad_uv_ealta <- round(indice_rad_uv_ealta/casos_totales,2)
tabla_ind
cat("Probabilidad B:", round(prob_indice_rad_uv_baja,2), "\n")
cat("Probabilidad M:", round(prob_indice_rad_uv_moderada,2), "\n")
cat("Probabilidad A:", round(prob_indice_rad_uv_alta,2), "\n")
cat("Probabilidad MA:", round(prob_indice_rad_uv_malta,2), "\n")
cat("Probabilidad EA:", round(prob_indice_rad_uv_ealta,2), "\n")
summary(DFP$T2M)
Categoria_T2M <-cut(DFP$T2M, breaks = c(-9,0,7,13,18,24,29), labels = c("Helada","Muy fría","Fría","Fresca","Cómoda", "Caliente"),include.lowest = TRUE)
EspacioM2 <- data.frame(DFP$T2M, Categoria_T2M)
Categoria_RAD_SOL <-cut(DFP$RAD_SOL, breaks = c(0,200,430,Inf), labels = c("Bajo","Medio","Alto"),include.lowest = TRUE)
EspacioM <- data.frame(DFP, Categoria_IND_RAD_UV, Categoria_T2M, Categoria_RAD_SOL)
# Variable T2M
# EspacioM2
tabla_t2m <- table(EspacioM2$Categoria_T2M)
t2m_helada <- as.numeric(tabla_t2m["Helada"])
t2m_mfria <- as.numeric(tabla_t2m["Muy fría"])
t2m_fria <- as.numeric(tabla_t2m["Fría"])
t2m_fresca <- as.numeric(tabla_t2m["Fresca"])
t2m_comoda <- as.numeric(tabla_t2m["Cómoda"])
t2m_caliente <- as.numeric(tabla_t2m["Caliente"])
# Probabilidades de Indice Radiación UV
casos_totales <- length(EspacioM2$Categoria_T2M)
prob_t2m_helada <- t2m_helada/casos_totales
prob_t2m_mfria <- round(t2m_mfria/casos_totales,2)
prob_t2m_fria <- round(t2m_fria/casos_totales,2)
prob_t2m_fresca  <- round(t2m_fresca/casos_totales,2)
prob_t2m_comoda <- round(t2m_comoda/casos_totales,2)
prob_t2m_caliente <- round(t2m_caliente/casos_totales,2)
tabla_t2m
cat("Probabilidad HE:", prob_t2m_helada, "\n")
cat("Probabilidad VC:", round(prob_t2m_mfria,2), "\n")
cat("Probabilidad F:", round(prob_t2m_fria,2), "\n")
cat("Probabilidad FE:", round(prob_t2m_fresca,2), "\n")
cat("Probabilidad C:", round(prob_t2m_comoda,2), "\n")
cat("Probabilidad HT:", round(prob_t2m_caliente,2), "\n")
data <- data.frame(
CategoriaA = EspacioM$Categoria_T2M,
CategoriaB = EspacioM$Categoria_IND_RAD_UV)
# Crear el gráfico de mosaico con ggplot2
ggplot(data, aes(x = CategoriaA, fill = CategoriaB)) +
geom_bar(position = "fill") + labs(x = "Categoría T2M", y = TeX("$h_i$"), title = "Gráfico de Mosaico", fill = "Categoría Indice de Radiación UV")
Condicional1 <- data.frame(Var1 = EspacioM$Categoria_RAD_SOL, Var2 = EspacioM$T2M)
Temp_prom <- mean(Condicional1$Var2)
Condicional1 <- Condicional1 %>%
mutate(Cumple_Condicion = ifelse(Var2 <= Temp_prom, "T <= T_prom", "T > T_prom"))
tabla_cruzada <- table(Condicional1$Cumple_Condicion, EspacioM$Categoria_RAD_SOL)
tabla_cruzada
prob_A <- round((sum(Condicional1$Var1 == "Bajo")/casos_favorables),2)
prob_A <- round((sum(Condicional1$Var1 == "Bajo")/casos_totales),2)
prob_B <- round((sum(Condicional1$Cumple_Condicion == "T > T_prom")/casos_totales),3)
prob_AcapB <- round((sum(Condicional1$Cumple_Condicion[Condicional1$Var1 == "Bajo"] == "T > T_prom"))/casos_totales,3)
prob_AconB <- round(prob_AcapB/prob_B,2)
cat('P(A):', prob_A, "\n")
cat('P(B):', prob_B, "\n")
cat('P(A ∩ B):', prob_AcapB, "\n")
cat('P(A/B):', prob_AconB, "\n")
if(!require(readr)){install.packages('readr')}
library(readr)
if(!require(dplyr)){install.packages('dplyr')}
library(dplyr)
if(!require(ggplot2)){install.packages('ggplot2')}
library(ggplot2)
if(!require(corrplot)){install.packages('corrplot')}
library(corrplot)
if(!require(fitdistrplus)){install.packages('fitdistrplus')}
library(fitdistrplus)
if(!require(car)){install.packages('car')}
library(car)
if(!require(latex2exp)){install.packages('latex2exp')}
library(latex2exp)
if(!require(ggthemes)){install.packages('ggthemes')}
library(ggthemes)
DF <- read_csv("Dataframe_Final.csv")
DF
colnames(DF)[5] <- "RAD_UVA"
colnames(DF)[6] <- "RAD_SOL"
colnames(DF)[7] <- "IND_RAD_UV"
colnames(DF)[11] <- "PRECPT"
spec(DF)
table(DF$HR[DF$RAD_UVA == 0])
table(DF$HR[DF$RAD_SOL == 0])
table(DF$HR[DF$IND_RAD_UV == 0])
table(DF$HR[DF$PRECPT == 0])
DFP <- DF %>% filter(HR >= 6 & HR < 18)
DFP
cv <- function(x, na.rm=FALSE) {
return (sd(x, na.rm=na.rm) / mean(x, na.rm=na.rm))
}
Moda <- function(x) {
return (table(x)[which.max(table(x))])
}
moda <- function(x) {
return (names(Moda(x)))
}
resumen_variable <- function(x){return
cat("Descriptores de posición:", "\n")
cat("Mínimo:", min(x), "\n")
cat("Máximo:", max(x), "\n")
cat("Media:", round(mean(x),2), "\n")
cat("Moda:", moda(x), "\n")
cat("Mediana:", median(x), "\n")
cat("\n")
cat("Descriptores de dispersión:", "\n")
cat("Varianza", round(var(x),2), "\n")
cat("Coeficiente de Variación:", round(cv(x),2), "\n")
cat("Desviación Estándar:", round(sd(x),2), "\n")
cat("Rango Intercuartil:", round(IQR(x),2), "\n")
}
resumen_variable(DFP$RAD_SOL)
par(mfrow = c(1, 2))
modaRAD_SOL <- as.numeric(names(Moda(DFP$RAD_SOL)))
hist(DFP$RAD_SOL, col="skyblue", main="Histograma de Radiación Solar", xlab="Radiación Solar (W/m^2.h)", ylab="Frecuencia")
abline(v=mean(DFP$RAD_SOL), col="red", lwd=2)
abline(v=median(DFP$RAD_SOL), col="blue", lwd=2, lty = "dashed")
abline(v=modaRAD_SOL, col="black", lwd=2, lty = "dashed")
legend("topright", legend=c("Media", "Mediana","Moda"), col=c("red", "blue","black"), lwd=2)
plot(density(DFP$RAD_SOL), main="Densidad de Radiación Solar")
par(mfrow = c(1, 1))
resumen_variable(DFP$IND_RAD_UV)
par(mfrow = c(1, 2))
modaIND_RAD_UV <- as.numeric(names(Moda(DFP$IND_RAD_UV)))
hist(DFP$IND_RAD_UV, col="orange3", main= "Histograma de Índice de\nRadiación UV", xlab="Índice de Radiación UV", ylab="Frecuencia")
abline(v=mean(DFP$IND_RAD_UV), col="red", lwd=2)
abline(v=median(DFP$IND_RAD_UV), col="blue", lwd=2, lty = "dashed")
abline(v=modaIND_RAD_UV, col="black", lwd=2, lty = "dashed")
legend("topright", legend=c("Media", "Mediana","Moda"), col=c("red", "blue","black"), lwd=2)
plot(density(DFP$IND_RAD_UV), main="Densidad de Índice de\nRadiación UV")
par(mfrow = c(1, 1))
resumen_variable(DFP$T2M)
modaT2M <- as.numeric(names(Moda(DFP$T2M)))
boxplot(DFP$T2M, col="lightblue", main= "Boxplot de Temperatura a 2 metros", xlab="T2M (°C)", horizontal = TRUE)
abline(v=mean(DFP$T2M), col="blue", lwd=2, lty = "dashed")
abline(v=modaT2M, col = "red3", lwd=2, lty = "dashed")
legend("topright", legend=c("Media","Moda"), col=c("blue","red3"), lwd=2)
resumen_variable(DFP$RH2M)
modaRH2M <- as.numeric(names(Moda(DFP$RH2M)))
hist(DFP$RH2M, col="skyblue", main= "Histograma de Húmedad \nRelativa", xlab="Húmedad relativa (%)", ylab="Frecuencia")
abline(v=mean(DFP$RH2M), col="red", lwd=2)
abline(v=median(DFP$RH2M), col="blue", lwd=2, lty = "dashed")
abline(v=modaRH2M, col="black", lwd=2)
legend("topright", legend=c("Media", "Mediana","Moda"), col=c("red", "blue","black"), lwd=2)
plot(density(DFP$RH2M), main="Densidad de Húmedad \nRelativa")
resumen_variable(DFP$PRECPT)
plot(density(DFP$PRECPT), main = "Densidad de Precipitación", xlab = "PRECPT")
resumen_variable(DFP$PS)
modaPS <- as.numeric(names(Moda(DFP$PS)))
plot(density(DFP$PS), main="Densidad de Presión")
abline(v=mean(DFP$PS), col="red", lwd=2, lty = "dashed")
abline(v=median(DFP$PS), col="green3", lwd=2, lty = "dashed")
abline(v=modaPS, col = "blue3", lwd=2, lty = "dashed")
legend("topright", legend=c("Media", "Mediana", "Moda"), col=c("red", "green3","blue3"), lwd=2)
fechas_limite <- c(as.Date(c("2022-03-20", "2022-06-20", "2022-09-22", "2022-12-21")),
as.Date(c("2021-03-20", "2021-06-20", "2021-09-22", "2021-12-21")),
as.Date(c("2020-03-19", "2020-06-20", "2020-09-22", "2020-12-21")),
as.Date(c("2019-03-20", "2019-06-21", "2019-09-23", "2019-12-21")),
as.Date(c("2018-03-20", "2018-06-21", "2018-09-22", "2018-12-21")))
estaciones <- c("Verano", "Otoño", "Invierno", "Primavera")
DFP$SEASON <- estaciones[cut(DFP$DATE, breaks = fechas_limite, labels = FALSE) %% 4 + 1]
barplot(table(DFP$SEASON), main = "Estaciones del año", xlab = "Estación", ylab = "Frecuencia", col=c("lightblue3","orange3","green3","yellow3"))
Moda(DFP$SEASON)
RAD_MEAN_MO_YEAR <- aggregate(DFP$RAD_SOL, by=list(DFP$YEAR, DFP$MO), FUN=mean)
colnames(RAD_MEAN_MO_YEAR)[1] <- "YEAR"
colnames(RAD_MEAN_MO_YEAR)[2] <- "MO"
colnames(RAD_MEAN_MO_YEAR)[3] <- "RAD_SOL_MEAN"
RAD_MEAN_MO_YEAR
ggplot(RAD_MEAN_MO_YEAR, aes(x = MO, y = RAD_SOL_MEAN, color = factor(YEAR))) +
geom_line() +
labs(x = "Mes", y = "Radiación Solar Promedio", title = "Radiación solar promedio por mes y año") +
scale_x_continuous(breaks = 1:12) +
scale_color_discrete(name = "Año")
T2M_MEAN_SEASON_YEAR <- aggregate(DFP$T2M, by=list(DFP$YEAR, DFP$SEASON), FUN=mean)
colnames(T2M_MEAN_SEASON_YEAR)[1] <- "YEAR"
colnames(T2M_MEAN_SEASON_YEAR)[2] <- "SEASON"
colnames(T2M_MEAN_SEASON_YEAR)[3] <- "T2M_MEAN"
T2M_MEAN_SEASON_YEAR
ggplot(T2M_MEAN_SEASON_YEAR, aes(x = SEASON, y = T2M_MEAN, color = factor(YEAR))) +
geom_point() +
labs(x = "Estación", y = "Temperatura Promedio", title = "Temperatura promedio por estación y año") +
scale_color_discrete(name = "Año")
cov(DFP$T2M, DFP$RAD_SOL)
smoothScatter(DFP$RAD_SOL, DFP$T2M,
main = "Relación entre Radiación Solar y Temperatura",
xlab = "Radiación Solar (W/m^2.h)", ylab = "Temperatura (°C)")
# Ajustar línea de tendencia
fit <- lm(DFP$T2M ~ DFP$RAD_SOL)
abline(fit, col = "red")
# Calcular el coeficiente de correlación
cor <- round(cor(DFP$RAD_SOL, DFP$T2M, method="pearson"),2)
# Agregar la leyenda
legend("topleft",
legend = c(paste("Línea de tendencia: y = ", round(fit$coefficients[2],2), "*x + ",
round(fit$coefficients[1],2), sep=""),
paste("Coeficiente de correlación: ", cor)),
col=c("red","black"), lty=1, lwd=2, cex=0.8, bty="n")
DFP_CORR <- DFP[, c("RAD_SOL", "RAD_UVA", "IND_RAD_UV", "T2M", "RH2M", "QV2M", "PRECPT", "PS", "WS10M")]
corrplot(cor(DFP_CORR), method = "square", tl.cex = 0.7, tl.srt = 90, tl.col = "black", addCoef.col = 1, addgrid.col = 1)
data <- data.frame(
CategoriaA = rep(c("A", "B", "C"), each = 50),
CategoriaB = rep(c("X", "Y", "Z"), times = 50)
)
# Crear el gráfico de mosaico con ggplot2
ggplot(data, aes(x = CategoriaA, fill = CategoriaB)) +
geom_bar(position = "fill")
Categoria_IND_RAD_UV <-cut(DFP$IND_RAD_UV, breaks = c(0,3,6,8,11,20), labels = c("Baja","Moderada","Alta","Muy Alta","Extrema Alta"),include.lowest = TRUE)
EspacioM <- data.frame(DFP, Categoria_IND_RAD_UV)
# Variable IND_RAD_SOL
tabla_ind <- table(EspacioM$Categoria_IND_RAD_UV)
indice_rad_uv_baja <- as.numeric(tabla_ind["Baja"])
indice_rad_uv_moderada <- as.numeric(tabla_ind["Moderada"])
indice_rad_uv_alta <- as.numeric(tabla_ind["Alta"])
indice_rad_uv_malta <- as.numeric(tabla_ind["Muy Alta"])
indice_rad_uv_ealta <- as.numeric(tabla_ind["Extrema Alta"])
# Probabilidades de Indice Radiación UV
casos_totales <- length(EspacioM$Categoria_IND_RAD_UV)
prob_indice_rad_uv_baja <- round(indice_rad_uv_baja/casos_totales,2)
prob_indice_rad_uv_moderada <- round(indice_rad_uv_moderada/casos_totales,2)
prob_indice_rad_uv_alta <- round(indice_rad_uv_alta/casos_totales,2)
prob_indice_rad_uv_malta  <- round(indice_rad_uv_malta/casos_totales,2)
prob_indice_rad_uv_ealta <- round(indice_rad_uv_ealta/casos_totales,2)
tabla_ind
cat("Probabilidad B:", round(prob_indice_rad_uv_baja,2), "\n")
cat("Probabilidad M:", round(prob_indice_rad_uv_moderada,2), "\n")
cat("Probabilidad A:", round(prob_indice_rad_uv_alta,2), "\n")
cat("Probabilidad MA:", round(prob_indice_rad_uv_malta,2), "\n")
cat("Probabilidad EA:", round(prob_indice_rad_uv_ealta,2), "\n")
summary(DFP$T2M)
Categoria_T2M <-cut(DFP$T2M, breaks = c(-9,0,7,13,18,24,29), labels = c("Helada","Muy fría","Fría","Fresca","Cómoda", "Caliente"),include.lowest = TRUE)
EspacioM2 <- data.frame(DFP$T2M, Categoria_T2M)
Categoria_RAD_SOL <-cut(DFP$RAD_SOL, breaks = c(0,200,430,Inf), labels = c("Bajo","Medio","Alto"),include.lowest = TRUE)
EspacioM <- data.frame(DFP, Categoria_IND_RAD_UV, Categoria_T2M, Categoria_RAD_SOL)
# Variable T2M
# EspacioM2
tabla_t2m <- table(EspacioM2$Categoria_T2M)
t2m_helada <- as.numeric(tabla_t2m["Helada"])
t2m_mfria <- as.numeric(tabla_t2m["Muy fría"])
t2m_fria <- as.numeric(tabla_t2m["Fría"])
t2m_fresca <- as.numeric(tabla_t2m["Fresca"])
t2m_comoda <- as.numeric(tabla_t2m["Cómoda"])
t2m_caliente <- as.numeric(tabla_t2m["Caliente"])
# Probabilidades de Indice Radiación UV
casos_totales <- length(EspacioM2$Categoria_T2M)
prob_t2m_helada <- t2m_helada/casos_totales
prob_t2m_mfria <- round(t2m_mfria/casos_totales,2)
prob_t2m_fria <- round(t2m_fria/casos_totales,2)
prob_t2m_fresca  <- round(t2m_fresca/casos_totales,2)
prob_t2m_comoda <- round(t2m_comoda/casos_totales,2)
prob_t2m_caliente <- round(t2m_caliente/casos_totales,2)
tabla_t2m
cat("Probabilidad HE:", prob_t2m_helada, "\n")
cat("Probabilidad VC:", round(prob_t2m_mfria,2), "\n")
cat("Probabilidad F:", round(prob_t2m_fria,2), "\n")
cat("Probabilidad FE:", round(prob_t2m_fresca,2), "\n")
cat("Probabilidad C:", round(prob_t2m_comoda,2), "\n")
cat("Probabilidad HT:", round(prob_t2m_caliente,2), "\n")
data <- data.frame(
CategoriaA = EspacioM$Categoria_T2M,
CategoriaB = EspacioM$Categoria_IND_RAD_UV)
# Crear el gráfico de mosaico con ggplot2
ggplot(data, aes(x = CategoriaA, fill = CategoriaB)) +
geom_bar(position = "fill") + labs(x = "Categoría T2M", y = TeX("$h_i$"), title = "Gráfico de Mosaico", fill = "Categoría Indice de Radiación UV")
Condicional1 <- data.frame(Var1 = EspacioM$Categoria_RAD_SOL, Var2 = EspacioM$T2M)
Temp_prom <- mean(Condicional1$Var2)
Condicional1 <- Condicional1 %>%
mutate(Cumple_Condicion = ifelse(Var2 <= Temp_prom, "T <= T_prom", "T > T_prom"))
tabla_cruzada <- table(Condicional1$Cumple_Condicion, EspacioM$Categoria_RAD_SOL)
tabla_cruzada
prob_A <- round((sum(Condicional1$Var1 == "Bajo")/casos_totales),2)
prob_B <- round((sum(Condicional1$Cumple_Condicion == "T > T_prom")/casos_totales),3)
prob_AcapB <- round((sum(Condicional1$Cumple_Condicion[Condicional1$Var1 == "Bajo"] == "T > T_prom"))/casos_totales,3)
prob_AconB <- round(prob_AcapB/prob_B,2)
cat('P(A):', prob_A, "\n")
cat('P(B):', prob_B, "\n")
cat('P(A ∩ B):', prob_AcapB, "\n")
cat('P(A/B):', prob_AconB, "\n")
if(prob_AconB == prob_A)
{
print('Son eventos independientes')
} else {
print('Son eventos dependientes')
}
Condicional2 <- data.frame(Var1 = EspacioM$Categoria_RAD_SOL, Var2 = EspacioM$PS)
PS_mean <- mean(Condicional2$Var2)
Condicional2 <- Condicional2 %>%
mutate(Cumple_Condicion = ifelse(Var2 <= PS_mean, "P <= P_prom", "P > P_prom"))
tabla_cruzada2 <- table(Condicional2$Cumple_Condicion, EspacioM$Categoria_RAD_SOL)
tabla_cruzada2
prob_C <- round((sum(Condicional2$Var1 == "Medio"))/casos_totales,2)
prob_D <- round((sum(Condicional2$Cumple_Condicion == "P <= P_prom"))/casos_totales,3)
prob_CcapD <- round((sum(Condicional2$Cumple_Condicion[Condicional2$Var1 == "Medio"] == "P <= P_prom"))/casos_totales,3)
prob_CconD <- round(prob_CcapD/prob_D,2)
cat('P(C):', prob_C, "\n")
cat('P(D):', prob_D, "\n")
cat('P(C ∩ D):', prob_CcapD, "\n")
cat('P(C/D):', prob_CconD, "\n")
if(prob_CconD == prob_C)
{
print('Son eventos independientes')
} else {
print('Son eventos dependientes')
}
binom_sum <- function(size, prob, lb, ub, col = 4, lwd = 1, ...) {
x <- 0:size
if (missing(lb)) {
lb <- min(x)
}
if (missing(ub)) {
ub <- max(x)
}
plot(dbinom(x, size = size, prob = prob), type = "h", lwd = lwd, ...)
if(lb == min(x) & ub == max(x)) {
color <- col
} else {
color <- rep(1, length(x))
color[(lb + 1):ub ] <- col
}
lines(dbinom(x, size = size, prob = prob), type = "h",
col =  color, lwd = lwd, ...)
}
DFP_PRECPT <- subset(DFP, select=PRECPT)
DFP_PRECPT$PRECPT <- apply(DFP["PRECPT"], 1, function(x) ifelse(x==0, 0, 1))
cantidad_exito <- sum(DFP_PRECPT$PRECPT)
cantidad_fracaso <- length(DFP_PRECPT$PRECPT) - cantidad_exito
prob_exito <- cantidad_exito / length(DFP_PRECPT$PRECPT)
prob_fracaso <- cantidad_fracaso / length(DFP_PRECPT$PRECPT)
cat('Probabilidad de éxito:', prob_exito, "\n")
cat('Probabilidad de fracaso:', prob_fracaso)
x <- 0:1000
plot(dbinom(x, size = 1000, prob = prob_exito), type = "h", lwd = 2,
main = "Función de Probabilidad Binomial de X",
ylab = "P(X = x)", xlab = "X")
binom_sum(size = 1000, prob = prob_exito, ub = 150, lwd = 2,
ylab = "P(X = x)", xlab = "X", main = "Función de Probabilidad Binomial de X")
pPrep <- round(sum(dbinom(0:150, size = 1000, prob = prob_exito)),4)
cat('La probabilidad de que 150 o menos observaciones registren precipitación:', pPrep)
geo_sum <- function(size, prob, lb, ub, col = 4, lwd = 1, ...) {
x <- 0:size
if (missing(lb)) {
lb <- min(x)
}
if (missing(ub)) {
ub <- max(x)
}
plot(dgeom(x, prob = prob), type = "h", lwd = lwd, ...)
if(lb == min(x) & ub == max(x)) {
color <- col
} else {
color <- rep(1, length(x))
color[(lb + 1):ub ] <- col
}
lines(dgeom(x, prob = prob), type = "h",
col =  color, lwd = lwd, ...)
}
cat('Probabilidad de éxito:', prob_t2m_caliente, "\n")
x <- c(0:200)
plot(dgeom(x, prob = prob_t2m_caliente), type = "h", lwd = 2,
main = "Función de Probabilidad Geométrica de X",
ylab = "P(X = x)", xlab = "X")
geo_sum(200, prob = prob_t2m_caliente, ub = 60, lwd = 2,
ylab = "P(X = x)", xlab = "X",main = "Función de Probabilidad Geométrica de X")
pT2m <- round(sum(pgeom(60, prob = prob_t2m_caliente)),4)
cat('La probabilidad de que sea necesario registrar 60 o menos observaciones para obtener por primera vez temperatura caliente es:', pT2m)
par(mfrow=c(3,3))
hist(DFP$RAD_UVA)
hist(DFP$RAD_SOL)
hist(DFP$IND_RAD_UV)
hist(DFP$T2M)
hist(DFP$QV2M)
hist(DFP$RH2M)
hist(DFP$PRECPT)
hist(DFP$PS)
hist(DFP$WS10M)
normal_area <- function(mean = 0, sd = 1, lb, ub, acolor = "lightgray", nameX ="X", nameY="Y", nameH="H", ...) {
x <- seq(mean - 3 * sd, mean + 3 * sd, length = 100)
if (missing(lb)) {
lb <- min(x)
}
if (missing(ub)) {
ub <- max(x)
}
x2 <- seq(lb, ub, length = 100)
plot(x, dnorm(x, mean, sd), type = "n", xlab = nameX, ylab = nameY, main = nameH)
y <- dnorm(x2, mean, sd)
polygon(c(lb, x2, ub), c(0, y, 0), col = acolor)
lines(x, dnorm(x, mean, sd), type = "l", ...)
}
hist(DFP$RH2M,breaks=20, freq=FALSE, main="Distribución de Humedad Relativa", xlab="Humedad Relativa (%)", col="lightblue")
lines(density(DFP$RH2M, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DFP$RH2M,na.rm=TRUE), sd(DFP$RH2M,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórca"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.8)
parametros_normal <- fitdist(DFP$RH2M,"norm")
parametros_normal$estimate
mu <- 54.618
sigma <- 17.272
x <- seq(-3, 3, length = 100) * sigma + mu
f <- dnorm(x, mu, sigma)
plot(x, f, type = "l", lwd = 2, col = "blue", xlab = "X" , ylab = "P(X=x)", main = "Distribución Normal de X")
abline(v = mu) # Línea vertical en la media
mu <- 54.618
sigma <- 17.272
normal_area(mean = mu, sd = sigma, lb = 40, ub = 60, lwd = 2, acolor = "lightblue", nameX = "X",nameY = "P(X=x)",nameH = "Función de Distribución Normal de X")
text(50, 0.01, "42.36%", srt = 90)
pH2M <- round(pnorm(60, mu, sigma) - pnorm(40, mu, sigma),4)
cat('La probabilidad de que probabilidad de que un hogar en las provincias de Lima mantenga una humedad relativa adecuada es:', pH2M)
exp_area <- function(rate = 1, lb, ub, nameX ="X", nameY="Y", nameH="H", acolor = "lightgray", ...) {
x <- seq(0, 12/rate, 0.01)
if (missing(lb)) {
lb <- min(x)
}
if (missing(ub)) {
ub <- max(x)
}
x2 <- seq(lb, ub, length = 20)
plot(x, dexp(x, rate = rate), type = "n",xlim = c(0, 20), xlab = nameX, ylab = nameY, main = nameH)
y <- dexp(x2, rate = rate)
polygon(c(lb, x2, ub), c(0, y, 0), col = acolor)
lines(x, dexp(x, rate = rate), type = "l", ...)
}
hist(DFP$IND_RAD_UV[DFP$PROV=="Lima"],breaks=15, freq=FALSE, main="Distribución de Índ. de Radiación UV en Lima Metropolitana", xlab="Índice de Radiación", col="gray")
parametros_exponencial <- fitdist(DFP$IND_RAD_UV[DFP$PROV=="Lima"],"exp")
parametros_exponencial
lambda <- 0.2279
x <- seq(0, 16.48, 0.1)
hist(DFP$IND_RAD_UV[DFP$PROV=="Lima"], main="Distribución de Índ. de Radiación UV en Lima Metropolitana", xlab="Índice de Radiación",prob=TRUE,xlim = c(0, 20),ylim = c(0, 0.3), breaks = 11)
lines(density(DFP$IND_RAD_UV[DFP$PROV=="Lima"], na.rm=TRUE),col="red", lty = 2, lwd=2)
curve(dexp(x, rate = lambda), lwd = 2, col = "blue", add = T)
legend("topright", c("curva observada", "curva (exponencial) teórica"), lty = 1, lwd = 2, col = c("red", "blue"), bty = "n", cex = 0.8)
x <- seq(0, 16.48, 0.1)
exp_area(rate =lambda, lb = 8, ub = 10, acolor = rgb(1, 0, 0, alpha = 0.5), nameX = "X",nameY = "P(X=x)",nameH = "Función de Probabilidad Exponencial de X")
text(9, 0.02, "6%", col = "black", cex = 0.7)
pInd <- round(pexp(10, rate = lambda) - pexp(8, rate = lambda),2)
cat('La probabilidad de que una persona en la provincia de Lima Metropolitana sufra algún daño es:', pInd)
