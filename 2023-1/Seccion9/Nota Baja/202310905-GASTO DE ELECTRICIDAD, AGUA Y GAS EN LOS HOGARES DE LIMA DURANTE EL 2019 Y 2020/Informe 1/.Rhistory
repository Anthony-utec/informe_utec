fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,100)
)
),
showlegend = F
)
fig
unique(LIMA3$T_VIVIENDA)
# Se guardan las frecuencias de cada tipo de vivienda
frecuencias <- table(LIMA3$T_VIVIENDA)
# Gráfica de barras
bar<-barplot(frecuencias, horiz = FALSE, col = c("#8DEEEE","#F0E68C","#98FB98","#FFC1C1","#C1FFC1"), border = "black",
xlab = "T_VIVIENDA", ylab = "Cantidad de hogares", main = "TIPO DE VIVIENDA",
cex.axis = 0.8,ylim = c(0, 4000))  # Ajusta el valor según el tamaño deseado
text(bar, table(LIMA3$T_VIVIENDA)+ 150, labels = table(LIMA3$T_VIVIENDA))
grid(nx = NA, ny = NULL, lwd = 1, lty = 1, col = "grey")
# Crea la tabla de contingencia
tabla_contingencia <- table(LIMA3$ESTRATO, LIMA3$VIVIENDA)
# Se muestra
tabla_contingencia
# Se crea la relación entre las dos variables
ESTRATOVIVI<-table( LIMA3$VIVIENDA,LIMA3$ESTRATO)
# Gráfico
mosaicplot(ESTRATOVIVI,las = 2,main="VIVIENDA VS ESTRATO" ,col=c("green","orange","purple","lightblue", "yellow","red"))
summary(LIMA3$AGUA)
modelo <- lm(AGUA ~ METROS, data = LIMA3)
# Crear el gráfico de regresión lineal
plot(LIMA3$METROS, LIMA3$AGUA,
col = "blue",
xlab = "METROS", ylab = "AGUA",
main = "Gráfico de Regresión Lineal")
contarPalabrasNotebook <- function(nombreNotebook) {
# Leer el archivo del notebook
lines <- readLines(nombreNotebook)
# Variable para almacenar el texto sin comentarios ni código
texto <- ""
# Bandera para indicar si estamos dentro de un chunk de código
dentroDeChunk <- FALSE
# Recorrer cada línea del notebook
for (linea in lines) {
# Verificar si la línea indica el inicio o fin de un chunk de código
if (grepl("^```", linea)) {
dentroDeChunk <- !dentroDeChunk
next
}
# Si no estamos dentro de un chunk de código, excluir comentarios y añadir la línea al texto
if (!dentroDeChunk) {
# Eliminar comentarios (líneas que comienzan con #)
lineaSinComentarios <- gsub("#.*", "", linea)
# Añadir la línea al texto si no está vacía
if (nchar(lineaSinComentarios) > 0) {
texto <- paste(texto, lineaSinComentarios)
}
}
}
# Contar las palabras en el texto
palabras <- strsplit(texto, "\\s+")
cantidadPalabras <- length(unlist(palabras))
return(cantidadPalabras)
}
cantidad_palabras = contarPalabrasNotebook("S5_Informe.Rmd")
frase <- paste("Este documento contiene ", cantidad_palabras, " palabras.")
print(frase)
# Solo ejecutar este chunk una vez
#install.packages("readr")
#install.packages("plyr")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("plotrix")
#install.packages("ggplot2")
#install.packages("gridExtra")
#install.packages("fmsb")
#install.packages("scales")
#install.packages("plotly")
#install.packages("reshape2")
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(plotrix)
library(ggplot2)
library(gridExtra)
library(fmsb)
library(scales)
library(plotly)
library(reshape2)
CAP100<-read_csv("ENAPREF_CAP100.csv",  locale =locale(encoding = "UTF-8"))
CAP100
r <- function(n){
round(n, 2)
}
dim(CAP100)
unique(CAP100$UBIGEO)
LIMA <- subset(CAP100, substr(UBIGEO, 1, 3) == "150")
LIMA
dim(LIMA)
LIMA1 <- LIMA[, c("ANIO", "MES", "ESTRATO", "P101","P102","P105","P119","P120","I110_A1","I110_A2","I110_A3","P111_C1_ENT")]
LIMA1
LIMA2<-rename(LIMA1,ESTRATO=`ESTRATO`, T_VIVIENDA=`P101`,
VIVIENDA=`P102`,
FUENTE_AGUA=`P105`,
ANTIGUEDAD=`P119`,
METROS=`P120`,
AGUA=`I110_A1`,
ELECTRICIDAD=`I110_A2`,
GAS_NATURAL=`I110_A3`,
GAS_PROP=`P111_C1_ENT`)
LIMA2
sum(is.na(LIMA2))
sum(complete.cases(LIMA2)) # casos completos
sum(!complete.cases(LIMA2))# casos incompletos
# Se almacena uno de los gases
GAS <- apply(LIMA2[, c("GAS_NATURAL", "GAS_PROP")], 1, sum, na.rm = TRUE)
# Agregar la columna unión a la base de datos
LIMA2$GAS <- GAS
# Imprimir la base de datos actualizada
LIMA2
LIMA2$GAS_NATURAL <- NULL
LIMA2$GAS_PROP <- NULL
LIMA2
sum(is.na(LIMA2)) # datos faltantes
sum(complete.cases(LIMA2)) # casos completos
sum(!complete.cases(LIMA2))# casos incompletos
LIMA2 <- LIMA2[apply(LIMA2, 1, function(x) sum(is.na(x))) < 1, ] # posible cambio
LIMA2
sum(is.na(LIMA2)) # datos faltantes
sum(complete.cases(LIMA2)) # casos completos
sum(!complete.cases(LIMA2))# casos incompletos
LIMA3<-LIMA2
LIMA3
unique(LIMA3$ESTRATO)
LIMA3 <- LIMA3 %>%
mutate(ESTRATO = recode(ESTRATO, "1" = "Alto","2" = "Medio Alto","3" = "Medio","4" = "Medio Bajo","5" = "Bajo","6"="Rural"))
LIMA3
unique(LIMA3$T_VIVIENDA)
LIMA3 <- LIMA3 %>%
mutate(T_VIVIENDA = recode(T_VIVIENDA, "1" = "Casa","2" = "Departamento","3" = "Quinta","4" = "Vecindad","5" = "Choza","6"="Improvisada","7"="No apto","8"="Otro"))
LIMA3
unique(LIMA3$VIVIENDA)
LIMA3 <- LIMA3 %>%
mutate(VIVIENDA = recode(VIVIENDA, "1" = "Alquilada","2" = "Propia","3" = "Propia-invasion","4" = "Propia-plazos","5" = "Cedida-trabajo","6"="Cedida","7"="Otro"))
LIMA3
unique(LIMA3$FUENTE_AGUA)
LIMA3 <- LIMA3 %>%
mutate(FUENTE_AGUA = recode(FUENTE_AGUA, "1" = "Red publica(dentro)","2" = "Red publica(fuera)","3" = "Pozo septico","4" = "Pozo ciego","5" = "Rio/sequia","6"="Campo abiero","7"="Otro"))
LIMA3
# Calcular la frecuencia absoluta
frec_abs <- table(LIMA3$ESTRATO)
frec_abs
# Calcular frecuencia relativa
frec_rel <- prop.table(frec_abs)
r(frec_rel*100)
# Creación de tipo de gráfico y de estratos con sus respectivos porcentajes
fig <- plot_ly(
type = 'scatterpolar',
r = c(7.75, 27.74, 25.94, 15.26, 22.24, 1.07),
theta = c("Alto", "Bajo", "Medio", "Medio_Alto", "Medio_Bajo", "Rural"),
fill = 'toself'
)
# Detalles de la gráfica, cómo ver porcentaje de 0 a 100
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,100)
)
),
showlegend = F
)
fig
unique(LIMA3$T_VIVIENDA)
# Se guardan las frecuencias de cada tipo de vivienda
frecuencias <- table(LIMA3$T_VIVIENDA)
# Gráfica de barras
bar<-barplot(frecuencias, horiz = FALSE, col = c("#8DEEEE","#F0E68C","#98FB98","#FFC1C1","#C1FFC1"), border = "black",
xlab = "T_VIVIENDA", ylab = "Cantidad de hogares", main = "TIPO DE VIVIENDA",
cex.axis = 0.8,ylim = c(0, 4000))  # Ajusta el valor según el tamaño deseado
text(bar, table(LIMA3$T_VIVIENDA)+ 150, labels = table(LIMA3$T_VIVIENDA))
grid(nx = NA, ny = NULL, lwd = 1, lty = 1, col = "grey")
# Crea la tabla de contingencia
tabla_contingencia <- table(LIMA3$ESTRATO, LIMA3$VIVIENDA)
# Se muestra
tabla_contingencia
# Se crea la relación entre las dos variables
ESTRATOVIVI<-table( LIMA3$VIVIENDA,LIMA3$ESTRATO)
# Gráfico
mosaicplot(ESTRATOVIVI,las = 2,main="VIVIENDA VS ESTRATO" ,col=c("green","orange","purple","lightblue", "yellow","red"))
summary(LIMA3$AGUA)
modelo <- lm(AGUA ~ METROS, data = LIMA3)
# Crear el gráfico de regresión lineal
plot(LIMA3$METROS, LIMA3$AGUA,
col = "blue",
xlab = "METROS", ylab = "AGUA",
main = "Gráfico de Regresión Lineal")
# Añadir la línea de regresión
abline(modelo, col = "red", lwd = 2)
datosreg<- data.frame("X"=LIMA3$METROS,"Y"=LIMA3$AGUA)
datosreg
resultados<-lm(datosreg$Y~datosreg$X,data=datosreg)
resultados
tabla<-data.frame("X"=LIMA3$METROS,"Y"=LIMA3$AGUA,"Y-estimado"=r(31.0848+0.1086*LIMA3$METROS))
tabla
taberrores<-data.frame("X(Metros)"=LIMA3$METROS,"Y(Agua)"=LIMA3$AGUA,"Y-estimado"=r(31.0848+0.1086*LIMA3$METROS),"error"=r(LIMA3$AGUA-(31.0848+0.1086*LIMA3$METROS)))
taberrores
#covarianza
r(cov(datosreg$X,datosreg$Y))
#coeficiente de correlación
r(cor(datosreg$X,datosreg$Y))
# Seleccionar las variables de interés
Agua <- LIMA3$AGUA
Electricidad <- LIMA3$ELECTRICIDAD
Gas <- LIMA3$GAS
# Calcular los descriptores numéricos
media1 <- r(mean(LIMA3$AGUA, na.rm=TRUE))
mediana1 <- r(median(LIMA3$AGUA, na.rm=TRUE))
desviacion1 <- r(sd(LIMA3$AGUA, na.rm=TRUE))
minimo1 <- min(LIMA3$AGUA)
maximo1 <- max(LIMA3$AGUA)
media2 <- r(mean(LIMA3$ELECTRICIDAD, na.rm=TRUE))
mediana2 <- r(median(LIMA3$ELECTRICIDAD, na.rm=TRUE))
desviacion2 <- r(sd(LIMA3$ELECTRICIDAD, na.rm=TRUE))
minimo2 <- min(LIMA3$ELECTRICIDAD)
maximo2 <- max(LIMA3$ELECTRICIDAD)
media3 <- r(mean(LIMA3$GAS, na.rm=TRUE))
mediana3 <- r(median(LIMA3$GAS, na.rm=TRUE))
desviacion3 <- r(sd(LIMA3$GAS, na.rm=TRUE))
minimo3 <- min(LIMA3$GAS)
maximo3 <- max(LIMA3$GAS)
# Calcular el coeficiente de variación estándar
coef_var1 <- r(desviacion1 / media1) * 100
coef_var2 <- r(desviacion2 / media2) * 100
coef_var3 <- r(desviacion3 / media3) * 100
# Crear la tabla de descriptores
tabla_descriptores <- data.frame(
Variable = c("Agua", "Electricidad", "Gas"),
Media = c(media1, media2, media3),
Mediana = c(mediana1, mediana2, mediana3),
"Desviación Estándar" = c(desviacion1, desviacion2, desviacion3),
"Coeficiente de Variación Estándar" = c(coef_var1, coef_var2, coef_var3),
Mínimo = c(minimo1, minimo2, minimo3),
Máximo = c(maximo1, maximo2, maximo3)
)
tabla_descriptores
LIMA3 %>% group_by(ESTRATO) %>% summarise(Media_AGUA = r(mean(AGUA, na.rm = T)),
Media_LUZ = r(mean(ELECTRICIDAD, na.rm = T)),
Media_GAS = r(mean(GAS, na.rm = T)))
# Agrupar los datos por nivel socio-económico y calcular el gasto promedio de cada servicio
agregado <- aggregate(cbind(AGUA, ELECTRICIDAD, GAS) ~ ESTRATO, data = LIMA3, FUN = mean)
# Gráfico de barras agrupadas
barplot(
t(as.matrix(agregado[, -1])),
beside = TRUE,
col = c("blue", "green", "red"),
ylim = c(0, max(agregado$AGUA, agregado$ELECTRICIDAD, agregado$GAS) * 1.1),
names.arg = agregado$ESTRATO,
xlab = "Nivel Socioeconómico",
ylab = "Gasto",
main = "Gasto de Agua, Electricidad y Gas por Nivel Socioeconómico"
)
legend(
"topright",
legend = c("Agua", "Electricidad", "Gas"),
fill = c("blue", "green", "red")
)
# Calcular el gasto promedio por mes
promedio_por_mes <- aggregate(ELECTRICIDAD ~ MES + ANIO, data = LIMA3, FUN = mean)
# Redondeo
promedio_por_mes$ELECTRICIDAD <- r(promedio_por_mes$ELECTRICIDAD)
# Gráfico
aa <- ggplot(promedio_por_mes, aes(x = MES, y = ELECTRICIDAD, color = factor(ANIO), group = factor(ANIO))) +
geom_line() +
geom_point(size = 3, color = "black") +
geom_text(aes(label = ELECTRICIDAD), vjust = -0.5, color = "black") +
labs(title = "Gasto promedio por mes de electricidad (2019 vs 2020)",
x = "Mes",
y = "Gasto promedio") +
scale_color_discrete(name = "Año")
aa
# Calcular el gasto promedio por mes
promedio_por_mesAGUA <- aggregate(AGUA ~ MES + ANIO, data = LIMA3, FUN = mean)
# Redondeo
promedio_por_mesAGUA$AGUA <- r(promedio_por_mesAGUA$AGUA)
# Gráfico
bb <- ggplot(promedio_por_mesAGUA, aes(x = MES, y = AGUA, color = factor(ANIO), group = factor(ANIO))) +
geom_line() +
geom_point(size = 3, color = "black") +
geom_text(aes(label = AGUA), vjust = -0.5, color = "black") +
labs(title = "Gasto promedio por mes de agua (2019 vs 2020)",
x = "Mes",
y = "Gasto promedio") +
scale_color_discrete(name = "Año")
bb
# Calcular el gasto promedio por mes
promedio_por_mesGAS <- aggregate(GAS ~ MES + ANIO, data = LIMA3, FUN = mean)
promedio_por_mesGAS$GAS <- r(promedio_por_mesGAS$GAS)
# Gráfico
cc <- ggplot(promedio_por_mesGAS, aes(x = MES, y = GAS, color = factor(ANIO), group = factor(ANIO))) +
geom_line() +
geom_point(size = 3, color = "black") +
geom_text(aes(label = GAS), vjust = -1.5, color = "black") +
labs(title = "Gasto promedio por mes de gas (2019 vs 2020)",
x = "Mes",
y = "Gasto promedio") +
scale_color_discrete(name = "Año")
cc
grid.arrange(aa, bb, cc,ncol = 1)
# Extrae las columnas AGUA y ELECTRICIDAD
agua <- LIMA3$AGUA
electricidad <- LIMA3$ELECTRICIDAD
# Crea el gráfico de dispersión
plot(agua, electricidad, main = "Correlación entre AGUA y ELECTRICIDAD",
xlab = "AGUA", ylab = "ELECTRICIDAD", col =c("green", "red"))
# Calcula la línea de tendencia (regresión lineal)
lm_model <- lm(electricidad ~ agua)
abline(lm_model, col = "blue")
# Se selecciona estrato rural
datos_rurales <- LIMA3[LIMA3$ESTRATO == "Bajo", ]
# Se escoge solo gastos en agua
tabla_fuente_agua <- table(datos_rurales$FUENTE_AGUA)
# Gráfico de barras
bp<-barplot(tabla_fuente_agua, col = "lightblue", xlab = "Fuente de Agua", ylab = "Frecuencia", main = "Fuente de Agua en Estrato Bajo", cex.axis = 0.8, cex.names = 0.5,  ylim = c(0, 600), xlim= c(0,8))
text(x = bp, y = tabla_fuente_agua, labels = tabla_fuente_agua, pos = 3, cex = 0.9)
# Se selecciona estrato rural
datos_rurales <- LIMA3[LIMA3$ESTRATO == "Alto", ]
# Se escoge solo gastos en agua
tabla_fuente_agua <- table(datos_rurales$FUENTE_AGUA)
# Gráfico de barras
bp<-barplot(tabla_fuente_agua, col = "lightgreen", xlab = "Fuente de Agua", ylab = "Frecuencia", main = "Fuente de Agua en Estrato Alto", cex.axis = 0.8, cex.names = 0.6)
text(x = bp, y = tabla_fuente_agua, labels = tabla_fuente_agua, pos = 1, cex = 0.9)
LIMA3 %>% group_by(T_VIVIENDA) %>% summarise(Media_AGUA = r(mean(AGUA, na.rm = T)), Media_LUZ = r(mean(ELECTRICIDAD, na.rm = T)), Media_GAS = r(mean(GAS, na.rm = T)))
# Agrupar los datos por tipo de vivienda y calcular el gasto promedio de cada servicio
agregado <- aggregate(cbind(AGUA, ELECTRICIDAD, GAS) ~ T_VIVIENDA, data = LIMA3, FUN = mean)
# Gráfico de barras agrupadas
barplot(
t(as.matrix(agregado[, -1])),
beside = TRUE,
col = c("skyblue", "lightgreen", "pink"),
ylim = c(0, max(agregado$AGUA, agregado$ELECTRICIDAD, agregado$GAS) * 1.1),
names.arg = agregado$T_VIVIENDA,
xlab = "Tipo de vivienda",
ylab = "Gasto",
main = "Gasto de Agua, Electricidad y Gas por Tipo de vivienda"
)
legend(
"topright",
legend = c("Agua", "Electricidad", "Gas"),
fill = c("skyblue", "lightgreen", "pink")
)
df <- data.frame(Agua = LIMA3$AGUA,
Electricidad = LIMA3$ELECTRICIDAD,
Gas = LIMA3$GAS)
# Convierte los datos a formato largo (long format)
df_long <- reshape2::melt(df)
# Calcula los valores de Q2 para cada variable
q2_values <- aggregate(value ~ variable, df_long, function(x) quantile(x, 0.5))
# Calcula el número de datos atípicos para cada variable
outliers_count <- aggregate(value ~ variable, df_long, function(x) sum(x < boxplot.stats(x)$stats[1] | x > boxplot.stats(x)$stats[5]))
# Ajusta el tamaño de la visualización de los boxplots
boxplot_theme <- theme(
plot.margin = margin(10, 5, 10, 5)  # Ajusta los márgenes de la visualización
)
# Crea el gráfico de boxplots
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
geom_point(data = df_long[df_long$value < boxplot.stats(df_long$value)$stats[1] | df_long$value > boxplot.stats(df_long$value)$stats[5], ],
aes(color = variable)) +
labs(x = "Variable", y = "Valor", title = "Boxplots de gastos en agua, electricidad y gas") +
geom_text(data = q2_values, aes(label = paste("Q2 =", value)), x = 1:3, y = q2_values$value, vjust = -1) +
scale_fill_manual(values = c("salmon", "green", "blue"), labels = c("Agua", "Electricidad", "Gas"), name = "Variables") +
geom_text(data = outliers_count, aes(label = value), vjust = -0.5, color = "red") +
boxplot_theme
unique(LIMA3$T_VIVIENDA)
unique(LIMA3$VIVIENDA)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
#install.packages("ggplot2")
library(ggplot2)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
#install.packages("ggplot2")
library(ggplot2)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(plotrix)
library(ggplot2)
library(gridExtra)
library(fmsb)
library(scales)
library(plotly)
library(reshape2)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
actis <- c("Selección de tema y variables","Redacción de objetivos","Revisión 1(R1)" ,"Resolver las correcciones de la R1" ,"Limpieza de base de datos" ,"Revisión 2 (R2)" ,"Correciones R2","Mejorar la limpieza de datos","Análisis descriptivo","Gráficos de las variables","Entrega de PG-1 oral","Resolver las correcciones del PG-1 oral","Presentación de la PG1 informe","PG-2","Entrega del proyecto de PG-2")
gantt <- data.frame(
name        = factor(actis, levels = actis),
start.date  = as.Date(c("2023-04-20","2023-04-22", "2023-04-26", "2023-04-30", "2023-05-10", "2023-05-14","2023-05-18","2023-05-22","2023-05-26","2023-05-28","2023-05-30","2023-05-31","2023-06-01","2023-06-08","2023-06-10")),
end.date    = as.Date(c("2023-04-22","2023-04-24", "2023-04-27", "2023-05-7", "2023-05-13", "2023-05-16","2023-05-21","2023-05-25","2023-05-27","2023-05-29","2023-06-01","2023-06-02","2023-06-02","2023-06-09","2023-06-20")),
Estado = c("Completado", "Completado", "Completado", "Completado","Completado", "Completado", "Completado","Completado", "Completado","Completado", "Completado","Completado", "Completado","Falta","Falta")
)
ggplot(gantt, aes(x =start.date, xend= end.date, y=name, yend = name, color=Estado)) +
geom_segment(size = 10) +
xlab(NULL) + ylab(NULL)
LIMA3 <- LIMA3 %>%
mutate(FUENTE_AGUA = recode(FUENTE_AGUA, "1" = "Red publica(dentro)","2" = "Red publica(fuera)","3" = "Pozo septico","4" = "Pozo ciego","5" = "Rio/sequia","6"="Campo abiero","7"="Otro"))
# Agrupar los datos por tipo de vivienda y calcular el gasto promedio de cada servicio
agregado <- aggregate(cbind(AGUA, ELECTRICIDAD, GAS) ~ T_VIVIENDA, data = LIMA3, FUN = mean)
# Gráfico de barras agrupadas
barplot(
t(as.matrix(agregado[, -1])),
beside = TRUE,
col = c("skyblue", "lightgreen", "pink"),
ylim = c(0, max(agregado$AGUA, agregado$ELECTRICIDAD, agregado$GAS) * 1.1),
names.arg = agregado$T_VIVIENDA,
xlab = "Tipo de vivienda",
ylab = "Gasto",
main = "Gasto de Agua, Electricidad y Gas por Tipo de vivienda"
)
legend(
"topright",
legend = c("Agua", "Electricidad", "Gas"),
fill = c("skyblue", "lightgreen", "pink")
)
# Calcular el gasto promedio por mes
promedio_por_mesGAS <- aggregate(GAS ~ MES + ANIO, data = LIMA3, FUN = mean)
promedio_por_mesGAS$GAS <- r(promedio_por_mesGAS$GAS)
# Gráfico
cc <- ggplot(promedio_por_mesGAS, aes(x = MES, y = GAS, color = factor(ANIO), group = factor(ANIO))) +
geom_line() +
geom_point(size = 3, color = "black") +
geom_text(aes(label = GAS), vjust = -1.5, color = "black") +
labs(title = "Gasto promedio por mes de gas (2019 vs 2020)",
x = "Mes",
y = "Gasto promedio") +
scale_color_discrete(name = "Año")
LIMA3 %>% group_by(ESTRATO) %>% summarise(Media_AGUA = r(mean(AGUA, na.rm = T)),
Media_LUZ = r(mean(ELECTRICIDAD, na.rm = T)),
Media_GAS = r(mean(GAS, na.rm = T)))
