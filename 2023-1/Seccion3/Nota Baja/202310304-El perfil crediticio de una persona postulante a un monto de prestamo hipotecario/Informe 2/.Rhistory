#cantidad de solicitantes
n <- 480
# Probabilidad de éxito
p <- 0.69
esperanza <- n * p
esperanza
# Cantidad de solicitantes
n <- 480
# Probabilidad de éxito
p <- 0.69
# Calcular la varianza
varianza <- n * p *(1-p)
varianza
des_est = varianza^(1/2)
des_est
des_est = sqrt(varianza)
des_est
cof_var = des_est/esperanza
cof_var
pbinom(335,480,0.69,lower.tail = F)
dbinom(60,88,0.69)
p = dhyper(8,20,7,10)
r(p)
round(p,2)
#muestra
N = nrow(DF2)
table(DF2$Historial_crediticio)
#Bueno=410 ; Malo=70
Prob_bueno=410/N
round(Prob_bueno,2)
#k
k <-410
n <- 27
esperanza <- n * (k/N)
esperanza
round(esperanza,2) #23.06
# probamos con otros valores de n
#si n_=50
n1=50
esperanza_2 <- n1 * (k/N)
esperanza_2
n2=250
esperanza_3<- n2* (k/N)
esperanza_3
n <- 27
# r
r <- 410/480
varianza <- (n*r)*(1-r)*((N-n)/(N-1))
(varianza)
desv_est = (varianza)**(0.5)
desv = round(desv_est,2)
desv
N <- 480   # Tamaño de la población
K <- 410   # Número de elementos de interés en la población
n <- 27   # Tamaño de la muestra
# Calcular las probabilidades de la distribución hipergeométrica
x <- 0:n   # Valores posibles de la variable aleatoria
prob <- dhyper(x, m = K, n = N - K, k = n)   # Cálculo de las probabilidades
# Graficar la distribución hipergeométrica
barplot(prob, names.arg = x, xlab = "X", ylab = "Probabilidad", main = "Distribución Hipergeométrica", col = "lavender")
n<-27
variable=DF2$Historial_crediticio
table(variable)
muestra<- sample(variable,size=n,replace=FALSE)
muestra
table(muestra)
p = dhyper(8,20,7,10)
round(p,2)
hist(DF2$Monto_de_préstamo,breaks=10, freq=FALSE, main="Histograma monto de préstamo", xlab="Monto de préstamo", col="lightblue")
lines(density(DF2$Monto_de_préstamo, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DF2$Monto_de_préstamo,na.rm=TRUE), sd(DF2$Monto_de_préstamo,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórica"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.5)
mediana <- median(DF2$Monto_de_préstamo)
mediana
mean(DF2$Monto_de_préstamo)
(varianza_grafico = 80.424258 ^2)
(varianza = (sd(DF2$Monto_de_préstamo))^2)
DF1<- DF2%>%filter (DF2$Grado_Académico == "Graduado") %>% dplyr::select("Monto_de_préstamo")
hist(DF1$Monto_de_préstamo,breaks=10, freq=FALSE, main="Histograma monto de préstamo", xlab="Monto de préstamo", col="linen")
lines(density(DF1$Monto_de_préstamo, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DF1$Monto_de_préstamo,na.rm=TRUE), sd(DF1$Monto_de_préstamo,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórica"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.8)
mediana <- median(DF1$Monto_de_préstamo)
mediana
mean(DF1$Monto_de_préstamo)
(varianza_grafico =  86.118107 ^2)
(varianza = (sd(DF1$Monto_de_préstamo))^2)
DF3<- DF2%>%filter (DF2$Grado_Académico == "No Graduado") %>% dplyr::select("Monto_de_préstamo")
hist(DF3$Monto_de_préstamo,breaks=10, freq=FALSE, main="Histograma monto de préstamo", xlab="Monto de préstamo", col="mediumaquamarine" )
lines(density(DF3$Monto_de_préstamo, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DF3$Monto_de_préstamo,na.rm=TRUE), sd(DF3$Monto_de_préstamo,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórica"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.8)
mediana <- median(DF3$Monto_de_préstamo)
mediana
mean(DF3$Monto_de_préstamo)
(varianza_grafico = 42.052068^2)
(varianza = (sd(DF3$Monto_de_préstamo))^2)
pnorm(150,117.12,42.05,F)
hist(DF2$Ingreso_del_solicitante, breaks = 10, freq = FALSE, main = "Histograma de ingreso del solicitante", xlab = "Ingreso del solicitante", col = "honeydew")
# Estimar la función de densidad de probabilidad (PDF) de los datos observados
lines(density(DF2$Ingreso_del_solicitante),col="red",lwd=3)
# Ajustar una distribución exponencial a los datos observados
fit_exp <- fitdistr(DF2$Ingreso_del_solicitante, "exponential")
lambda <- fit_exp$estimate
# Calcular la función de densidad de probabilidad (PDF) de la distribución exponencial
x <- seq(0, max(DF2$Ingreso_del_solicitante), length.out = 1000)
pdf_exp <- dexp(x, rate = lambda)
# Graficar la curva teórica de la distribución exponencial
lines(x, pdf_exp, col = "blue", lwd = 2)
# Mostrar leyenda
legend(x = "topright", y = max(densidad_obs$y), c("histograma", "curva observada", "curva (exponencial) teórica"),
lty = 1, lwd = c(0, 3, 2), col = c("honeydew", "red", "blue"), bty = "n",
cex = 0.6)
pexp(15000,0.00018642,F)
if(!require(readr)){install.packages('readr')}
library(readr)
if(!require(dplyr)){install.packages('dplyr')}
library(dplyr)
if(!require(ggplot2)){install.packages('ggplot')}
library(ggplot2)
if(!require(rriskDistributions)){install.packages('rriskDistributions')}
library(rriskDistributions)
if(!require(knitr)){install.packages("knitr")}
library(knitr)
if(!require(car)){install.packages("car")}
library(car)
if(!require(DescTools)){install.packages("DescTools")}
library(DescTools)
if(!require(kableExtra)){install.packages("kableExtra")}
library(kableExtra)
if(!require(remotes)){install.packages("remotes")}
library(remotes)
if(!require(tidyverse)){install.packages("tidyverse")}
library(tidyverse)
if(!require(MASS)){install.packages("MASS")}
library(MASS)
integrantes <- read_delim("INTEGRANTES.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(integrantes,5),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "white", background = "black") %>%
column_spec(1, bold = T, color = "blue")
DF <- read_csv("DATA.csv")
DF2 <- DF
colnames(DF2) <- c("ID", "Género", "Estado_civil","Carga_familiar", "Grado_Académico","Trabajador_independiente", "Ingreso_del_solicitante", "Ingresos_del_cosolicitante","Monto_de_préstamo", "Periodo_crediticio", "Historial_crediticio", "Ubicaión_de_propiedad", "Estado_de_préstamo")
DF2 %>% mutate(Género =
ifelse( Género == "Male", "Masculino",
ifelse( Género == "Female", "Femenino", Género
))) -> DF2
DF2 %>% mutate(Estado_civil =
ifelse( Estado_civil == "Yes", "Casado",
ifelse( Estado_civil == "No", "Soltero", Estado_civil
))) -> DF2
DF2 %>% mutate(Grado_Académico =
ifelse(Grado_Académico == "Graduate", "Graduado",
ifelse(Grado_Académico == "Not Graduate", "No Graduado",Grado_Académico
))) -> DF2
DF2 %>% mutate(Trabajador_independiente =
ifelse(Trabajador_independiente == "Yes", "Si",
ifelse(Trabajador_independiente== "No", "No", Trabajador_independiente
))) -> DF2
DF2 %>% mutate(Historial_crediticio =
ifelse(Historial_crediticio == "0", "Malo",
ifelse(Historial_crediticio == "1", "Bueno",Historial_crediticio
))) -> DF2
DF2 %>% mutate(Ubicaión_de_propiedad =
ifelse(Ubicaión_de_propiedad == "Rural", "Rural",
ifelse(Ubicaión_de_propiedad == "Semiurban", "Semiurbano",
ifelse(Ubicaión_de_propiedad == "Urban", "Urbano", Ubicaión_de_propiedad
)))) -> DF2
DF2 %>% mutate(Estado_de_préstamo =
ifelse(Estado_de_préstamo == "Y", "Aprobado",
ifelse(Estado_de_préstamo == "N", "Rechazado", Estado_de_préstamo
))) -> DF2
r <- function(x,na.rm=T){
return(round(x,digits =2))
}
cv = function(data) {
sd(data)/mean(data)
}
mode <- function(x) {
freq_table <- table(x)
mode <- as.numeric(names(freq_table)[freq_table == max(freq_table)])
return(mode)
}
Variables <- read_delim("Variables.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Variables,13),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "white", background = "red") %>%
column_spec(1, bold = T, color = "blue")
DF2 <- na.omit(DF2)
Descriptores <- read_delim("Descriptores numericos.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Descriptores,8),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "black", background = "lightblue") %>%
column_spec(1, bold = T, color = "blue")
monto_prestamo <- DF2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
datos2 <- monto_prestamo %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
hist(datos2$Ingreso_Total,breaks=30,col=  "#DCD0FF" ,main="Ingreso Total",ylab="densidad",xlab="Monto de ingreso ($)",prob=TRUE)
abline(v=median(datos2$Ingreso_Total),col="red",lwd=2)
abline(v=mean(datos2$Ingreso_Total),col="blue",lwd=2)
legend(30000,0.00020,legend=c("Mediana","Media"),lwd=2,col=c("red","blue"))
monto_prestamo <- DF2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
hist(monto_prestamo$Monto_de_préstamo,breaks=30,col=amarillo_suave <- "#DCD0FF"
,main="Monto de préstamo hipotecario",ylab="densidad",xlab="Monto de préstamo (miles de  $)",prob=TRUE)
abline(v=median(monto_prestamo$Monto_de_préstamo),col="red",lwd=2)
abline(v=mean(monto_prestamo$Monto_de_préstamo),col="blue",lwd=2)
legend(400,0.009,legend=c("Mediana","Media"),lwd=2,col=c("red","blue"))
library(dplyr)
datos1 <- DF2 %>%
filter(Estado_de_préstamo == "Aprobado")
boxplot(Monto_de_préstamo ~ Ubicaión_de_propiedad, data = datos1,
xlab = "Ubicación de la vivienda", ylab = "Monto del préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según su ubicación", col = c("#B2D8E5", "#FFFACD", "#FA8072"))
mosaicplot(table(DF2$Ubicaión_de_propiedad, DF2$Estado_de_préstamo), shade = FALSE, main = " Aprobación de crédito hipotecario según la ubicación de la propiedad",
xlab = "Ubicación de propiedad", ylab = "Aprobación de crédito", col = c("#C8E6C9","#FA8072"))
prop.table(table(DF2 %>% filter(Carga_familiar == "0") %>% dplyr::select(Estado_civil, Estado_de_préstamo)), margin = 1)
prop.table(table(DF2 %>% filter(Carga_familiar == "1") %>% dplyr::select(Estado_civil, Estado_de_préstamo)), margin = 1)
prop.table(table(DF2 %>% filter(Carga_familiar == "2") %>% dplyr::select(Estado_civil, Estado_de_préstamo)), margin = 1)
prop.table(table(DF2 %>% filter(Carga_familiar == "3+") %>% dplyr::select(Estado_civil, Estado_de_préstamo)), margin = 1)
# Crear los datos
Estado_civil <- c("Soltero", "Casado")
Carga_familiar <- c("0", "1", "2","3+")
# Proporciones de aprobación de préstamos hipotecarios
prop_aprobacion <- matrix(c(0.6363636, 0.5714286,0.7328244,0.7820513,
0.4666667,0.7500000,0.6923077,0.6756757), nrow = 2, ncol = 4, byrow = T)
# Crear un dataframe con los datos
datos <- data.frame(Estado_civil = rep(Estado_civil, each = 4),
Carga_familiar = rep(Carga_familiar, times = 2),
prop_aprobacion = c(prop_aprobacion))
# Crear el gráfico de heatmap
ggplot(datos, aes(x = Estado_civil, y = Carga_familiar, fill = prop_aprobacion)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Influencia del estado civil y carga familiar en la aprobación de préstamos hipotecarios",
x = "Estado civil", y = "Carga familiar", fill = "Proporción de aprobación") +
theme_minimal()
datos10 <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% dplyr::select(Grado_Académico,Monto_de_préstamo)
boxplot(Monto_de_préstamo ~ Grado_Académico, data = datos10,
xlab = "Grado académico", ylab = "Monto de préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según grado académico", col = c("#C8E6C9","#FA8072" ) )
# Crear el data frame
datos<- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% dplyr::select(Grado_Académico, Ingreso_del_solicitante,Ingresos_del_cosolicitante,Monto_de_préstamo)
datos <- datos %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
# Crear el gráfico de dispersión
ggplot(datos, aes(x =datos$Ingreso_Total , y = datos$Monto_de_préstamo, color = datos$Grado_Académico)) +
geom_point() +
xlab("Ingreso económico total ($)") +
ylab("Monto del préstamo hipotecario (miles de $)") +
ggtitle("Alcance del financiamiento hipotecario según grado educativo e ingreso económico") +
theme_minimal()
# Crear el dataframe
datos3 <- data.frame(DF2$Historial_crediticio, DF2$Estado_de_préstamo)
# Crear el gráfico de mosaico
mosaicplot(table(DF2$Historial_crediticio, DF2$Estado_de_préstamo), shade = FALSE, main = " Aprobación de crédito hipotecario según historial crediticio",
xlab = "Historial crediticio", ylab = "Aprobación de crédito", col = c("#B7E4C7","#FA8072" ))
table(DF2$Ubicaión_de_propiedad)
caso_rural <- DF2%>% filter (DF2$Ubicaión_de_propiedad == "Rural")
caso_rural = nrow(caso_rural)
prob_rural <- round(caso_rural/nrow(DF2),2)
prob_rural
caso_semiurbano <- DF2%>% filter (DF2$Ubicaión_de_propiedad == "Semiurbano")
caso_semiurbano = nrow(caso_semiurbano)
prob_semiurbano <- round(caso_semiurbano/nrow(DF2),2)
prob_semiurbano
caso_urbano <- DF2%>% filter (DF2$Ubicaión_de_propiedad == "Urbano")
caso_urbano = nrow(caso_urbano)
prob_urbano <- round(caso_urbano/nrow(DF2),2)
prob_urbano
table(DF2$Estado_de_préstamo)
caso_total = nrow(DF2)
aprobado <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado")
caso_aprobado = nrow(aprobado)
prob_aprobado  <- round(caso_aprobado/caso_total,2)
prob_aprobado
caso_total = nrow(DF2)
rechazado <- DF2%>% filter (DF2$Estado_de_préstamo == "Rechazado")
caso_rechazado = nrow(rechazado)
prob_rechazado  <- round(caso_rechazado/caso_total,2)
prob_rechazado
# Calcular la tabla de contingencia y las proporciones
tabla_contingencia_2 <- table(DF2$Ubicaión_de_propiedad,DF2$Estado_de_préstamo)
# tabla_contingencia : Representa una tabla del total de aprobados y desaprobados clasificado por ubicacion
proporciones_2 <- prop.table(tabla_contingencia_2, margin = 1)
# proporciones : Representa la probabilidad
# Crear el gráfico de barras apiladas
barplot(proporciones_2, col = c("lightblue", "lightgreen","pink"),
main = "Estado de Préstamo y Ubicación de Vivienda",
xlab = "Estado de prestamo",
legend = c("Rural", "Semiurbano","Urbano"),
args.legend = list(x = "topright", bty = "n"))
A <- DF2%>%filter (DF2$Ubicaión_de_propiedad == "Semiurbano") %>% dplyr::select("Ubicaión_de_propiedad","Estado_de_préstamo")
PA= nrow(A)/nrow(DF2)
r(PA)
B <- DF2%>%filter (DF2$Estado_de_préstamo == "Aprobado") %>% dplyr::select("Ubicaión_de_propiedad","Estado_de_préstamo")
PB= nrow(B)/nrow(DF2)
r(PB)
AinterseccionB <- DF2%>%filter ( Estado_de_préstamo == "Aprobado"& Ubicaión_de_propiedad == "Semiurbano") %>% dplyr::select("Ubicaión_de_propiedad","Estado_de_préstamo")
PAinterseccionB=nrow(AinterseccionB)/nrow(DF2)
r(PAinterseccionB)
Probabilidad=PA*PB
r(Probabilidad)
PAB= PAinterseccionB/PB
r(PAB)
PBA=(PAB*PB)/PA
r(PBA)
PB1= 0.40* 0.78 +0.60*0.63
r(PB1)
r(PB)
A <- DF2%>%filter (DF2$Ubicaión_de_propiedad == "Rural") %>% dplyr::select("Ubicaión_de_propiedad","Estado_de_préstamo")
PA= nrow(A)/nrow(DF2)
r(PA)
B <- DF2%>%filter (DF2$Estado_de_préstamo == "Rechazado") %>% dplyr::select("Ubicaión_de_propiedad","Estado_de_préstamo")
PB= nrow(B)/nrow(DF2)
r(PB)
AinterseccionB <- DF2%>%filter ( Estado_de_préstamo == "Rechazado" & Ubicaión_de_propiedad == "Rural") %>% dplyr::select("Ubicaión_de_propiedad","Estado_de_préstamo")
PAinterseccionB=nrow(AinterseccionB)/nrow(DF2)
r(PAinterseccionB)
Probabilidad=PA*PB
r(Probabilidad)
PAB= PAinterseccionB/PB
r(PAB)
PBA=(PAB*PB)/PA
r(PBA)
PB1= 0.29*0.39 +0.71*0.28
r(PB1)
r(PB)
table(DF2$Grado_Académico)
PA = 383/480
r(PA)
table(DF2$Estado_civil)
PB = 311/480
r(PB)
AinterseccionB <- DF2%>%filter (Grado_Académico == "Graduado"& Estado_civil == "Casado") %>% dplyr::select("Estado_civil","Grado_Académico")
PAinterseccionB=nrow(AinterseccionB)/nrow(DF2)
r(PAinterseccionB)
Probabilidad=PA*PB
r(Probabilidad)
total = nrow(DF2)
eaprob <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado")
aprobados = nrow(eaprob)
prob_aprob  <- round(aprobados/total,2)
prob_aprob
# Parámetros de la distribución binomial
n <- 480   # Número de ensayos
p <- 0.69  # Probabilidad de éxito
# Valores para los cuales se calcularán las probabilidades
x <- 0:n
# Calcular las probabilidades de cada valor
probabilidades <- dbinom(x, size = n, prob = p)
# Graficar la distribución binomial con barras
barplot(probabilidades, names.arg = x, xlab = "Cantidad de solicitantes", ylab = "Probabilidad", col = "honeydew",
main = "Distribución Binomial")
# Parámetros de la distribución binomial
n <- 20   # Número de ensayos
p <- 0.69  # Probabilidad de éxito
# Valores para los cuales se calcularán las probabilidades
x <- 0:n
# Calcular las probabilidades de cada valor
probabilidades <- dbinom(x, size = n, prob = p)
# Graficar la distribución binomial con barras
barplot(probabilidades, names.arg = x, xlab = "Cantidad de solicitantes", ylab = "Probabilidad",
main = "Distribución Binomial", col = "honeydew")
#cantidad de solicitantes
n <- 480
# Probabilidad de éxito
p <- 0.69
esperanza <- n * p
esperanza
# Cantidad de solicitantes
n <- 480
# Probabilidad de éxito
p <- 0.69
# Calcular la varianza
varianza <- n * p *(1-p)
varianza
des_est = varianza^(1/2)
des_est
des_est = sqrt(varianza)
des_est
cof_var = des_est/esperanza
cof_var
pbinom(335,480,0.69,lower.tail = F)
dbinom(60,88,0.69)
p = dhyper(8,20,7,10)
r(p)
round(p,2)
#muestra
N = nrow(DF2)
table(DF2$Historial_crediticio)
#Bueno=410 ; Malo=70
Prob_bueno=410/N
round(Prob_bueno,2)
#k
k <-410
n <- 27
esperanza <- n * (k/N)
esperanza
round(esperanza,2) #23.06
# probamos con otros valores de n
#si n_=50
n1=50
esperanza_2 <- n1 * (k/N)
esperanza_2
n2=250
esperanza_3<- n2* (k/N)
esperanza_3
n <- 27
# r
r <- 410/480
varianza <- (n*r)*(1-r)*((N-n)/(N-1))
(varianza)
desv_est = (varianza)**(0.5)
desv = round(desv_est,2)
desv
N <- 480   # Tamaño de la población
K <- 410   # Número de elementos de interés en la población
n <- 27   # Tamaño de la muestra
# Calcular las probabilidades de la distribución hipergeométrica
x <- 0:n   # Valores posibles de la variable aleatoria
prob <- dhyper(x, m = K, n = N - K, k = n)   # Cálculo de las probabilidades
# Graficar la distribución hipergeométrica
barplot(prob, names.arg = x, xlab = "X", ylab = "Probabilidad", main = "Distribución Hipergeométrica", col = "lavender")
n<-27
variable=DF2$Historial_crediticio
table(variable)
muestra<- sample(variable,size=n,replace=FALSE)
muestra
table(muestra)
p = dhyper(8,20,7,10)
round(p,2)
hist(DF2$Monto_de_préstamo,breaks=10, freq=FALSE, main="Histograma monto de préstamo", xlab="Monto de préstamo", col="lightblue")
lines(density(DF2$Monto_de_préstamo, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DF2$Monto_de_préstamo,na.rm=TRUE), sd(DF2$Monto_de_préstamo,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórica"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.5)
mediana <- median(DF2$Monto_de_préstamo)
mediana
mean(DF2$Monto_de_préstamo)
(varianza_grafico = 80.424258 ^2)
(varianza = (sd(DF2$Monto_de_préstamo))^2)
DF1<- DF2%>%filter (DF2$Grado_Académico == "Graduado") %>% dplyr::select("Monto_de_préstamo")
hist(DF1$Monto_de_préstamo,breaks=10, freq=FALSE, main="Histograma monto de préstamo", xlab="Monto de préstamo", col="linen")
lines(density(DF1$Monto_de_préstamo, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DF1$Monto_de_préstamo,na.rm=TRUE), sd(DF1$Monto_de_préstamo,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórica"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.8)
mediana <- median(DF1$Monto_de_préstamo)
mediana
mean(DF1$Monto_de_préstamo)
(varianza_grafico =  86.118107 ^2)
(varianza = (sd(DF1$Monto_de_préstamo))^2)
DF3<- DF2%>%filter (DF2$Grado_Académico == "No Graduado") %>% dplyr::select("Monto_de_préstamo")
hist(DF3$Monto_de_préstamo,breaks=10, freq=FALSE, main="Histograma monto de préstamo", xlab="Monto de préstamo", col="mediumaquamarine" )
lines(density(DF3$Monto_de_préstamo, na.rm=TRUE),col="red",lwd=3)
curve(dnorm(x, mean(DF3$Monto_de_préstamo,na.rm=TRUE), sd(DF3$Monto_de_préstamo,na.rm=TRUE)), lwd = 2, col = "blue", add = T)
legend("topleft", c("curva observada", "curva (normal) teórica"),
lty = 1, lwd = 2, col = c("red", "blue"), bty = "n",
cex = 0.8)
mediana <- median(DF3$Monto_de_préstamo)
mediana
mean(DF3$Monto_de_préstamo)
(varianza_grafico = 42.052068^2)
(varianza = (sd(DF3$Monto_de_préstamo))^2)
pnorm(150,117.12,42.05,F)
hist(DF2$Ingreso_del_solicitante, breaks = 10, freq = FALSE, main = "Histograma de ingreso del solicitante", xlab = "Ingreso del solicitante", col = "honeydew")
# Estimar la función de densidad de probabilidad (PDF) de los datos observados
lines(density(DF2$Ingreso_del_solicitante),col="red",lwd=3)
# Ajustar una distribución exponencial a los datos observados
fit_exp <- fitdistr(DF2$Ingreso_del_solicitante, "exponential")
lambda <- fit_exp$estimate
# Calcular la función de densidad de probabilidad (PDF) de la distribución exponencial
x <- seq(0, max(DF2$Ingreso_del_solicitante), length.out = 1000)
pdf_exp <- dexp(x, rate = lambda)
# Graficar la curva teórica de la distribución exponencial
lines(x, pdf_exp, col = "blue", lwd = 2)
# Mostrar leyenda
legend(x = "topright", y = max(densidad_obs$y), c("histograma", "curva observada", "curva (exponencial) teórica"),
lty = 1, lwd = c(0, 3, 2), col = c("honeydew", "red", "blue"), bty = "n",
cex = 0.6)
pexp(15000,0.00018642,F)
