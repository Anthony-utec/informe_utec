r(IQR(DF2$Periodo_crediticio,na.rm=T))
min(DF2$Monto_de_préstamo, na.rm=T)
max(DF2$Monto_de_préstamo, na.rm = T)
r(mean(DF2$Monto_de_préstamo, na.rm = T))
r(median(DF2$Monto_de_préstamo,na.rm = T))
r(cv(DF2$Monto_de_préstamo))
r(mode(DF2$Monto_de_préstamo))
r(sd(DF2$Monto_de_préstamo,na.rm = T ))
r(IQR(DF2$Monto_de_préstamo,na.rm=T))
#De manera general (Aprobados y no aprobados)
Descriptores <- read_delim("Descriptores numericos.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Descriptores,8),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "black", background = "lightblue") %>%
column_spec(1, bold = T, color = "blue")
monto_prestamo <- DF2_2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
min(monto_prestamo$Ingreso_del_solicitante)
max(monto_prestamo$Ingreso_del_solicitante)
r(mean(monto_prestamo$Ingreso_del_solicitante, na.rm = T))
r(median(monto_prestamo$Ingreso_del_solicitante,na.rm = T))
r(mode(monto_prestamo$Ingreso_del_solicitante))
r(cv(monto_prestamo$Ingreso_del_solicitante))
r(sd(monto_prestamo$Ingreso_del_solicitante,na.rm = T ))
r(IQR(monto_prestamo$Ingreso_del_solicitante,na.rm=T))
min(monto_prestamo$Ingresos_del_cosolicitante)
max(monto_prestamo$Ingresos_del_cosolicitante)
r(mean(monto_prestamo$Ingresos_del_cosolicitante, na.rm = T))
r(median(monto_prestamo$Ingresos_del_cosolicitante,na.rm = T))
r(mode(monto_prestamo$Ingresos_del_cosolicitante))
r(cv(monto_prestamo$Ingresos_del_cosolicitante))
r(sd(monto_prestamo$Ingresos_del_cosolicitante,na.rm = T ))
r(IQR(monto_prestamo$Ingresos_del_cosolicitante,na.rm=T))
min(monto_prestamo$Ingreso_Total)
max(monto_prestamo$Ingreso_Total)
r(mean(monto_prestamo$Ingreso_Total, na.rm = T))
r(median(monto_prestamo$Ingreso_Total,na.rm = T))
r(mode(monto_prestamo$Ingreso_Total))
r(cv(monto_prestamo$Ingreso_Total))
r(sd(monto_prestamo$Ingreso_Total,na.rm = T ))
r(IQR(monto_prestamo$Ingreso_Total,na.rm=T))
min(monto_prestamo$Periodo_crediticio)
max(monto_prestamo$Periodo_crediticio)
r(mean(monto_prestamo$Periodo_crediticio, na.rm = T))
r(median(monto_prestamo$Periodo_crediticio,na.rm = T))
r(mode(monto_prestamo$Periodo_crediticio))
r(cv(monto_prestamo$Periodo_crediticio))
r(sd(monto_prestamo$Periodo_crediticio,na.rm = T ))
r(IQR(monto_prestamo$Periodo_crediticio,na.rm=T))
min(monto_prestamo$Monto_de_préstamo)
max(monto_prestamo$Monto_de_préstamo)
r(mean(monto_prestamo$Monto_de_préstamo, na.rm = T))
r(median(monto_prestamo$Monto_de_préstamo,na.rm = T))
r(mode(monto_prestamo$Monto_de_préstamo))
r(cv(monto_prestamo$Monto_de_préstamo))
r(sd(monto_prestamo$Monto_de_préstamo,na.rm = T ))
r(IQR(monto_prestamo$Monto_de_préstamo,na.rm=T))
#Sólo aprobados
Descriptores1 <- read_delim("Descriptores numericos1.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Descriptores1,8),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "black", background = "lightgreen") %>%
column_spec(1, bold = T, color = "blue")
monto_prestamo <- DF2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
datos2 <- monto_prestamo %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
hist(datos2$Ingreso_Total,breaks=30,col=  "#DCD0FF" ,main="Ingreso Total",ylab="densidad",xlab="Monto de ingreso ($)",prob=TRUE)
abline(v=median(datos2$Ingreso_Total),col="red",lwd=2)
abline(v=mean(datos2$Ingreso_Total),col="blue",lwd=2)
legend(30000,0.00020,legend=c("Mediana","Media"),lwd=2,col=c("red","blue"))
#Rangos de prestamos hipotecarios
monto_prestamo <- DF2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
hist(monto_prestamo$Monto_de_préstamo,breaks=30,col=amarillo_suave <- "#DCD0FF"
,main="Monto de préstamo hipotecario",ylab="densidad",xlab="Monto de préstamo (miles de  $)",prob=TRUE)
abline(v=median(monto_prestamo$Monto_de_préstamo),col="red",lwd=2)
abline(v=mean(monto_prestamo$Monto_de_préstamo),col="blue",lwd=2)
legend(400,0.009,legend=c("Mediana","Media"),lwd=2,col=c("red","blue"))
datos1 <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% select("Ubicaión_de_propiedad","Monto_de_préstamo")
boxplot(Monto_de_préstamo ~ Ubicaión_de_propiedad, data = datos1,
xlab = "Ubicación de la vivienda", ylab = "Monto del préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según su ubicación", col = c("#B2D8E5","#FFFACD"))
#Se borró algunos datos atípicos para realizar un mejor análisis
datos1$Monto_de_préstamo[datos1$Monto_de_préstamo>300] <- NA
boxplot(Monto_de_préstamo ~ Ubicaión_de_propiedad, data = datos1,
xlab = "Ubicación de la vivienda", ylab = "Monto del préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según su ubicación", col = c("#B2D8E5","#FFFACD"))
mosaicplot(table(DF2$Ubicaión_de_propiedad, DF2$Estado_de_préstamo), shade = FALSE, main = " Aprobación de crédito hipotecario según la ubicación de la propiedad",
xlab = "Ubicación de propiedad", ylab = "Aprobación de crédito", col = c("#C8E6C9","#FA8072"))
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "0") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "1") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "2") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "3+") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
# Crear los datos
Estado_civil <- c("Soltero", "Casado")
Carga_familiar <- c("0", "1", "2","3+")
# Proporciones de aprobación de préstamos hipotecarios
prop_aprobacion <- matrix(c(0.6363636, 0.5714286,0.7328244,0.7820513,
0.4666667,0.7500000,0.6923077,0.6756757), nrow = 2, ncol = 4, byrow = T)
# Crear un dataframe con los datos
datos <- data.frame(Estado_civil = rep(Estado_civil, each = 4),
Carga_familiar = rep(Carga_familiar, times = 2),
prop_aprobacion = c(prop_aprobacion))
# Crear el gráfico de heatmap
ggplot(datos, aes(x = Estado_civil, y = Carga_familiar, fill = prop_aprobacion)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Influencia del estado civil y carga familiar en la aprobación de préstamos hipotecarios",
x = "Estado civil", y = "Carga familiar", fill = "Proporción de aprobación") +
theme_minimal()
datos10 <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% select("Grado_Académico","Monto_de_préstamo")
boxplot(Monto_de_préstamo ~ Grado_Académico, data = datos10,
xlab = "Grado académico", ylab = "Monto de préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según grado académico", col = c("#C8E6C9","#FA8072" ) )
# Crear el data frame
datos<- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% select("Grado_Académico", "Ingreso_del_solicitante","Ingresos_del_cosolicitante","Monto_de_préstamo")
datos <- datos %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
# Crear el gráfico de dispersión
ggplot(datos, aes(x =datos$Ingreso_Total , y = datos$Monto_de_préstamo, color = datos$Grado_Académico)) +
geom_point() +
xlab("Ingreso económico total ($)") +
ylab("Monto del préstamo hipotecario (miles de $)") +
ggtitle("Alcance del financiamiento hipotecario según grado educativo e ingreso económico") +
theme_minimal()
# Crear el dataframe
datos3 <- data.frame(DF2$Historial_crediticio, DF2$Estado_de_préstamo)
# Crear el gráfico de mosaico
mosaicplot(table(DF2$Historial_crediticio, DF2$Estado_de_préstamo), shade = FALSE, main = " Aprobación de crédito hipotecario según historial crediticio",
xlab = "Historial crediticio", ylab = "Aprobación de crédito", col = c("#B7E4C7","#FA8072" ))
library(ganttrify)
install.packages("remotes")
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
#install.packages("Rtools")
#install.packages("kableExtra")
#install.packages("car")
#install.packages("remotes")
#install.packages("DescTools")
#install.packages("rriskDistributions")
#install.packages("knitr")
#install.packages("xfun")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
library(DescTools)
library(car)
library(remotes)
library(kableExtra)
library(tidyverse)
library(boot)
library(rriskDistributions)
library(knitr)
integrantes <- read_delim("INTEGRANTES.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(integrantes,5),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "white", background = "black") %>%
column_spec(1, bold = T, color = "blue")
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
#install.packages("Rtools")
#install.packages("kableExtra")
#install.packages("car")
#install.packages("remotes")
#remotes::install_github("giocomai/ganttrify")
#install.packages("DescTools")
#install.packages("rriskDistributions")
#install.packages("knitr")
#install.packages("xfun")
#library(readr)
#library(dplyr)
#library(ggplot2)
#library(knitr)
#library(DescTools)
#library(car)
#library(remotes)
#library(ganttrify)
#library(kableExtra)
#library(tidyverse)
#library(boot)
#library(rriskDistributions)
#library(knitr)
DF <- read_csv("DATA.csv")
DF2 <- DF
#Instalamos el paquete y cargamos la libreria (tidyverse)
colnames(DF2) <- c("ID", "Género", "Estado_civil","Carga_familiar", "Grado_Académico","Trabajador_independiente", "Ingreso_del_solicitante", "Ingresos_del_cosolicitante","Monto_de_préstamo", "Periodo_crediticio", "Historial_crediticio", "Ubicaión_de_propiedad", "Estado_de_préstamo")
# Muestra las diferentes datos de las variables
unique(DF2$Género)
unique(DF2$Estado_civil)
unique(DF2$Carga_familiar)
unique(DF2$Grado_Académico)
unique(DF2$Trabajador_independiente)
unique(DF2$Historial_crediticio)
unique(DF2$Ubicaión_de_propiedad)
unique(DF2$Estado_de_préstamo)
class(DF2$ID)
class(DF2$Género)
class(DF2$Estado_civil)
class(DF2$Carga_familiar)
class(DF2$Grado_Académico)
class(DF2$Trabajador_independiente)
class(DF2$Ingreso_del_solicitante)
class(DF2$Ingresos_del_cosolicitante)
class(DF2$Monto_de_préstamo)
class(DF2$Periodo_crediticio)
class(DF2$Historial_crediticio)
class(DF2$Ubicaión_de_propiedad)
class(DF2$Estado_de_préstamo)
DF2 %>% mutate(Género =
ifelse( Género == "Male", "Masculino",
ifelse( Género == "Female", "Femenino", Género
))) -> DF2
DF2 %>% mutate(Estado_civil =
ifelse( Estado_civil == "Yes", "Casado",
ifelse( Estado_civil == "No", "Soltero", Estado_civil
))) -> DF2
DF2 %>% mutate(Grado_Académico =
ifelse(Grado_Académico == "Graduate", "Graduado",
ifelse(Grado_Académico == "Not Graduate", "No Graduado",Grado_Académico
))) -> DF2
DF2 %>% mutate(Trabajador_independiente =
ifelse(Trabajador_independiente == "Yes", "Si",
ifelse(Trabajador_independiente== "No", "No", Trabajador_independiente
))) -> DF2
# Convirtiendo de una variable cuantitativa a una variable cualitativa
DF2 %>% mutate(Historial_crediticio =
ifelse(Historial_crediticio == "0", "Malo",
ifelse(Historial_crediticio == "1", "Bueno",Historial_crediticio
))) -> DF2
#Mostrando la variable cambiada
class(DF2$Historial_crediticio)
DF2 %>% mutate(Ubicaión_de_propiedad =
ifelse(Ubicaión_de_propiedad == "Rural", "Rural",
ifelse(Ubicaión_de_propiedad == "Semiurban", "Semiurbano",
ifelse(Ubicaión_de_propiedad == "Urban", "Urbano", Ubicaión_de_propiedad
)))) -> DF2
DF2 %>% mutate(Estado_de_préstamo =
ifelse(Estado_de_préstamo == "Y", "Aprobado",
ifelse(Estado_de_préstamo == "N", "Rechazado", Estado_de_préstamo
))) -> DF2
r <- function(x,na.rm=T){
return(round(x,digits =2))
}
cv = function(data) {
sd(data)/mean(data)
}
mode <- function(x) {
freq_table <- table(x)
mode <- as.numeric(names(freq_table)[freq_table == max(freq_table)])
return(mode)
}
Variables <- read_delim("Variables.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Variables,13),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "white", background = "red") %>%
column_spec(1, bold = T, color = "blue")
dim(DF2)
#Sumar la cantidad de datos incompletos.
sum(is.na(DF2)) # is.na() -> este comando detecta los datos incompletos
#Sumar la cantidad de datos completos.
sum(!is.na(DF2)) # !is.na() -> es la negación de is.na, es decir, indica los datos completos.
#Conocer la cantidad de NA que encontramos en cada variable
colSums(is.na(DF2))
nrow(DF2)-sum(is.na(DF2$ID)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$ID)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Género)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Género)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Estado_civil)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Estado_civil)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Carga_familiar)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Carga_familiar)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Grado_Académico)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Grado_Académico)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Trabajador_independiente)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Trabajador_independiente)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Ingreso_del_solicitante)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Ingreso_del_solicitante)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Ingresos_del_cosolicitante)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Ingresos_del_cosolicitante)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Monto_de_préstamo)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Monto_de_préstamo)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Periodo_crediticio)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Periodo_crediticio)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Historial_crediticio)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Historial_crediticio)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Ubicaión_de_propiedad)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Ubicaión_de_propiedad)))/(nrow(DF2)) *100)
nrow(DF2)-sum(is.na(DF2$Estado_de_préstamo)) #la cantidad total- la cantidad efectiva
#Porcentaje de la cantidad de datos válidos
r((nrow(DF2)-sum(is.na(DF2$Estado_de_préstamo)))/(nrow(DF2)) *100)
DF2 <- na.omit(DF2)
# Dimensiones
dim(DF2)
# Datos incompletos
sum(is.na(DF2))
min(DF2$Ingreso_del_solicitante, na.rm=T)
max(DF2$Ingreso_del_solicitante, na.rm = T)
r(mean(DF2$Ingreso_del_solicitante, na.rm = T))
r(median(DF2$Ingreso_del_solicitante,na.rm = T))
r(mode(DF2$Ingreso_del_solicitante))
r(cv(DF2$Ingreso_del_solicitante))
r(sd(DF2$Ingreso_del_solicitante))
r(IQR(DF2$Ingreso_del_solicitante,na.rm=T))
min(DF2$Ingresos_del_cosolicitante, na.rm=T)
max(DF2$Ingresos_del_cosolicitante, na.rm = T)
r(mean(DF2$Ingresos_del_cosolicitante, na.rm = T))
r(median(DF2$Ingresos_del_cosolicitante,na.rm = T))
r(mode(DF2$Ingresos_del_cosolicitante))
r(cv(DF2$Ingresos_del_cosolicitante))
r(sd(DF2$Ingresos_del_cosolicitante,na.rm = T ))
r(IQR(DF2$Ingresos_del_cosolicitante,na.rm=T))
DF2_2 <- DF2 %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
min(DF2_2$Ingreso_Total, na.rm=T)
max(DF2_2$Ingreso_Total, na.rm = T)
r(mean(DF2_2$Ingreso_Total, na.rm = T))
r(median(DF2_2$Ingreso_Total,na.rm = T))
r(mode(DF2_2$Ingreso_Total))
r(cv(DF2_2$Ingreso_Total))
r(sd(DF2_2$Ingreso_Total,na.rm = T ))
r(IQR(DF2_2$Ingreso_Total,na.rm=T))
min(DF2$Periodo_crediticio, na.rm=T)
max(DF2$Periodo_crediticio, na.rm = T)
r(mean(DF2$Periodo_crediticio, na.rm = T))
r(median(DF2$Periodo_crediticio,na.rm = T))
r(mode(DF2$Periodo_crediticio))
r(cv(DF2$Periodo_crediticio))
r(sd(DF2$Periodo_crediticio,na.rm = T ))
r(IQR(DF2$Periodo_crediticio,na.rm=T))
min(DF2$Monto_de_préstamo, na.rm=T)
max(DF2$Monto_de_préstamo, na.rm = T)
r(mean(DF2$Monto_de_préstamo, na.rm = T))
r(median(DF2$Monto_de_préstamo,na.rm = T))
r(cv(DF2$Monto_de_préstamo))
r(mode(DF2$Monto_de_préstamo))
r(sd(DF2$Monto_de_préstamo,na.rm = T ))
r(IQR(DF2$Monto_de_préstamo,na.rm=T))
#De manera general (Aprobados y no aprobados)
Descriptores <- read_delim("Descriptores numericos.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Descriptores,8),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "black", background = "lightblue") %>%
column_spec(1, bold = T, color = "blue")
monto_prestamo <- DF2_2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
min(monto_prestamo$Ingreso_del_solicitante)
max(monto_prestamo$Ingreso_del_solicitante)
r(mean(monto_prestamo$Ingreso_del_solicitante, na.rm = T))
r(median(monto_prestamo$Ingreso_del_solicitante,na.rm = T))
r(mode(monto_prestamo$Ingreso_del_solicitante))
r(cv(monto_prestamo$Ingreso_del_solicitante))
r(sd(monto_prestamo$Ingreso_del_solicitante,na.rm = T ))
r(IQR(monto_prestamo$Ingreso_del_solicitante,na.rm=T))
min(monto_prestamo$Ingresos_del_cosolicitante)
max(monto_prestamo$Ingresos_del_cosolicitante)
r(mean(monto_prestamo$Ingresos_del_cosolicitante, na.rm = T))
r(median(monto_prestamo$Ingresos_del_cosolicitante,na.rm = T))
r(mode(monto_prestamo$Ingresos_del_cosolicitante))
r(cv(monto_prestamo$Ingresos_del_cosolicitante))
r(sd(monto_prestamo$Ingresos_del_cosolicitante,na.rm = T ))
r(IQR(monto_prestamo$Ingresos_del_cosolicitante,na.rm=T))
min(monto_prestamo$Ingreso_Total)
max(monto_prestamo$Ingreso_Total)
r(mean(monto_prestamo$Ingreso_Total, na.rm = T))
r(median(monto_prestamo$Ingreso_Total,na.rm = T))
r(mode(monto_prestamo$Ingreso_Total))
r(cv(monto_prestamo$Ingreso_Total))
r(sd(monto_prestamo$Ingreso_Total,na.rm = T ))
r(IQR(monto_prestamo$Ingreso_Total,na.rm=T))
min(monto_prestamo$Periodo_crediticio)
max(monto_prestamo$Periodo_crediticio)
r(mean(monto_prestamo$Periodo_crediticio, na.rm = T))
r(median(monto_prestamo$Periodo_crediticio,na.rm = T))
r(mode(monto_prestamo$Periodo_crediticio))
r(cv(monto_prestamo$Periodo_crediticio))
r(sd(monto_prestamo$Periodo_crediticio,na.rm = T ))
r(IQR(monto_prestamo$Periodo_crediticio,na.rm=T))
min(monto_prestamo$Monto_de_préstamo)
max(monto_prestamo$Monto_de_préstamo)
r(mean(monto_prestamo$Monto_de_préstamo, na.rm = T))
r(median(monto_prestamo$Monto_de_préstamo,na.rm = T))
r(mode(monto_prestamo$Monto_de_préstamo))
r(cv(monto_prestamo$Monto_de_préstamo))
r(sd(monto_prestamo$Monto_de_préstamo,na.rm = T ))
r(IQR(monto_prestamo$Monto_de_préstamo,na.rm=T))
#Sólo aprobados
Descriptores1 <- read_delim("Descriptores numericos1.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
require(knitr)
kable_styling(kable(head(Descriptores1,8),
booktabs = TRUE,
digits = 3,
label = TRUE,
row.names = FALSE, align = "l"),
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>%
row_spec(0, bold = T, color = "black", background = "lightgreen") %>%
column_spec(1, bold = T, color = "blue")
monto_prestamo <- DF2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
datos2 <- monto_prestamo %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
hist(datos2$Ingreso_Total,breaks=30,col=  "#DCD0FF" ,main="Ingreso Total",ylab="densidad",xlab="Monto de ingreso ($)",prob=TRUE)
abline(v=median(datos2$Ingreso_Total),col="red",lwd=2)
abline(v=mean(datos2$Ingreso_Total),col="blue",lwd=2)
legend(30000,0.00020,legend=c("Mediana","Media"),lwd=2,col=c("red","blue"))
#Rangos de prestamos hipotecarios
monto_prestamo <- DF2%>% filter(DF2$Estado_de_préstamo== "Aprobado")
hist(monto_prestamo$Monto_de_préstamo,breaks=30,col=amarillo_suave <- "#DCD0FF"
,main="Monto de préstamo hipotecario",ylab="densidad",xlab="Monto de préstamo (miles de  $)",prob=TRUE)
abline(v=median(monto_prestamo$Monto_de_préstamo),col="red",lwd=2)
abline(v=mean(monto_prestamo$Monto_de_préstamo),col="blue",lwd=2)
legend(400,0.009,legend=c("Mediana","Media"),lwd=2,col=c("red","blue"))
datos1 <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% select("Ubicaión_de_propiedad","Monto_de_préstamo")
boxplot(Monto_de_préstamo ~ Ubicaión_de_propiedad, data = datos1,
xlab = "Ubicación de la vivienda", ylab = "Monto del préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según su ubicación", col = c("#B2D8E5","#FFFACD", "#FA8072"))
#Se borró algunos datos atípicos para realizar un mejor análisis
datos1$Monto_de_préstamo[datos1$Monto_de_préstamo>300] <- NA
boxplot(Monto_de_préstamo ~ Ubicaión_de_propiedad, data = datos1,
xlab = "Ubicación de la vivienda", ylab = "Monto del préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según su ubicación", col = c("#B2D8E5","#FFFACD", "#FA8072"))
mosaicplot(table(DF2$Ubicaión_de_propiedad, DF2$Estado_de_préstamo), shade = FALSE, main = " Aprobación de crédito hipotecario según la ubicación de la propiedad",
xlab = "Ubicación de propiedad", ylab = "Aprobación de crédito", col = c("#C8E6C9","#FA8072"))
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "0") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "1") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "2") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
prop.table(table(DF2%>%filter (DF2$Carga_familiar == "3+") %>% select("Estado_civil","Estado_de_préstamo")), margin=1)
# Crear los datos
Estado_civil <- c("Soltero", "Casado")
Carga_familiar <- c("0", "1", "2","3+")
# Proporciones de aprobación de préstamos hipotecarios
prop_aprobacion <- matrix(c(0.6363636, 0.5714286,0.7328244,0.7820513,
0.4666667,0.7500000,0.6923077,0.6756757), nrow = 2, ncol = 4, byrow = T)
# Crear un dataframe con los datos
datos <- data.frame(Estado_civil = rep(Estado_civil, each = 4),
Carga_familiar = rep(Carga_familiar, times = 2),
prop_aprobacion = c(prop_aprobacion))
# Crear el gráfico de heatmap
ggplot(datos, aes(x = Estado_civil, y = Carga_familiar, fill = prop_aprobacion)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Influencia del estado civil y carga familiar en la aprobación de préstamos hipotecarios",
x = "Estado civil", y = "Carga familiar", fill = "Proporción de aprobación") +
theme_minimal()
datos10 <- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% select("Grado_Académico","Monto_de_préstamo")
boxplot(Monto_de_préstamo ~ Grado_Académico, data = datos10,
xlab = "Grado académico", ylab = "Monto de préstamo (miles de $)",
main = "Rangos de préstamos hipotecarios según grado académico", col = c("#C8E6C9","#FA8072" ) )
# Crear el data frame
datos<- DF2%>% filter (DF2$Estado_de_préstamo == "Aprobado") %>% select("Grado_Académico", "Ingreso_del_solicitante","Ingresos_del_cosolicitante","Monto_de_préstamo")
datos <- datos %>% mutate(Ingreso_Total = Ingreso_del_solicitante + Ingresos_del_cosolicitante)
# Crear el gráfico de dispersión
ggplot(datos, aes(x =datos$Ingreso_Total , y = datos$Monto_de_préstamo, color = datos$Grado_Académico)) +
geom_point() +
xlab("Ingreso económico total ($)") +
ylab("Monto del préstamo hipotecario (miles de $)") +
ggtitle("Alcance del financiamiento hipotecario según grado educativo e ingreso económico") +
theme_minimal()
# Crear el dataframe
datos3 <- data.frame(DF2$Historial_crediticio, DF2$Estado_de_préstamo)
# Crear el gráfico de mosaico
mosaicplot(table(DF2$Historial_crediticio, DF2$Estado_de_préstamo), shade = FALSE, main = " Aprobación de crédito hipotecario según historial crediticio",
xlab = "Historial crediticio", ylab = "Aprobación de crédito", col = c("#B7E4C7","#FA8072" ))
