na_count <- colSums(is.na(base2018)) %>% as.data.frame()
na_count$name <- rownames(na_count)
View(na_count)
#Datatype of each columna
sapply(base2018, class)
# Mostrar las opciones de las columnas tipo "Factor"
sapply(base2018, levels)
df_status(base2018)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, error = FALSE)
library(haven)
library(dplyr)
library(tidyr)
library(datasets)
library(readxl)
library(funModeling)
nombresVariables <- c('Edad', 'Género', 'NivelEstudio', 'EstadoEconómico', 'Empleo', 'Discriminacion', 'Lugar', 'Motivo', 'Agresor', 'HorasTrabajo', 'IngresoHoraIndependiente', 'IngresoHoraDependiente')
tiposVariables <- c('Numérica discreta', 'Categórica nominal', 'Categórica ordinal', 'Categórica ordinal', 'Categórica nominal', 'Categórica nominal', 'Categórica nominal', 'Categórica nominal', 'Categórica nominal', 'Numérica discreta', 'Numérica continua', 'Numérica continua')
valoresVariables <- c('Numero entero', 'Hombre o Mujer', 'Numero entero 1-10 con un nombre asociado', 'Número entero 1-5 representando un intervalo de ingresos', 'Sí o No', 'Sí o No', 'Sí o No para cada columna que representa un lugar distinto', 'Sí o No para cada columna que representa un motivo distinto', 'Sí o No para cada columna que representa un tipo de persona distinta', 'Número entero', 'Decimal', 'Decimal')
tablaVariables <- data.frame(Nombre = nombresVariables, Tipo = tiposVariables, Valores = valoresVariables)
knitr::kable(tablaVariables)
#EDAD <- read_sav("EDAD_CARACTERISTICAS_2022.SAV", col_select = c("bike", "age"))
C_EDAD <- read_sav("EDAD_CARACTERISTICAS_2022.SAV", col_select = c("P204", "P205_A", "P208", "NSELV", "P200_N") )
C_EDAD <- as_factor(C_EDAD)
C_DISCR <- read_sav("DISCRIMINACION_2022.SAV", col_select = c("P701", "P702_1", "P702_2","P702_3","P702_4","P702_5","P702_6","P702_7","P703_1", "P703_2","P703_3", "P703_4","P703_5","P703_6","P703_7","P703_8","P703_9","P703_10","P704_1","P704_2", "P704_3","P704_4","P704_5","P704_6","P704_7", "P704_8", "P704_9", "NSELV", "P200_N") )
C_DISCR <- as_factor(C_DISCR)
C_EMPL <- read_sav("EMPLEO_2022.SAV", col_select = c("P621","P622_1","P622_2", "P623_1","P623_2", "P615_T", "P601", "NSELV", "P200_N") )
C_EMPL <- as_factor(C_EMPL)
C_EDU <- read_sav("EDUCACION_2022.SAV", col_select = c("P501", "P501A", "P501B", "NSELV", "P200_N") )
C_EDU <- as_factor(C_EDU)
C_EMPL$P615_T <- C_EMPL$P615_T*4
C_EMPL <- C_EMPL %>% mutate(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE = round((P623_1+P623_2)/(P615_T),3))
C_EMPL$P621 <- case_when(
C_EMPL$P621 == "1.Diario?" ~ 30,
C_EMPL$P621 == "2.Semanal?" ~ 4,
C_EMPL$P621 == "3.Quincenal?" ~ 2,
C_EMPL$P621 == "4.Mensual?" ~ 1,
C_EMPL$P621 == "5.No recibió pago alguno" ~ 0,
TRUE ~ NA
)
C_EMPL <- C_EMPL %>% mutate(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE = round(((P622_1+P622_2)*P621)/(P615_T),3))
C_EMPL <- C_EMPL %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDAD <- C_EDAD %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDU <- C_EDU %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
C_DISCR <- C_DISCR %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
# Eliminando repetidos NSELV y P200
C_EMPL <- select(C_EMPL, -NSELV, -P200_N)
C_EDAD <- select(C_EDAD, -NSELV, -P200_N)
C_EDU <- select(C_EDU, -NSELV, -P200_N)
C_DISCR <- select(C_DISCR, -NSELV, -P200_N)
# Merge
base2022 <- Reduce(function(...) merge(..., by.x = "CODIGO", by.y = "CODIGO", all = TRUE), list(C_EDU, C_EMPL, C_DISCR, C_EDAD))
base2022$P501 <- as.numeric(base2022$P501)
base2022$P501B <- as.numeric(base2022$P501B)
for (i in 1:nrow(base2022)) {
base2022$P501[i] <- sum(base2022$P501[i], base2022$P501B[i], na.rm = T)
}
str(base2022)
#creamos la suma de las columnas de ingresos para crear el nivel economico
for (i in 1:nrow(base2022)) {
base2022$NIVEL_ECONO[i] <- sum(((base2022$P622_1[i]+base2022$P622_2[i])*base2022$P621[i]), (base2022$P623_1[i]+base2022$P623_2[i]), na.rm = T)
}
base2022 <- base2022 %>% filter(P205_A >= 18)
#base2022 <- base2022[!is.na(base2022$P501A),]
base2022 <- base2022[!is.na(base2022$P701),]
#base2022 <- base2022[!is.na(base2022$P619),]
base2022 <- base2022 %>% filter_at(.vars = vars(P622_1,P623_1), .vars_predicate = any_vars(!is.na(.)))
# Borra si es que ambas variables son NA
base2022 <- base2022 %>% filter(P615_T > 0)
ceros_ingres <- base2022 %>% filter(NIVEL_ECONO == 0)
#Creamos la escala economia
base2022$NIVEL_ECONO[1]
for (i in 1:nrow(base2022)){
if (base2022$NIVEL_ECONO[i] <= 3000 ){
if(base2022$NIVEL_ECONO[i] <= 1400){
if(base2022$NIVEL_ECONO[i] <= 1000){
if(base2022$NIVEL_ECONO[i] <= 700){
base2022$NIVEL_ECONO[i] = 5
}
else{
base2022$NIVEL_ECONO[i] = 4
}
}
else{
base2022$NIVEL_ECONO[i] = 3
}
}
else{
base2022$NIVEL_ECONO[i] = 2
}
}
else {
base2022$NIVEL_ECONO[i] = 1
}
}
table(base2022$NIVEL_ECONO)
#RENOMBRANDO
base2022 <- base2022 %>% rename(NIVEL_EDU = P501)
base2022 <- base2022 %>% rename(ESTADO_TRABAJO = P601)
base2022 <- base2022 %>% rename(HORAS_TOTALES_TRABAJ = P615_T)
#base2022 <- base2022 %>% rename(BUSCAS_TRABAJO = P619)
base2022 <- base2022 %>% rename(INGRESO_T_DEP = P622_1)
base2022 <- base2022 %>% rename(INGRESO_T_IND = P623_1)
base2022 <- base2022 %>% rename(SENTIRSE_DISC = P701)
base2022 <- base2022 %>% rename(SEXO = P204)
base2022 <- base2022 %>% rename(EDAD = P205_A)
base2022 <- base2022 %>% rename(MIGRÓ_DE_V = P208)
base2022 <- base2022 %>% rename(MOT_DISC_1 = P702_1)
base2022 <- base2022 %>% rename(MOT_DISC_2 = P702_2)
base2022 <- base2022 %>% rename(MOT_DISC_3 = P702_3)
base2022 <- base2022 %>% rename(MOT_DISC_4 = P702_4)
base2022 <- base2022 %>% rename(MOT_DISC_5 = P702_5)
base2022 <- base2022 %>% rename(MOT_DISC_6 = P702_6)
base2022 <- base2022 %>% rename(MOT_DISC_7 = P702_7)
base2022 <- base2022 %>% rename(LUG_DIS_1 = P703_1)
base2022 <- base2022 %>% rename(LUG_DIS_2 = P703_2)
base2022 <- base2022 %>% rename(LUG_DIS_3 = P703_3)
base2022 <- base2022 %>% rename(LUG_DIS_4 = P703_4)
base2022 <- base2022 %>% rename(LUG_DIS_5 = P703_5)
base2022 <- base2022 %>% rename(LUG_DIS_6 = P703_6)
base2022 <- base2022 %>% rename(LUG_DIS_7 = P703_7)
base2022 <- base2022 %>% rename(LUG_DIS_8 = P703_8)
base2022 <- base2022 %>% rename(LUG_DIS_9 = P703_9)
base2022 <- base2022 %>% rename(LUG_DIS_10 = P703_10)
base2022 <- base2022 %>% rename(QUIEN_DIS_1 = P704_1)
base2022 <- base2022 %>% rename(QUIEN_DIS_2 = P704_2)
base2022 <- base2022 %>% rename(QUIEN_DIS_3 = P704_3)
base2022 <- base2022 %>% rename(QUIEN_DIS_4 = P704_4)
base2022 <- base2022 %>% rename(QUIEN_DIS_5 = P704_5)
base2022 <- base2022 %>% rename(QUIEN_DIS_6 = P704_6)
base2022 <- base2022 %>% rename(QUIEN_DIS_7 = P704_7)
base2022 <- base2022 %>% rename(QUIEN_DIS_8 = P704_8)
base2022 <- base2022 %>% rename(QUIEN_DIS_9 = P704_9)
base2022 <- base2022 %>% rename(ULT_NIVEL_ESTU = P501A)
summary(base2022$MIGRÓ_DE_V)
df_status(base2022)
base2022 <- select(base2022, -P501B,)
base2022 <- select(base2022, -P621,)
base2022 <- select(base2022, -P622_2,)
base2022 <- select(base2022, -P623_2,)
base2022 <- select(base2022, -INGRESO_T_DEP,)
base2022 <- select(base2022, -INGRESO_T_IND,)
base2022 <- select(base2022, -MIGRÓ_DE_V,)
base2022 <- select(base2022, -CODIGO,)
#Counting NaN for each column lol
na_count <- colSums(is.na(base2022)) %>% as.data.frame()
na_count$name <- rownames(na_count)
View(na_count)
#Datatype of each columna
sapply(base2022, class)
# Mostrar las opciones de las columnas tipo "Factor"
sapply(base2022, levels)
summary(base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE)
summary(base2022$INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE)
#menor_10 <- base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE%>%filter(base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE<=10)
merged_table2<- base2022 %>% filter(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE <= 10)
base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE
hist(merged_table2$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE, na.rm = TRUE)
boxplot(merged_table2$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE, na.rm = TRUE)
#base2022 <- base2022 %>% filter(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE <= 100)
#boxplot(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE, data=base2022)
#boxplot(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE, data=base2022)
#base2022 <- base2022 %>% filter(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE <= 250)
#boxplot(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE, data=base2022)
C_EDAD <- read_sav("BASE DE DATOS 2018/CARACTERISTICAS_2018.sav", col_select = c("P204", "P205_A", "VIVIENDA", "CODPERSO") )
C_EDAD <- as_factor(C_EDAD)
#"ESTRATO_SOCIOECONOMICO"
C_DISCR <- read_sav("BASE DE DATOS 2018/DISCRIMINACION_2018.sav", col_select = c("P701", "P702_1", "P702_2","P702_3","P702_4","P702_5","P702_6","P702_7","P702_8","P702_9","P702_10","VIVIENDA", "CODPERSO") )
C_DISCR <- as_factor(C_DISCR)
C_EMPL <- read_sav("BASE DE DATOS 2018/EMPLEO_2018.sav", col_select = c("P601","P610_T","P613","P614_MON","P614_ESP","P615_MON","P615_ESP","VIVIENDA", "CODPERSO") )
C_EMPL <- as_factor(C_EMPL)
C_EDU <- read_sav("BASE DE DATOS 2018/EDUCACION_2018.sav", col_select = c("P501","VIVIENDA", "CODPERSO") )
C_EDU <- as_factor(C_EDU)
C_EMPL$P610_T <- C_EMPL$P610_T*4
C_EMPL <- C_EMPL %>% mutate(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE = round((P615_MON+P615_ESP)/(P610_T),3))
C_EMPL$P613 <- case_when(
C_EMPL$P613 == "Diario?" ~ 30,
C_EMPL$P613 == "Semanal?" ~ 4,
C_EMPL$P613 == "Quincenal?" ~ 2,
C_EMPL$P613 == "Mensual?" ~ 1,
TRUE ~ NA
)
C_EMPL <- C_EMPL %>% mutate(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE = round(((P614_MON+P614_ESP)*P613)/(P610_T),3))
C_EMPL <- C_EMPL %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDAD <- C_EDAD %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDU <- C_EDU %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
C_DISCR <- C_DISCR %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
# Eliminando repetidos VIVIENDA y CODPERSO
C_EMPL <- select(C_EMPL, -VIVIENDA, -CODPERSO)
C_EDAD <- select(C_EDAD, -VIVIENDA, -CODPERSO)
C_EDU <- select(C_EDU, -VIVIENDA, -CODPERSO)
C_DISCR <- select(C_DISCR, -VIVIENDA, -CODPERSO)
# Merge
base2018 <- Reduce(function(...) merge(..., by.x = "CODIGO", by.y = "CODIGO", all = TRUE), list(C_EDU, C_EMPL, C_DISCR, C_EDAD))
base2018 <- base2018 %>% filter(P205_A >= 18)
#base2018 <- base2018 %>% filter_at(.vars = vars(P622_1,P623_1), .vars_predicate = any_vars(!is.na(.)))
base2018 <- base2018 %>% filter(P610_T > 0)
#creamos la suma de las columnas de ingresos para crear el nivel economico
for (i in 1:nrow(base2018)) {
base2018$NIVEL_ECONO[i] <- sum(((base2018$P614_MON[i]+base2018$P614_ESP[i])*base2018$P613[i]), base2018$P615_MON[i]+base2018$P615_ESP[i], na.rm = T)
}
#Creamos la escala economia
for (i in 1:nrow(base2018)){
if (base2018$NIVEL_ECONO[i] <= 3000 ){
if(base2018$NIVEL_ECONO[i] <= 1400){
if(base2018$NIVEL_ECONO[i] <= 1000){
if(base2018$NIVEL_ECONO[i] <= 700){
base2018$NIVEL_ECONO[i] = 5
}
else{
base2018$NIVEL_ECONO[i] = 4
}
}
else{
base2018$NIVEL_ECONO[i] = 3
}
}
else{
base2018$NIVEL_ECONO[i] = 2
}
}
else {
base2018$NIVEL_ECONO[i] = 1
}
}
table(base2018$NIVEL_ECONO)
#RENOMBRANDO
base2018 <- base2018 %>% rename(NIVEL_EDU = P501)
base2018 <- base2018 %>% rename(ESTADO_TRABAJO = P601)
base2018 <- base2018 %>% rename(HORAS_TOTALES_TRABAJ = P610_T)
base2018 <- base2018 %>% rename(SENTIRSE_DISC = P701)
base2018 <- base2018 %>% rename(SEXO = P204)
base2018 <- base2018 %>% rename(EDAD = P205_A)
base2018 <- base2018 %>% rename(LUG_DIS_1 = P702_1)
base2018 <- base2018 %>% rename(LUG_DIS_2 = P702_2)
base2018 <- base2018 %>% rename(LUG_DIS_3 = P702_3)
base2018 <- base2018 %>% rename(LUG_DIS_4 = P702_4)
base2018 <- base2018 %>% rename(LUG_DIS_5 = P702_5)
base2018 <- base2018 %>% rename(LUG_DIS_6 = P702_6)
base2018 <- base2018 %>% rename(LUG_DIS_7 = P702_7)
base2018 <- base2018 %>% rename(LUG_DIS_8 = P702_8)
base2018 <- base2018 %>% rename(LUG_DIS_9 = P702_9)
base2018 <- base2018 %>% rename(LUG_DIS_10 = P702_10)
df_status(base2018)
base2018 <- select(base2018, -P613,)
base2018 <- select(base2018, -P614_MON,)
base2018 <- select(base2018, -P614_ESP,)
base2018 <- select(base2018, -P615_MON,)
base2018 <- select(base2018, -P615_ESP,)
base2018 <- select(base2018, -CODIGO,)
#Counting NaN for each column lol
na_count <- colSums(is.na(base2018)) %>% as.data.frame()
na_count$name <- rownames(na_count)
View(na_count)
#Datatype of each columna
sapply(base2018, class)
# Mostrar las opciones de las columnas tipo "Factor"
sapply(base2018, levels)
df_status(base2018)
View(base2018)
View(base2022)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, error = FALSE)
library(haven)
library(dplyr)
library(tidyr)
library(datasets)
library(readxl)
library(funModeling)
nombresVariables <- c('Edad', 'Género', 'NivelEstudio', 'EstadoEconómico', 'Empleo', 'Discriminacion', 'Lugar', 'Motivo', 'Agresor', 'HorasTrabajo', 'IngresoHoraIndependiente', 'IngresoHoraDependiente')
tiposVariables <- c('Numérica discreta', 'Categórica nominal', 'Categórica ordinal', 'Categórica ordinal', 'Categórica nominal', 'Categórica nominal', 'Categórica nominal', 'Categórica nominal', 'Categórica nominal', 'Numérica discreta', 'Numérica continua', 'Numérica continua')
valoresVariables <- c('Numero entero', 'Hombre o Mujer', 'Numero entero 1-10 con un nombre asociado', 'Número entero 1-5 representando un intervalo de ingresos', 'Sí o No', 'Sí o No', 'Sí o No para cada columna que representa un lugar distinto', 'Sí o No para cada columna que representa un motivo distinto', 'Sí o No para cada columna que representa un tipo de persona distinta', 'Número entero', 'Decimal', 'Decimal')
tablaVariables <- data.frame(Nombre = nombresVariables, Tipo = tiposVariables, Valores = valoresVariables)
knitr::kable(tablaVariables)
#EDAD <- read_sav("EDAD_CARACTERISTICAS_2022.SAV", col_select = c("bike", "age"))
C_EDAD <- read_sav("EDAD_CARACTERISTICAS_2022.SAV", col_select = c("P204", "P205_A", "P208", "NSELV", "P200_N") )
C_EDAD <- as_factor(C_EDAD)
C_DISCR <- read_sav("DISCRIMINACION_2022.SAV", col_select = c("P701", "P702_1", "P702_2","P702_3","P702_4","P702_5","P702_6","P702_7","P703_1", "P703_2","P703_3", "P703_4","P703_5","P703_6","P703_7","P703_8","P703_9","P703_10","P704_1","P704_2", "P704_3","P704_4","P704_5","P704_6","P704_7", "P704_8", "P704_9", "NSELV", "P200_N") )
C_DISCR <- as_factor(C_DISCR)
C_EMPL <- read_sav("EMPLEO_2022.SAV", col_select = c("P621","P622_1","P622_2", "P623_1","P623_2", "P615_T", "P601", "NSELV", "P200_N") )
C_EMPL <- as_factor(C_EMPL)
C_EDU <- read_sav("EDUCACION_2022.SAV", col_select = c("P501", "P501A", "P501B", "NSELV", "P200_N") )
C_EDU <- as_factor(C_EDU)
C_EMPL$P615_T <- C_EMPL$P615_T*4
C_EMPL <- C_EMPL %>% mutate(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE = round((P623_1+P623_2)/(P615_T),3))
C_EMPL$P621 <- case_when(
C_EMPL$P621 == "1.Diario?" ~ 30,
C_EMPL$P621 == "2.Semanal?" ~ 4,
C_EMPL$P621 == "3.Quincenal?" ~ 2,
C_EMPL$P621 == "4.Mensual?" ~ 1,
C_EMPL$P621 == "5.No recibió pago alguno" ~ 0,
TRUE ~ NA
)
C_EMPL <- C_EMPL %>% mutate(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE = round(((P622_1+P622_2)*P621)/(P615_T),3))
C_EMPL <- C_EMPL %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDAD <- C_EDAD %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDU <- C_EDU %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
C_DISCR <- C_DISCR %>% unite(NSELV,P200_N, col = CODIGO, sep = "_", remove = F) %>% print()
# Eliminando repetidos NSELV y P200
C_EMPL <- select(C_EMPL, -NSELV, -P200_N)
C_EDAD <- select(C_EDAD, -NSELV, -P200_N)
C_EDU <- select(C_EDU, -NSELV, -P200_N)
C_DISCR <- select(C_DISCR, -NSELV, -P200_N)
# Merge
base2022 <- Reduce(function(...) merge(..., by.x = "CODIGO", by.y = "CODIGO", all = TRUE), list(C_EDU, C_EMPL, C_DISCR, C_EDAD))
base2022$P501 <- as.numeric(base2022$P501)
base2022$P501B <- as.numeric(base2022$P501B)
for (i in 1:nrow(base2022)) {
base2022$P501[i] <- sum(base2022$P501[i], base2022$P501B[i], na.rm = T)
}
str(base2022)
#creamos la suma de las columnas de ingresos para crear el nivel economico
for (i in 1:nrow(base2022)) {
base2022$NIVEL_ECONO[i] <- sum(((base2022$P622_1[i]+base2022$P622_2[i])*base2022$P621[i]), (base2022$P623_1[i]+base2022$P623_2[i]), na.rm = T)
}
base2022 <- base2022 %>% filter(P205_A >= 18)
#base2022 <- base2022[!is.na(base2022$P501A),]
base2022 <- base2022[!is.na(base2022$P701),]
#base2022 <- base2022[!is.na(base2022$P619),]
base2022 <- base2022 %>% filter_at(.vars = vars(P622_1,P623_1), .vars_predicate = any_vars(!is.na(.)))
# Borra si es que ambas variables son NA
base2022 <- base2022 %>% filter(P615_T > 0)
ceros_ingres <- base2022 %>% filter(NIVEL_ECONO == 0)
#Creamos la escala economia
base2022$NIVEL_ECONO[1]
for (i in 1:nrow(base2022)){
if (base2022$NIVEL_ECONO[i] <= 3000 ){
if(base2022$NIVEL_ECONO[i] <= 1400){
if(base2022$NIVEL_ECONO[i] <= 1000){
if(base2022$NIVEL_ECONO[i] <= 700){
base2022$NIVEL_ECONO[i] = 5
}
else{
base2022$NIVEL_ECONO[i] = 4
}
}
else{
base2022$NIVEL_ECONO[i] = 3
}
}
else{
base2022$NIVEL_ECONO[i] = 2
}
}
else {
base2022$NIVEL_ECONO[i] = 1
}
}
table(base2022$NIVEL_ECONO)
#RENOMBRANDO
base2022 <- base2022 %>% rename(NIVEL_EDU = P501)
base2022 <- base2022 %>% rename(ESTADO_TRABAJO = P601)
base2022 <- base2022 %>% rename(HORAS_TOTALES_TRABAJ = P615_T)
#base2022 <- base2022 %>% rename(BUSCAS_TRABAJO = P619)
base2022 <- base2022 %>% rename(INGRESO_T_DEP = P622_1)
base2022 <- base2022 %>% rename(INGRESO_T_IND = P623_1)
base2022 <- base2022 %>% rename(SENTIRSE_DISC = P701)
base2022 <- base2022 %>% rename(SEXO = P204)
base2022 <- base2022 %>% rename(EDAD = P205_A)
base2022 <- base2022 %>% rename(MIGRÓ_DE_V = P208)
base2022 <- base2022 %>% rename(MOT_DISC_1 = P702_1)
base2022 <- base2022 %>% rename(MOT_DISC_2 = P702_2)
base2022 <- base2022 %>% rename(MOT_DISC_3 = P702_3)
base2022 <- base2022 %>% rename(MOT_DISC_4 = P702_4)
base2022 <- base2022 %>% rename(MOT_DISC_5 = P702_5)
base2022 <- base2022 %>% rename(MOT_DISC_6 = P702_6)
base2022 <- base2022 %>% rename(MOT_DISC_7 = P702_7)
base2022 <- base2022 %>% rename(LUG_DIS_1 = P703_1)
base2022 <- base2022 %>% rename(LUG_DIS_2 = P703_2)
base2022 <- base2022 %>% rename(LUG_DIS_3 = P703_3)
base2022 <- base2022 %>% rename(LUG_DIS_4 = P703_4)
base2022 <- base2022 %>% rename(LUG_DIS_5 = P703_5)
base2022 <- base2022 %>% rename(LUG_DIS_6 = P703_6)
base2022 <- base2022 %>% rename(LUG_DIS_7 = P703_7)
base2022 <- base2022 %>% rename(LUG_DIS_8 = P703_8)
base2022 <- base2022 %>% rename(LUG_DIS_9 = P703_9)
base2022 <- base2022 %>% rename(LUG_DIS_10 = P703_10)
base2022 <- base2022 %>% rename(QUIEN_DIS_1 = P704_1)
base2022 <- base2022 %>% rename(QUIEN_DIS_2 = P704_2)
base2022 <- base2022 %>% rename(QUIEN_DIS_3 = P704_3)
base2022 <- base2022 %>% rename(QUIEN_DIS_4 = P704_4)
base2022 <- base2022 %>% rename(QUIEN_DIS_5 = P704_5)
base2022 <- base2022 %>% rename(QUIEN_DIS_6 = P704_6)
base2022 <- base2022 %>% rename(QUIEN_DIS_7 = P704_7)
base2022 <- base2022 %>% rename(QUIEN_DIS_8 = P704_8)
base2022 <- base2022 %>% rename(QUIEN_DIS_9 = P704_9)
base2022 <- base2022 %>% rename(ULT_NIVEL_ESTU = P501A)
summary(base2022$MIGRÓ_DE_V)
df_status(base2022)
base2022 <- select(base2022, -P501B,)
base2022 <- select(base2022, -P621,)
base2022 <- select(base2022, -P622_2,)
base2022 <- select(base2022, -P623_2,)
base2022 <- select(base2022, -INGRESO_T_DEP,)
base2022 <- select(base2022, -INGRESO_T_IND,)
base2022 <- select(base2022, -MIGRÓ_DE_V,)
base2022 <- select(base2022, -CODIGO,)
#Counting NaN for each column lol
na_count <- colSums(is.na(base2022)) %>% as.data.frame()
na_count$name <- rownames(na_count)
View(na_count)
#Datatype of each columna
sapply(base2022, class)
# Mostrar las opciones de las columnas tipo "Factor"
sapply(base2022, levels)
summary(base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE)
summary(base2022$INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE)
#menor_10 <- base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE%>%filter(base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE<=10)
merged_table2<- base2022 %>% filter(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE <= 10)
base2022$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE
hist(merged_table2$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE, na.rm = TRUE)
boxplot(merged_table2$GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE, na.rm = TRUE)
#base2022 <- base2022 %>% filter(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE <= 100)
#boxplot(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE, data=base2022)
#boxplot(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE, data=base2022)
#base2022 <- base2022 %>% filter(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE <= 250)
#boxplot(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE, data=base2022)
C_EDAD <- read_sav("BASE DE DATOS 2018/CARACTERISTICAS_2018.sav", col_select = c("P204", "P205_A", "VIVIENDA", "CODPERSO") )
C_EDAD <- as_factor(C_EDAD)
#"ESTRATO_SOCIOECONOMICO"
C_DISCR <- read_sav("BASE DE DATOS 2018/DISCRIMINACION_2018.sav", col_select = c("P701", "P702_1", "P702_2","P702_3","P702_4","P702_5","P702_6","P702_7","P702_8","P702_9","P702_10","VIVIENDA", "CODPERSO") )
C_DISCR <- as_factor(C_DISCR)
C_EMPL <- read_sav("BASE DE DATOS 2018/EMPLEO_2018.sav", col_select = c("P601","P610_T","P613","P614_MON","P614_ESP","P615_MON","P615_ESP","VIVIENDA", "CODPERSO") )
C_EMPL <- as_factor(C_EMPL)
C_EDU <- read_sav("BASE DE DATOS 2018/EDUCACION_2018.sav", col_select = c("P501","VIVIENDA", "CODPERSO") )
C_EDU <- as_factor(C_EDU)
C_EMPL$P610_T <- C_EMPL$P610_T*4
C_EMPL <- C_EMPL %>% mutate(GANANCIA_POR_HORA_TRABAJADOR_INDEPENDIENTE = round((P615_MON+P615_ESP)/(P610_T),3))
C_EMPL$P613 <- case_when(
C_EMPL$P613 == "Diario?" ~ 30,
C_EMPL$P613 == "Semanal?" ~ 4,
C_EMPL$P613 == "Quincenal?" ~ 2,
C_EMPL$P613 == "Mensual?" ~ 1,
TRUE ~ NA
)
C_EMPL <- C_EMPL %>% mutate(INGRESO_POR_HORA_TRABAJADOR_DEPENDIENTE = round(((P614_MON+P614_ESP)*P613)/(P610_T),3))
C_EMPL <- C_EMPL %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDAD <- C_EDAD %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
C_EDU <- C_EDU %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
C_DISCR <- C_DISCR %>% unite(VIVIENDA,CODPERSO, col = CODIGO, sep = "_", remove = F) %>% print()
# Eliminando repetidos VIVIENDA y CODPERSO
C_EMPL <- select(C_EMPL, -VIVIENDA, -CODPERSO)
C_EDAD <- select(C_EDAD, -VIVIENDA, -CODPERSO)
C_EDU <- select(C_EDU, -VIVIENDA, -CODPERSO)
C_DISCR <- select(C_DISCR, -VIVIENDA, -CODPERSO)
# Merge
base2018 <- Reduce(function(...) merge(..., by.x = "CODIGO", by.y = "CODIGO", all = TRUE), list(C_EDU, C_EMPL, C_DISCR, C_EDAD))
base2018 <- base2018 %>% filter(P205_A >= 18)
#base2018 <- base2018 %>% filter_at(.vars = vars(P622_1,P623_1), .vars_predicate = any_vars(!is.na(.)))
base2018 <- base2018 %>% filter(P610_T > 0)
#creamos la suma de las columnas de ingresos para crear el nivel economico
for (i in 1:nrow(base2018)) {
base2018$NIVEL_ECONO[i] <- sum(((base2018$P614_MON[i]+base2018$P614_ESP[i])*base2018$P613[i]), base2018$P615_MON[i]+base2018$P615_ESP[i], na.rm = T)
}
#Creamos la escala economia
for (i in 1:nrow(base2018)){
if (base2018$NIVEL_ECONO[i] <= 3000 ){
if(base2018$NIVEL_ECONO[i] <= 1400){
if(base2018$NIVEL_ECONO[i] <= 1000){
if(base2018$NIVEL_ECONO[i] <= 700){
base2018$NIVEL_ECONO[i] = 5
}
else{
base2018$NIVEL_ECONO[i] = 4
}
}
else{
base2018$NIVEL_ECONO[i] = 3
}
}
else{
base2018$NIVEL_ECONO[i] = 2
}
}
else {
base2018$NIVEL_ECONO[i] = 1
}
}
table(base2018$NIVEL_ECONO)
#RENOMBRANDO
base2018 <- base2018 %>% rename(NIVEL_EDU = P501)
base2018 <- base2018 %>% rename(ESTADO_TRABAJO = P601)
base2018 <- base2018 %>% rename(HORAS_TOTALES_TRABAJ = P610_T)
base2018 <- base2018 %>% rename(SENTIRSE_DISC = P701)
base2018 <- base2018 %>% rename(SEXO = P204)
base2018 <- base2018 %>% rename(EDAD = P205_A)
base2018 <- base2018 %>% rename(LUG_DIS_1 = P702_1)
base2018 <- base2018 %>% rename(LUG_DIS_2 = P702_2)
base2018 <- base2018 %>% rename(LUG_DIS_3 = P702_3)
base2018 <- base2018 %>% rename(LUG_DIS_4 = P702_4)
base2018 <- base2018 %>% rename(LUG_DIS_5 = P702_5)
base2018 <- base2018 %>% rename(LUG_DIS_6 = P702_6)
base2018 <- base2018 %>% rename(LUG_DIS_7 = P702_7)
base2018 <- base2018 %>% rename(LUG_DIS_8 = P702_8)
base2018 <- base2018 %>% rename(LUG_DIS_9 = P702_9)
base2018 <- base2018 %>% rename(LUG_DIS_10 = P702_10)
df_status(base2018)
base2018 <- select(base2018, -P613,)
base2018 <- select(base2018, -P614_MON,)
base2018 <- select(base2018, -P614_ESP,)
base2018 <- select(base2018, -P615_MON,)
base2018 <- select(base2018, -P615_ESP,)
base2018 <- select(base2018, -CODIGO,)
#Counting NaN for each column lol
na_count <- colSums(is.na(base2018)) %>% as.data.frame()
na_count$name <- rownames(na_count)
View(na_count)
#Datatype of each columna
sapply(base2018, class)
# Mostrar las opciones de las columnas tipo "Factor"
sapply(base2018, levels)
df_status(base2018)
View(base2022)
View(base2018)
