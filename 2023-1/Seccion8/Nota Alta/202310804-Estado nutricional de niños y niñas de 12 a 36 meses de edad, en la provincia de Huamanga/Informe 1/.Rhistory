ggplot(D, aes(Peso, Estatura)) +
geom_point(aes(color = factor(Dx_PT, levels = names(colores)))) +
geom_smooth(method = "lm", se = FALSE, color = "black", aes(group = Dx_PT)) +
labs(title = "Gráf 9. Diagnóstico en tratamiento para la anemia en relación de la estatura y peso",
x = "Peso",
y = "Estatura") +
scale_color_manual("Nivel de DX_PT", values = colores) +
facet_wrap(~ Dx_PT, nrow = 2) +
geom_text(data = rectas, aes(x = Inf, y = Inf, label = ecuacion, group = Dx_PT),
vjust = "inward", hjust = "inward", check_overlap = TRUE, size = 3)
# Crear gráficos separados para cada variable
grafico_PTZ <- ggplot(data[data$Variable == "PTZ", ], aes(x = Categorias, y = Rango_Superior)) +
geom_point(aes(color = Variable), size = 3) +
geom_line(aes(group = Variable, color = Variable), size = 1) +
geom_errorbar(aes(ymin = Rango_Inferior, ymax = Rango_Superior, color = Variable), width = 0.2) +
labs(x = "Categorías", y = "Valor", title = "Gráfica 10. Rangos y Categorías - PTZ") +
scale_color_manual(values = c("blue")) +
theme_minimal()
#Mostrar el gráfico
print(grafico_PTZ)
grafico_ZTE <- ggplot(data[data$Variable == "ZTE", ], aes(x = Categorias, y = Rango_Superior)) +
geom_point(aes(color = Variable), size = 3) +
geom_line(aes(group = Variable, color = Variable), size = 1) +
geom_errorbar(aes(ymin = Rango_Inferior, ymax = Rango_Superior, color = Variable), width = 0.2) +
labs(x = "Categorías", y = "Valor", title = "Gráfica 11. Rangos y Categorías - ZTE") +
scale_color_manual(values = c("green")) +
theme_minimal()
#Mostrar el gráfico
print(grafico_ZTE)
grafico_ZPE <- ggplot(data[data$Variable == "ZPE", ], aes(x = Categorias, y = Rango_Superior)) +
geom_point(aes(color = Variable), size = 3) +
geom_line(aes(group = Variable, color = Variable), size = 1) +
geom_errorbar(aes(ymin = Rango_Inferior, ymax = Rango_Superior, color = Variable), width = 0.2) +
labs(x = "Categorías", y = "Valor", title = "Gráfica 12. Rangos y Categorías - ZPE")+
scale_color_manual(values = c("orange")) +
theme_minimal()
#Mostrar el gráfico
print(grafico_ZPE)
par(mar = c(1.7, 8, 0.45, 3) + 0.1)
mosaicplot(D$Dx_PT ~ D$Sexo,
col = 2:5,
main = "Gráfica 13. Niveles de peso para la talla esperada según sexo",
xlab = "Nivel",
ylab = "Sexo",
cex.axis = 1,
as = 1,
las = 2)
mosaicplot(D$Dx_TE ~ D$Sexo,
col=3:6,
main="Gráfica 14. Niveles de talla para la edad esperada según sexo",
xlab="Nivel",
ylab="Sexo",
cex.axis=1 ,as=1)
mosaicplot(D$Dx_PE ~ D$Sexo,
col=7:10,
main="Gráfica 15. Niveles de peso para la edad esperada según sexo",
xlab="Nivel",
ylab="Sexo",
cex.axis=1 ,as=1)
# Calcular la cantidad de niños pertenecientes a algún programa.
B<-select(D,5,6,8)
conteo_programas <- colSums(B == "1")  # "A" representa la categoría del programa
colores <- c("blue", "red", "orange")
# Graficar el conteo de personas por programa
bp1<- barplot(conteo_programas,col=colores, xlab = "Programas Sociales", ylab = "Cantidad de Niños",main = "Gráfica 16. Cantidad de niños que pertenecen a un programa social",ylim= c(0,7000))
text(bp1, conteo_programas, labels = conteo_programas, pos = 3, cex = 1)
#Calcular la tabla de contingencia de Programa y Sexo
tabla_contingencia <- table(B$SIS, D$Sexo)
#Definir una lista de colores personalizados
colores <- c("orange", "brown")
#Graficar la distribución de cantidad de personas según su sexo en los programas sociales con colores personalizados
bp2<- barplot(tabla_contingencia, beside = TRUE, legend = rownames(tabla_contingencia),
col = colores, xlab = "Programa SIS", ylab = "Cantidad de Niños",
main = "Gráfica 17. Participación en el programa SIS según sexo",ylim= c(0,3500))
text(bp2, tabla_contingencia, labels = tabla_contingencia, pos = 3, cex = 1)
# Convertir la variable "Distrito" en un factor con el orden deseado
D$Distrito <- factor(D$Distrito, levels = c("SANTIAGO DE PISCHA","AYACUCHO","ACOCRO","ANDRES AVELINO CACERES D.","PACAYCASA", "VINCHOS","OCROS","CARMEN ALTO","SOCOS","SAN JOSE DE TICLLAS","JESUS NAZARENO","SAN JUAN BAUTISTA","ACOS VINCHOS","CHIARA", "TAMBILLO","QUINUA"))
# Crear el gráfico de barras con los distritos reordenados
g<- barplot(table(D$Distrito), xlab = "Cantidad de niños",
main = "Gráfica 18. Distribución de niños por Distrito",xlim = c(0,2000),
col = rainbow(16), horiz = TRUE, las = 1, names.arg = "")
# Agregar la leyenda
legend("topright", levels(D$Distrito),
border = "black", fill = rainbow(16), cex = 0.6, y = 0.99999999)
# Crear el dataframe con los rangos y categorías
data <- data.frame(
Categorias = c("Aguda", "Normal", "Sobrepeso", "Obesidad", "Normal", "Crónica", "Normal", "Global"),
Variable = c("PTZ", "PTZ", "PTZ", "PTZ", "ZTE", "ZTE", "ZPE", "ZPE"),
Rango_Inferior = c(-4.780, -1.980, 2.010, 3.020, -5.750, -2.010, -5.450, -2.000),
Rango_Superior = c(-2.010, 2.000, 2.960, 4.540, -2.010, 5.9100, -2.010, 3.700)
)
# Establecer el orden de las categorías para cada variable
orden_PTZ <- c("Aguda", "Normal", "Sobrepeso", "Obesidad")
orden_ZTE <- c("Normal", "Crónica")
orden_ZPE <- c("Normal", "Global")
# Convertir la columna "Categorias" en un factor con el orden deseado para cada variable
data$Categorias <- factor(data$Categorias, levels = unique(c(orden_PTZ, orden_ZTE, orden_ZPE)))
par(mar = c(1.7, 8, 0.45, 3) + 0.1)
mosaicplot(D$Dx_PT ~ D$Sexo,
col = 2:5,
main = "Gráfica 13. Niveles de peso para la talla esperada según sexo",
xlab = "Nivel",
ylab = "Sexo",
cex.axis = 1,
as = 1,
las = 2)
mosaicplot(D$Dx_TE ~ D$Sexo,
col=3:6,
main="Gráfica 14. Niveles de talla para la edad esperada según sexo",
xlab="Nivel",
ylab="Sexo",
cex.axis=1 ,as=1)
Plan <- data.frame(nombre = c("Cristhian", "Joseph", "Maylin", "Leonel", "Jefferson",
"Jefferson", "Leonel", "Maylin", "Joseph", "Cristhian",
"Joseph", "Cristhian", "Leonel", "Maylin", "Jefferson",
"Joseph", "Cristhian", "Leonel", "Maylin", "Jefferson",
"Cristhian", "Maylin", "Joseph", "Leonel", "Jefferson",
"Cristhian", "Joseph", "Maylin", "Leonel", "Jefferson",
"Cristhian", "Joseph", "Maylin", "Leonel", "Jefferson",
"Leonel", "Maylin", "Joseph", "Cristhian", "Jefferson"),
inicio = c("2","2","2","2","2", "3","3","3","3","3", "4","4","4","4","4", "5","5","5","5","5",
"6","6","6","6","6", "7","7","7","7","7", "8","8","8","8","8", "9","9","9","9","9"),
fin = c("3","3","3","3","3", "4","4","4","4","4", "5","5","5","5","5", "6","6","6","6","6",
"7","7","7","7","7", "8","8","8","8","8", "9","9","9","9","9", "diez","diez","diez","diez","diez"),
Tareas = c("Selección del tema","Selección del tema", "Objetivos del proyecto", "Objetivos del proyecto", "Objetivos del proyecto",
"Busqueda de datos","Busqueda de datos","Busqueda de datos","Definición de variables","Definición de variables",
"Presentación avance 1","Presentación avance 1","Presentación avance 1","Presentación avance 1","Presentación avance 1",
"Limpieza de datos", "Limpieza de datos", "Revisión y mejora de objetivos", "Revisión y mejora de objetivos", "Revisión y mejora de objetivos",
"Presentación avance 2", "Presentación avance 2", "Presentación avance 2", "Presentación avance 2", "Presentación avance 2",
"Elaboración de descriptores númericos y gráficos(Objetivo 1,2 y 3)" , "Elaboración de descriptores númericos y gráficos(Objetivo 1,2 y 3)",
"Análisis de descriptores númericos y gráficos(Objetivo 1,2 y 3)","Análisis de descriptores númericos y gráficos(Objetivo 1,2 y 3)",
"Análisis de descriptores númericos y gráficos(Objetivo 1,2 y 3)",
"Elaboración de descriptores númericos y gráficos(Objetivo 4 y 5)" , "Elaboración de descriptores númericos y gráficos(Objetivo 4 y 5)",
"Análisis de descriptores númericos y gráficos(Objetivo 4 y 5)","Análisis de descriptores númericos y gráficos(Objetivo 4 y 5)",
"Análisis de descriptores númericos y gráficos(Objetivo 4 y 5)",
"Presentación avance 3", "Presentación avance 3", "Presentación avance 3", "Presentación avance 3", "Presentación avance 3"))
library(ggplot2)
colores <- c("#FF0000", "#FF0000","#B0E2E5" , "#00FFFF", "#FF00FF", "#FF00FF",
"#0000FF", "#9C27B0", "#00FF00", "#FFC0CB", "#FFFF00" ,"#000000",
"#FF1493")
ggplot(Plan,aes(x=inicio, xend=fin, y=nombre, yend=nombre, color=Tareas)) +
theme_bw()+ geom_segment(size=5) + scale_color_manual(values = colores) +
labs(titulo = "Planificación de tareas", x = 'Semana', y = 'Estudiantes')
V= c("Distrito", "Sexo", "Edad", "CentroDeSalud", "Juntos", "SIS", "Qaliwarma", "Peso", "Estatura", "PTZ", "ZTE", "ZPE", "Dx_PT", "Dx_TE", "Dx_PE", "Hemoglobina", "IMC")
TV = c("Categórica nominal", "Categórica nominal", "Numérica discreta", "Categórica nominal", "Categórica nominal", "Categórica nominal", "Categórica nominal", "Numérica continua", "Numérica continua", "Numérica Continua", "Numérica continua", "Numérica continua", "Categórica ordinal", "Categórica ordinal", "Categórica ordinal", "Numérica continua", "Numérica continua")
R = c("Distritos de la provincia estudiada", "Sexo biológico", "Número entero mayor igual a 12 y menor igual a 36", "Centros de Salud de la provincia estudiada", "Programa social", "Programa de salud", "Programa social", "Valor decimal positivo medido en kilogramos", "Valor decimal positivo medido en centímetros", "Número decimal negativo o positivo", "Número decimal negativo o positivo", "Número decimal negativo o positivo", "","","", "Valor decimal positivo", "Valor decimal positivo")
Tabla_de_variable = data.frame(V,TV,R)
Tabla_de_variable
#install.packages("readr")
library(readr)
#install.packages(dplyr)
library(dplyr)
#install.packages("modeest")
library(modeest)
#install.packages("DescTools")
library(DescTools)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("stringi")
library(stringi)
#install.packages("car")
library(car)
#install.packages("plotrix")
library(plotrix)
#install.packages("knitr")
library(knitr)
#install.packages("kableExtra")
library(kableExtra)
#install.packages("boot")
library(boot)
#install.packages("remotes")
library(remotes)
library(readr)
Niños_AYACUCHO <- read_csv("Niños AYACUCHO.csv")
D<-Niños_AYACUCHO
D<-filter(D, Prov_EESS=="HUAMANGA",EdadMeses>=12,EdadMeses<=36)
D <- rename(D, Distrito='Dist_EESS' , Edad='EdadMeses', CentroDeSalud='CentroPobladoPN', PIN='Pin',Estatura='Talla' )
D<-select(D, 8,12,14,19:28,30:33)
View(D)
D
class(D$Distrito)
class(D$Sexo)
class(D$Edad)
class(D$CentroDeSalud)
class(D$Juntos)
class(D$SIS)
class(D$PIN)
class(D$Qaliwarma)
class(D$Peso)
class(D$Estatura)
class(D$PTZ)
class(D$ZTE)
class(D$ZPE)
class(D$Dx_PT)
class(D$Dx_TE)
class(D$Dx_PE)
class(D$Hemoglobina)
D$Juntos<-as.character(D$Juntos)
D$SIS<-as.character(D$SIS)
D$PIN<-as.character(D$PIN)
D$Qaliwarma<-as.character(D$Qaliwarma)
class(D$Juntos)
class(D$SIS)
class(D$PIN)
class(D$Qaliwarma)
D <- D %>% mutate(Dx_PT = ifelse(Dx_PT == "D.Aguda", "Bajo Peso", Dx_PT))
unique(D$Dx_PT)
nrow(D)
ncol(D)
dim(D)
colSums(is.na(D))
DF<-na.omit(D)
View(DF)
DF
dim(DF)
D <- mutate(D,
Filas_NA = ifelse(is.na(D$CentroDeSalud) & is.na(D$Juntos) & is.na(D$SIS) & is.na(D$PIN)& is.na(D$Qaliwarma), row_number(), NA))
print(D)
filas_NA <- D[!is.na(D$Filas_NA), ]
D <- D[is.na(D$Filas_NA), ]
D<-select(D,1:17)
print(D)
colSums(is.na(D))
dim(D)
Porcentaje = round((sum(is.na(D))/sum(!is.na(D)))*100,2)
Porcentaje
D$Estatura<-D$Estatura/100
D<-cbind(D, IMC =D$Peso/(D$Estatura*D$Estatura))
D$IMC<-round(D$IMC,3)
library(ggplot2)
# Calcular las medidas de resumen
media <- round(mean(D$Edad), 2)
mediana <- median(D$Edad)
moda <- as.numeric(names(table(D$Edad))[table(D$Edad) == max(table(D$Edad))])
# Crear el título y subtítulo del gráfico
titulo <- "Gráfica 1. Histograma de Edad"
subtitulo <- paste("Media =", media, "Mediana =", mediana, "Moda =", moda)
# Graficar el histograma
ggplot(data = D, mapping = aes(x = Edad, fill = "Barras")) +
geom_histogram(bins = 50) +
ggtitle(titulo, subtitle = subtitulo) +
xlab('Edad') + ylab('Frecuencia') +
geom_vline(aes(xintercept = media, color = "media"),
linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mediana, color = "mediana"),
linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = moda, color = "moda"),
linetype = "dashed", size = 1) +
scale_color_manual(values = c("green", "red","orange"),
labels = c("Media", "Mediana","Moda")) +
scale_fill_manual(values = "skyblue")  # Cambia "blue" al color que desees
summary(D$Edad)
#Coeficiente de variabilidad
round(sd(D$Edad)/mean(D$Edad),2)*100
# Calcular las medidas de resumen
media <- round(mean(DF$Hemoglobina), 2)
mediana <- median(DF$Hemoglobina)
# Crear el título y subtitulo del gráfico
titulo <- "Gráfica 2. Histograma de Hemoglobina"
subtitulo <- paste("Media =", media, "Mediana =", mediana)
# Dibujar el histograma con líneas de media y mediana
ggplot(data = D, aes(x = Hemoglobina)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "white") +
ggtitle(titulo, subtitle = subtitulo) +
xlab('Hemoglobina') + ylab('Frecuencia') +
geom_vline(aes(xintercept = media, color = "Media"),
linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mediana, color = "Mediana"),
linetype = "dashed", size = 1) +
scale_color_manual(values = c("yellow", "red"),
labels = c("Media", "Mediana")) +
guides(color = guide_legend(title = "Líneas"))
summary(DF$Hemoglobina)
#Moda de la variable Hemoglobina
as.numeric(names(table(DF$Hemoglobina))[table(DF$Hemoglobina) == max(table(DF$Hemoglobina))])
boxplot(D$Hemoglobina  ~D$Edad,las=3,cex.axis=0.8,xlab="Edad",ylab="Nivel de Hemoglobina",main=" Gráfica 3. Distribución del nivel de Hemoglobina por edades", col=rainbow(16))
D$Edad[which.max(D$Hemoglobina)]
boxplot(DF$Hemoglobina ~DF$Distrito,las=3, cex.axis=0.6, xlab="Distrito", ylab="Nivel de Hemoglobina", main="Gráfica 4. Distribución del nivel de Hemoglobina por distritos", col=rainbow(16))
# Calcular el promedio de hemoglobina por distrito
promedio_hemoglobina <- aggregate(Hemoglobina ~ Distrito, data = D, FUN = mean)
# Ordenar los distritos de forma descendente según el promedio de hemoglobina
distritos_ordenados <- promedio_hemoglobina[order(promedio_hemoglobina$Hemoglobina, decreasing = TRUE), ]
# Mostrar los distritos con mayor hemoglobina
distritos_mayor_hemoglobina <- head(distritos_ordenados, n = 5)
# Imprimir los distritos con mayor hemoglobina
print(distritos_mayor_hemoglobina)
ggplot(data = D, aes(x = Sexo, y = Hemoglobina)) +
geom_jitter(aes(color = Sexo), size = 1, alpha = 0.7) +
geom_boxplot(aes(color = Sexo), alpha = 0.7) +
xlab('Sexo') +
ylab('Nivel de Hemoglobina') +
ggtitle('Gráfica 5. Nivel de Hemoglobina de acuerdo al Sexo') +
theme_minimal()
D1 <- D
# Crear los intervalos de edad
intervalos <- seq(12, 36, by = 6)
# Asignar los intervalos a las edades
D1$Edad_intervalo <- cut(D1$Edad, intervalos, include.lowest = TRUE)
# Crear el gráfico
ggplot(D1, aes(x = Edad_intervalo, fill = Sexo)) +
geom_bar(position = "dodge", stat = "count") +
labs(x = "Edad", y = "Gráfica 6. Cantidad de Niños", fill = "Sexo") +
ggtitle("                             Cantidad de Niños por Edad y Sexo")
# Calcular las medidas de resumen
media <- round(mean(D$IMC), 2)
mediana <- median(D$IMC)
# Crear el título y subtitulo del gráfico
titulo <- "Gráfica 7. Histograma del Indice de Masa Corporal(IMC)"
subtitulo <- paste("Media =", media, "Mediana =", mediana)
# Dibujar el histograma con líneas de media y mediana
ggplot(data = D, aes(x = IMC)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "white") +
ggtitle(titulo, subtitle = subtitulo) +
xlab('IMC') + ylab('Frecuencia') +
geom_vline(aes(xintercept = media, color = "Media"),
linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mediana, color = "Mediana"),
linetype = "dashed", size = 1) +
scale_color_manual(values = c("orange", "black"),
labels = c("Media", "Mediana"))# +geom_density(color = "red", size = 1)
summary(D$IMC)
# Crear el gráfico de barras
grafico_imc <- ggplot(D, aes(x = Sexo, y = IMC, fill = Sexo)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sexo", y = "IMC", title = "Gráfica 8. Distribución de IMC según el Sexo") +
scale_fill_manual(values = c("blue", "pink")) +
theme_minimal()
# Mostrar el gráfico
print(grafico_imc)
rectas <- D %>%
group_by(Dx_PT) %>%
do(modelo = lm(Estatura ~ Peso, data = .)) %>%
rowwise() %>%
mutate(pendiente = coef(modelo)[["Peso"]],
intercepto = coef(modelo)[["(Intercept)"]],
ecuacion = paste("y = ", round(pendiente, 4), "x + ", round(intercepto, 4)))
# Definir los colores para cada nivel de Dx_PT
colores <- c("Bajo Peso" = "red",
"Normal" = "green",
"Sobrepeso" = "orange",
"Obesidad" = "purple")
# Creamos la gráfica
ggplot(D, aes(Peso, Estatura)) +
geom_point(aes(color = factor(Dx_PT, levels = names(colores)))) +
geom_smooth(method = "lm", se = FALSE, color = "black", aes(group = Dx_PT)) +
labs(title = "Gráf 9. Diagnóstico en tratamiento para la anemia en relación de la estatura y peso",
x = "Peso",
y = "Estatura") +
scale_color_manual("Nivel de DX_PT", values = colores) +
facet_wrap(~ Dx_PT, nrow = 2) +
geom_text(data = rectas, aes(x = Inf, y = Inf, label = ecuacion, group = Dx_PT),
vjust = "inward", hjust = "inward", check_overlap = TRUE, size = 3)
#Correlación de variabilidad entre la variable Peso y Edad
round(cor(DF$Peso,DF$Estatura),2)
summary(filter(select(D, 11:16), Dx_PT == "Aguda")$PTZ)
summary(filter(select(D, 11:16), Dx_PT == "Normal")$PTZ)
summary(filter(select(D, 11:16), Dx_PT == "Sobrepeso")$PTZ)
summary(filter(select(D, 11:16), Dx_PT == "Obesidad")$PTZ)
summary(filter(select(D, 11:16), Dx_TE == "D.Crónica")$ZTE)
summary(filter(select(D, 11:16), Dx_TE == "Normal")$ZTE)
summary(filter(select(D, 11:16), Dx_PE == "D.Global")$ZPE)
summary(filter(select(D, 11:16), Dx_PE == "Normal")$ZPE)
# Crear el dataframe con los rangos y categorías
data <- data.frame(
Categorias = c("Aguda", "Normal", "Sobrepeso", "Obesidad", "Normal", "Crónica", "Normal", "Global"),
Variable = c("PTZ", "PTZ", "PTZ", "PTZ", "ZTE", "ZTE", "ZPE", "ZPE"),
Rango_Inferior = c(-4.780, -1.980, 2.010, 3.020, -5.750, -2.010, -5.450, -2.000),
Rango_Superior = c(-2.010, 2.000, 2.960, 4.540, -2.010, 5.9100, -2.010, 3.700)
)
# Establecer el orden de las categorías para cada variable
orden_PTZ <- c("Aguda", "Normal", "Sobrepeso", "Obesidad")
orden_ZTE <- c("Normal", "Crónica")
orden_ZPE <- c("Normal", "Global")
# Convertir la columna "Categorias" en un factor con el orden deseado para cada variable
data$Categorias <- factor(data$Categorias, levels = unique(c(orden_PTZ, orden_ZTE, orden_ZPE)))
# Crear gráficos separados para cada variable
grafico_PTZ <- ggplot(data[data$Variable == "PTZ", ], aes(x = Categorias, y = Rango_Superior)) +
geom_point(aes(color = Variable), size = 3) +
geom_line(aes(group = Variable, color = Variable), size = 1) +
geom_errorbar(aes(ymin = Rango_Inferior, ymax = Rango_Superior, color = Variable), width = 0.2) +
labs(x = "Categorías", y = "Valor", title = "Gráfica 10. Rangos y Categorías - PTZ") +
scale_color_manual(values = c("blue")) +
theme_minimal()
#Mostrar el gráfico
print(grafico_PTZ)
par(mar = c(1.7, 8, 0.45, 3) + 0.1)
mosaicplot(D$Dx_PT ~ D$Sexo,
col = 2:5,
main = "Gráfica 11. Niveles de peso para la talla esperada según sexo",
xlab = "Nivel",
ylab = "Sexo",
cex.axis = 1,
as = 1,
las = 2)
grafico_ZTE <- ggplot(data[data$Variable == "ZTE", ], aes(x = Categorias, y = Rango_Superior)) +
geom_point(aes(color = Variable), size = 3) +
geom_line(aes(group = Variable, color = Variable), size = 1) +
geom_errorbar(aes(ymin = Rango_Inferior, ymax = Rango_Superior, color = Variable), width = 0.2) +
labs(x = "Categorías", y = "Valor", title = "Gráfica 12. Rangos y Categorías - ZTE") +
scale_color_manual(values = c("green")) +
theme_minimal()
#Mostrar el gráfico
print(grafico_ZTE)
mosaicplot(D$Dx_TE ~ D$Sexo,
col=3:6,
main="Gráfica 13. Niveles de talla para la edad esperada según sexo",
xlab="Nivel",
ylab="Sexo",
cex.axis=1 ,as=1)
grafico_ZPE <- ggplot(data[data$Variable == "ZPE", ], aes(x = Categorias, y = Rango_Superior)) +
geom_point(aes(color = Variable), size = 3) +
geom_line(aes(group = Variable, color = Variable), size = 1) +
geom_errorbar(aes(ymin = Rango_Inferior, ymax = Rango_Superior, color = Variable), width = 0.2) +
labs(x = "Categorías", y = "Valor", title = "Gráfica 14. Rangos y Categorías - ZPE")+
scale_color_manual(values = c("orange")) +
theme_minimal()
#Mostrar el gráfico
print(grafico_ZPE)
mosaicplot(D$Dx_PE ~ D$Sexo,
col=7:10,
main="Gráfica 15. Niveles de peso para la edad esperada según sexo",
xlab="Nivel",
ylab="Sexo",
cex.axis=1 ,as=1)
# Calcular la cantidad de niños pertenecientes a algún programa.
B<-select(D,5,6,8)
conteo_programas <- colSums(B == "1")  # "A" representa la categoría del programa
colores <- c("blue", "red", "orange")
# Graficar el conteo de personas por programa
bp1<- barplot(conteo_programas,col=colores, xlab = "Programas Sociales", ylab = "Cantidad de Niños",main = "Gráfica 16. Cantidad de niños que pertenecen a un programa social",ylim= c(0,7000))
text(bp1, conteo_programas, labels = conteo_programas, pos = 3, cex = 1)
round(6145/nrow(D)*100,2)
B$Juntos <- ifelse(B$Juntos == 1, "SI", "NO")
B$SIS <- ifelse(B$SIS == 1, "SI", "NO")
B$Qaliwarma <- ifelse(B$Qaliwarma == 1, "SI", "NO")
#Calcular la tabla de contingencia de Programa y Sexo
tabla_contingencia <- table(B$SIS, D$Sexo)
#Definir una lista de colores personalizados
colores <- c("orange", "brown")
#Graficar la distribución de cantidad de personas según su sexo en los programas sociales con colores personalizados
bp2<- barplot(tabla_contingencia, beside = TRUE, legend = rownames(tabla_contingencia),
col = colores, xlab = "Programa SIS", ylab = "Cantidad de Niños",
main = "Gráfica 17. Participación en el programa SIS según sexo",ylim= c(0,3500))
text(bp2, tabla_contingencia, labels = tabla_contingencia, pos = 3, cex = 1)
# Calcular la cantidad de niños y niñas atendidos por centro de salud
atendidos <- D %>%
group_by(CentroDeSalud, Sexo) %>%
summarise(Cantidad = n(), .groups = "drop")
# Ordenar la tabla por la variable Cantidad de mayor a menor
atendidos <- atendidos %>%
arrange(desc(Cantidad))
# Obtener el centro de salud con más niños y niñas atendidos
centro_mas_atendidos <- atendidos %>%
filter(row_number() == 1) %>%
pull(CentroDeSalud)
titulo1 <- "Top 5 centros de salud con mayor cantidad de Atendidos"
cat("\n", titulo1)
# Obtener los cinco centros de salud con mayor cantidad
top_centros <- names(sort(table(D$CentroDeSalud), decreasing = TRUE))[1:5]
# Filtrar los datos solo para los centros de salud seleccionados
datos_filtrados <- subset(D, CentroDeSalud %in% top_centros)
# Crear la tabla de contingencia entre los centros de salud y el sexo
tabla_contingencia <- table(datos_filtrados$CentroDeSalud, datos_filtrados$Sexo)
# Mostrar la tabla de contingencia con el título
print(tabla_contingencia, quote = FALSE)
# Convertir la variable "Distrito" en un factor con el orden deseado
D$Distrito <- factor(D$Distrito, levels = c("SANTIAGO DE PISCHA","AYACUCHO","ACOCRO","ANDRES AVELINO CACERES D.","PACAYCASA", "VINCHOS","OCROS","CARMEN ALTO","SOCOS","SAN JOSE DE TICLLAS","JESUS NAZARENO","SAN JUAN BAUTISTA","ACOS VINCHOS","CHIARA", "TAMBILLO","QUINUA"))
# Crear el gráfico de barras con los distritos reordenados
g<- barplot(table(D$Distrito), xlab = "Cantidad de niños",
main = "Gráfica 18. Distribución de niños por Distrito",xlim = c(0,2000),
col = rainbow(16), horiz = TRUE, las = 1, names.arg = "")
# Agregar la leyenda
legend("topright", levels(D$Distrito),
border = "black", fill = rainbow(16), cex = 0.6, y = 0.99999999)
rename(data.frame(table(D1$Distrito)) %>% arrange(desc(select(data.frame(table(D1$Distrito)), 2))) %>% head(3), Distrito = 'Var1', CantidadDeNiños = 'Freq')
# Crear los intervalos de edad
intervalos <- seq(12, 36, by = 6)
# Asignar los intervalos a las edades
D1$Edad_intervalo <- cut(D1$Edad, intervalos, include.lowest = TRUE)
# Crear el gráfico
ggplot(D1, aes(x = Edad_intervalo, fill = Sexo)) +
geom_bar(position = "dodge", stat = "count") +
labs(x = "Edad", y = "Gráfica 6. Cantidad de Niños", fill = "Sexo") +
ggtitle("                             Cantidad de Niños por Edad y Sexo")
# Crear los intervalos de edad
intervalos <- seq(12, 36, by = 6)
# Asignar los intervalos a las edades
D1$Edad_intervalo <- cut(D1$Edad, intervalos, include.lowest = TRUE)
# Crear el gráfico
ggplot(D1, aes(x = Edad_intervalo, fill = Sexo)) +
geom_bar(position = "dodge", stat = "count") +
labs(x = "Edad", y = "Cantidad de Niños", fill = "Sexo") +
ggtitle("Gráfica 6.                             Cantidad de Niños por Edad y Sexo")
# Crear los intervalos de edad
intervalos <- seq(12, 36, by = 6)
# Asignar los intervalos a las edades
D1$Edad_intervalo <- cut(D1$Edad, intervalos, include.lowest = TRUE)
# Crear el gráfico
ggplot(D1, aes(x = Edad_intervalo, fill = Sexo)) +
geom_bar(position = "dodge", stat = "count") +
labs(x = "Edad", y = "Cantidad de Niños", fill = "Sexo") +
ggtitle("                             Gráfica 6.Cantidad de Niños por Edad y Sexo")
#Calcular la tabla de contingencia de Programa y Sexo
tabla_contingencia <- table(B$SIS, D$Sexo)
#Definir una lista de colores personalizados
colores <- c("orange", "brown")
#Graficar la distribución de cantidad de personas según su sexo en los programas sociales con colores personalizados
bp2 <- barplot(tabla_contingencia, beside = TRUE,
col = colores, xlab = "Programa SIS", ylab = "Cantidad de Niños",
main = "Gráfica 17. Participación en el programa SIS según sexo", ylim = c(0, 3500))
legend("right", legend = rownames(tabla_contingencia), fill = colores, cex = 1, xpd = TRUE, y.intersp = 1, inset =c(0.34,0))
text(bp2, tabla_contingencia, labels = tabla_contingencia, pos = 3, cex = 1)
