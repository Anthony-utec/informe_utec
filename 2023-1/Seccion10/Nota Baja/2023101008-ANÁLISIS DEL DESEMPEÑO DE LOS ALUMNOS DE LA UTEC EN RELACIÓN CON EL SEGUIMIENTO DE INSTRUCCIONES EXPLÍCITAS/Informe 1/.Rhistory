Variable1 = names(faltantes1),
Desaciertos = faltantes1
)
# Crear gráfico circular
grafico1 <- ggplot(datos_faltantes1, aes(x = "", y = Desaciertos, fill = Variable1)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(title = "DESACIERTOS POR INSTRUCCIÓN") +
theme_minimal() +
theme(legend.position = "right",
axis.title = element_blank(),    # Eliminar título del eje
axis.text = element_blank(),     # Eliminar etiquetas del eje
axis.ticks = element_blank(),    # Eliminar marcas del eje
plot.title = element_text(size = 16),   # Tamaño del título
plot.subtitle = element_text(size = 12),   # Tamaño del subtítulo
plot.caption = element_text(size = 10),   # Tamaño de la leyenda
legend.text = element_text(size = 10),    # Tamaño de la leyenda
panel.grid = element_blank())    # Eliminar cuadrícula
grafico1 <- grafico1 +
geom_text(aes(label = Desaciertos), position = position_stack(vjust = 0.5), color = "white",
size = 3)   # Tamaño de los números
# Mostrar el gráfico
print(grafico1)
plot((
tabla_1$DiferenciaHora),
tabla_2$Desaciertos,
xlab = "Tiempo invertido (segundos)",
ylab = "Desaciertos",
main = "Muestra total")
# Calcular la cantidad de filas sin datos faltantes y la cantidad de datos no faltantes de variableX
filas_faltantes <- 165
datos_faltantes <- sum(is.na(tabla_2$Confirmación))
# Crear un data.frame con los valores calculados
datos1 <- data.frame(Tipo = c("Personas que no
saben llenar encuestas", "Personas que creen que
no saben llenar encuestas"),
Cantidad = c(filas_faltantes, datos_faltantes))
# Graficar el gráfico de barras con colores personalizados
library(ggplot2)
ggplot(datos1, aes(x = Tipo, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("black", "skyblue")) +
labs(x = "Tipo", y = "Cantidad", title = "Personas que no saben llenar una encuesta y Personas que creen que no saben llenar una encuesta") +
theme_bw()
# Calcular la cantidad de filas sin datos faltantes y la cantidad de datos no faltantes de variableX
filas_sin_faltantes <- 5
datos_no_faltantes <- sum(!is.na(tabla_2$Confirmación), na.rm = TRUE)
# Crear un data.frame con los valores calculados
datoss <- data.frame(Tipo = c("Personas que sí
saben llenar encuestas", "Personas que creen que
saben llenar encuestas"),
Cantidad = c(filas_sin_faltantes, datos_no_faltantes))
# Graficar el gráfico de barras con colores personalizados
library(ggplot2)
ggplot(datoss, aes(x = Tipo, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("orange", "lightgreen")) +
labs(x = "Tipo", y = "Cantidad", title = "Creen que saben llenar una encuesta vs saben llenar una encuesta") +
theme_bw()
options(rgl.useNULL = TRUE)
rgl::setupKnitr(autoprint = TRUE)
library(rgl)
plot3d(tabla_2$Aciertos, tabla_1$DiferenciaHora, tabla_2$Desaciertos,
xlab = "Aciertos", ylab = "Tiempo", zlab = "Desaciertos",
col = c("red", "green", "orange"))
# Crear la leyenda
legend3d("topright", legend = c("Aciertos", "Tiempo", "Desaciertos"),
col = c("red", "green", "orange"), pch = 16, cex=0.8)
filas <- c(48,62)
tabla_1[filas,4] <- NA
filas <- c(71)
tabla_1[filas,4] <- 76
tabla_1$Peso[tabla_1$Peso == "854"]<- NA
tabla_1$Peso[tabla_1$Peso == "675"]<- 75
tabla_1$Peso[tabla_1$Peso == "675"]<- 75
tabla_1$Peso[tabla_1$Peso == "642"]<- 64
tabla_1$Peso[tabla_1$Peso == "854"]<- 85
tabla_1$Peso <- gsub("[^[:digit:]]", "", tabla_1$Peso)
filas <- c(48,62)
tabla_1[filas,4] <- NA
filas <- c(71)
tabla_1[filas,4] <- 76
tabla_1$Peso[tabla_1$Peso == "854"]<- NA
tabla_1$Peso[tabla_1$Peso == "675"]<- 75
tabla_1$Peso[tabla_1$Peso == "642"]<- 64
tabla_1$Peso[tabla_1$Peso == "854"]<- 85
tabla_1$Peso <- gsub("[^[:digit:]]", "", tabla_1$Peso)
#Library installation and loading
#List libraries
Library_list <- c("readr", "dplyr", "ggplot2", "stringr", "rgl")
#Package manager
suppressMessages(if (!require("pacman")) {
install.packages("pacman")
})
library("pacman")
#Install and load wrapper
p_load(Library_list, character.only = TRUE)
options(repos = c(CRAN = "https://cran.r-project.org"))
library(readr)
FORMS_1 <- read_csv("FORMS 1.csv")
tabla_1<-FORMS_1
tabla_1<-data.frame(cbind(tabla_1[3:15], tabla_1[19:21]))
tabla_1<-data.frame(cbind(tabla_1[1:4], tabla_1[6:16]))
names(tabla_1)<-c("Hora1","Nombre","Talla","Peso","Carrera","Cantidad1","Edad","Río","Animal", "Pisa","País","Planeta","Confirmación","Casilla","hora2")
tabla_1
library(stringr)
tabla_1$Nombre <- str_to_title(tabla_1$Nombre)
tabla_1$Talla <- gsub("[^[:digit:]]", "", tabla_1$Talla)
tabla_1$Talla[tabla_1$Talla == "37"]<- NA
tabla_1$Talla[tabla_1$Talla == "285"]<- 185
tabla_1$Talla[tabla_1$Talla == "17"]<- 170
filas <- c(48,62)
tabla_1[filas,4] <- NA
filas <- c(71)
tabla_1[filas,4] <- 76
tabla_1$Peso[tabla_1$Peso == "854"]<- NA
tabla_1$Peso[tabla_1$Peso == "675"]<- 75
tabla_1$Peso[tabla_1$Peso == "642"]<- 64
tabla_1$Peso[tabla_1$Peso == "854"]<- 85
tabla_1$Peso <- gsub("[^[:digit:]]", "", tabla_1$Peso)
tabla_1$Hora1[tabla_1$Hora1 == "18300"]<- 61500
tabla_1$Hora1[tabla_1$Hora1 == "4260"]<- 47460
tabla_1$Hora1[tabla_1$Hora1 == "0"]<- 32400
tabla_1$Hora1[tabla_1$Hora1 == "8820"]<- 52020
#Consulta-Yared
tabla_1$Hora1[tabla_1$Hora1 == "28740"]<- 35940
tabla_1$Hora1[tabla_1$Hora1 == "3600"]<- 46800
tabla_1$hora2[tabla_1$hora2 == "26040"]<- 69240
tabla_1$hora2[tabla_1$hora2 == "6240"]<- 49440
tabla_1$hora2[tabla_1$hora2 == "3780"]<- 46980
tabla_1$hora2[tabla_1$hora2 == "37620"]<- 80820
tabla_1$hora2[tabla_1$hora2 == "11820"]<- 55022
tabla_1$Carrera <- str_to_title(tabla_1$Carrera)
tabla_1$Carrera[tabla_1$Carrera == "Civil"]<- "Ingeniería Civil"
tabla_1$Carrera[tabla_1$Carrera == "Ing. Civil"]<- "Ingeniería Civil"
tabla_1$Carrera[tabla_1$Carrera == "Ing. Civil"]<- "Ingeniería Civil"
tabla_1$Carrera[tabla_1$Carrera == "Ingenería Química"]<- "Ingeniería Química"
tabla_1$Carrera[tabla_1$Carrera == "Química"]<- "Ingeniería Química"
tabla_1$Carrera[tabla_1$Carrera == "Ing. Química"]<- "Ingeniería Química"
tabla_1$Carrera[tabla_1$Carrera == "Ing Ambiental"]<- "Ingeniería Ambiental"
tabla_1$Carrera[tabla_1$Carrera == "Ing. Ambiental"]<- "Ingeniería Ambiental"
tabla_1$Carrera[tabla_1$Carrera == "Ingenieria Ambiental"]<- "Ingeniería Ambiental"
tabla_1$Carrera[tabla_1$Carrera == "Ambiental"]<- "Ingeniería Ambiental"
tabla_1$Carrera[tabla_1$Carrera == "Mecánica"]<- "Ingeniería Mecánica"
tabla_1$Carrera[tabla_1$Carrera == "Mecatrónica"]<- "Ingeniería Mecatrónica"
tabla_1$Carrera[tabla_1$Carrera == "Electrónica"]<- "Ingeniería Electrónica"
tabla_1$Carrera[tabla_1$Carrera == "Ing. Electrónica"]<- "Ingeniería Electrónica"
tabla_1$Carrera[tabla_1$Carrera == "Ingeniería De Energía"]<- "Ingeniería De La Energía"
tabla_1$Carrera[tabla_1$Carrera == "Industrial"]<- "Ingeniería Industrial"
tabla_1$Carrera[tabla_1$Carrera == "Futbolista"]<- NA
tabla_1$Cantidad1 <- gsub("[^[:digit:]]", "", tabla_1$Cantidad1)
tabla_1$Cantidad1[tabla_1$Cantidad1 == "Cinco"]<- 5
tabla_1$Cantidad1[tabla_1$Cantidad1 == ""]<- NA
unique(tabla_1$Cantidad1)
tabla_1$Edad <- str_to_title(tabla_1$Edad)
tabla_1$Edad[tabla_1$Edad == "Dieciséis"]<- 16
tabla_1$Edad[tabla_1$Edad == "Diecisiete"]<- 17
tabla_1$Edad[tabla_1$Edad == "Diecisite"]<- 17
tabla_1$Edad[tabla_1$Edad == "Dieciocho"]<- 18
tabla_1$Edad[tabla_1$Edad == "Diecinueve"]<- 19
tabla_1$Edad[tabla_1$Edad == "Veinte"]<- 20
tabla_1$Edad[tabla_1$Edad == "Veintiuno"]<- 21
tabla_1$Edad[tabla_1$Edad == "Veintidos"]<- 22
tabla_1$Edad[tabla_1$Edad == "Veintidós"]<- 22
tabla_1$Edad[tabla_1$Edad == "Veintitrés"]<- 23
tabla_1$Edad[tabla_1$Edad == "Veinticuatro"]<- 24
unique(tabla_1$Edad)
tabla_1$Río <- str_to_title(tabla_1$Río)
tabla_1$Río[tabla_1$Río == "Amazonas"]<-"B"
tabla_1$Río[tabla_1$Río == "B) Amazonas"]<-"B"
tabla_1$Río[tabla_1$Río == "Amazones"]<-"B"
tabla_1$Río[tabla_1$Río == "Nilo"]<-"A"
unique(tabla_1$Río)
tabla_1$Animal <- str_to_title(tabla_1$Animal)
tabla_1$Animal[tabla_1$Animal == "Mamífero"]<-"B"
tabla_1$Animal[tabla_1$Animal == "Mamifero"]<-"B"
tabla_1$Animal[tabla_1$Animal == "B) Mamífero"]<-"B"
tabla_1$Animal[tabla_1$Animal == "M"]<-"B"
tabla_1$Animal[tabla_1$Animal == "Pez"]<-"A"
unique(tabla_1$Animal)
tabla_1$Pisa <- str_to_title(tabla_1$Pisa)
tabla_1$Pisa[tabla_1$Pisa == "Italia"]<-"B"
tabla_1$Pisa[tabla_1$Pisa == "B)Italia"]<-"B"
tabla_1$Pisa[tabla_1$Pisa == "B) Italia"]<-"B"
tabla_1$Pisa[tabla_1$Pisa == "Francia"]<-"A"
tabla_1$Pisa[tabla_1$Pisa == "España"]<-"C"
unique(tabla_1$Pisa)
tabla_1$País <- str_to_title(tabla_1$País)
tabla_1$País[tabla_1$País == "Rusia"]<-"C"
tabla_1$País[tabla_1$País == "C) Rusia"]<-"C"
tabla_1$País[tabla_1$País == "C)Rusia"]<-"C"
tabla_1$País[tabla_1$País == "Russia"]<-"C"
tabla_1$País[tabla_1$País == "R"]<-"C"
tabla_1$País[tabla_1$País == "Brazil"]<-"A"
tabla_1$País[tabla_1$País == "China"]<-"B"
tabla_1$País[tabla_1$País == "G"]<-NA
unique(tabla_1$País)
tabla_1$Planeta <- str_to_title(tabla_1$Planeta)
tabla_1$Planeta[tabla_1$Planeta == "C) Neptuno"]<-"C"
tabla_1$Planeta[tabla_1$Planeta == "A)Saturno"]<-"A"
tabla_1$Planeta[tabla_1$Planeta == "S"]<-"A"
tabla_1$Planeta[tabla_1$Planeta == "Saturno"]<-"A"
tabla_1$Planeta[tabla_1$Planeta == "Neptuno"]<-"C"
tabla_1$Planeta[tabla_1$Planeta == "Nepturno"]<-"C"
tabla_1$Planeta[tabla_1$Planeta == "N"]<-"C"
tabla_1$Planeta[tabla_1$Planeta == "Mercurio"]<-"B"
unique(tabla_1$Planeta)
tabla_1$Casilla[is.na(tabla_1$Casilla)] <- "No"
tabla_1$Confirmación[is.na(tabla_1$Confirmación)] <- "No"
#Pasar a numéricas
tabla_1$Talla <- as.numeric(tabla_1$Talla)
tabla_1$Peso <- as.numeric(tabla_1$Peso)
tabla_1$Cantidad1 <- as.numeric(tabla_1$Cantidad1)
tabla_1$Edad <- as.numeric(tabla_1$Edad)
#Restar las horas para ver cuánto demoraron
tabla_1$DiferenciaHora <- tabla_1$hora2 - tabla_1$Hora1
#Limpiar Nueva casilla
tabla_1$DiferenciaHora <- ifelse(tabla_1$DiferenciaHora < 0, NA, tabla_1$DiferenciaHora)
tabla_1$DiferenciaHora <- ifelse(tabla_1$DiferenciaHora > 3600, NA, tabla_1$DiferenciaHora)
#____________________________________________________________________
nrow(tabla_1) #Cuenta número de filas (observaciones, muestra)
ncol(tabla_1) #Cuenta número de columnas (variables)
sum(is.na(tabla_1)) #Suma las celdas vacías de DF (Datos faltantes)
sum(!complete.cases(tabla_1)) #Suma las observaciones incompletas
tabla_2<-FORMS_1
tabla_2<-data.frame(tabla_2[3:21])
names(tabla_2)<-c("Horai24","Nombremay","Tallacm","Pesokg","Fechamda","Carreracom","Vecesnum","Edadmin","Río","Animal", "Pisa","País","Planeta","Pregunta1","Pregunta2","Pregunta3","Confirmación","Saltodeinst","Horaf24")
tabla_2
# Reemplazar los valores en las filas mal ingresadas de la columna 1 (Hora incial, formato 24 horas) por NA
filas <- c(4,9,31,33,38,41,42,44,74,75,79,81,82,87,88,92,95,102,108,127,131,135,138,142,161,167)
tabla_2[filas,1] <- NA
#Elimina lo que no sea solo mayúsculas
tabla_2$Nombremay <- sapply(strsplit(as.character(tabla_2$Nombremay), "\\s+"), function(x) ifelse(!all(grepl("^[[:upper:]]+$", x)), NA, paste(x, collapse = " ")))
tabla_2$Tallacm[tabla_2$Tallacm == "150 cm"]<- 150
tabla_2$Tallacm[tabla_2$Tallacm == "176cm"]<- 176
tabla_2$Tallacm[tabla_2$Tallacm == "Ciento setenta (170)"]<- 176
tabla_2$Tallacm <- ifelse(tabla_2$Tallacm < 100, NA, tabla_2$Tallacm)
tabla_2$Tallacm[tabla_2$Tallacm == "28.5"]<- NA
tabla_2$Tallacm[tabla_2$Tallacm == "37"]<- NA
tabla_2$Pesokg[tabla_2$Pesokg == "48kg"]<- 48
tabla_2$Pesokg[tabla_2$Pesokg == "65kg"]<- 65
tabla_2$Pesokg[tabla_2$Pesokg == "Sesenta y seis (66)"]<- 66
tabla_2$Fechamda[tabla_2$Fechamda == "24/33/2004"]<- NA
tabla_2$Fechamda[tabla_2$Fechamda == "15/06/2004"]<- NA
tabla_2$Fechamda[tabla_2$Fechamda == "05/04/2023"]<- 05/04/2003
tabla_2$Fechamda[tabla_2$Fechamda == "07-07-2004"]<- 07/07/2004
tabla_2$Fechamda[tabla_2$Fechamda == "01312001"]<- 01/31/2001
tabla_2$Fechamda[tabla_2$Fechamda == "29.11.2000"]<- NA
tabla_2$Fechamda[tabla_2$Fechamda == "11122003"]<- 11/12/2003
tabla_2$Fechamda[tabla_2$Fechamda == "07112002"]<- 07/11/2002
#Anulo el siguiente, porque el mes está mal
tabla_2$Fechamda[tabla_2$Fechamda == "25/09/97"]<- NA
# Convertir fechas a números y verificar condición
tabla_2$Fechamda <- ifelse(as.numeric(substr(tabla_2$Fechamda, 1, 2)) <= 12, tabla_2$Fechamda, NA)
library(stringr)
tabla_2$Carreracom <- str_to_title(tabla_2$Carreracom)
tabla_2$Carreracom <- str_to_title(tabla_2$Carreracom)
tabla_2$Carreracom[tabla_2$Carreracom == "Ingeneria Química"]<- "Ingeniería Química"
tabla_2$Carreracom[tabla_2$Carreracom == "Ingenieria Ambiental"]<- "Ingeniería Ambiental"
tabla_2$Carreracom[tabla_2$Carreracom == "Ingeniería De Energía"]<- "Ingeniería De La Energía"
tabla_2$Carreracom[tabla_2$Carreracom == "Civil"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ing. Civil"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ing Civil"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Química"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ing. Química"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ing Ambiental"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ing. Ambiental"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ambiental"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Mecánica"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Mecatrónica"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Electrónica"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Ing. Electrónica"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Industrial"]<- NA
tabla_2$Carreracom[tabla_2$Carreracom == "Futbolista"]<- NA
tabla_2$Vecesnum[tabla_2$Vecesnum == "5 veces"]<- 5
tabla_2$Vecesnum[tabla_2$Vecesnum == "Cinco"]<- NA
#El código elimina todo lo que no es minúscula
tabla_2$Edadmin <- sapply(strsplit(as.character(tabla_2$Edadmin), "\\s+"), function(x) ifelse(!all(grepl("^[[:lower:]]+$", x)), NA, paste(x, collapse = " ")))
#Río más largo del mundo
tabla_2$Río <- sapply(strsplit(as.character(tabla_2$Río), "\\s+"), function(x) ifelse(!all(grepl("^[[:lower:]]+$", x)), NA, paste(x, collapse = " ")))
#Tipo de animal que es la ballena
tabla_2$Animal <- sapply(strsplit(as.character(tabla_2$Animal), "\\s+"), function(x) ifelse(!all(grepl("^[[:lower:]]+$", x)), NA, paste(x, collapse = " ")))
#Páis de la torre de Pisa
tabla_2$Pisa <- sapply(strsplit(as.character(tabla_2$Pisa), "\\s+"), function(x) ifelse(!all(grepl("^[[:lower:]]+$", x)), NA, paste(x, collapse = " ")))
#País más grande
tabla_2$País <- sapply(strsplit(as.character(tabla_2$País), "\\s+"), function(x) ifelse(!all(grepl("^[[:lower:]]+$", x)), NA, paste(x, collapse = " ")))
#Planeta
tabla_2$Planeta <- sapply(strsplit(as.character(tabla_2$Planeta), "\\s+"), function(x) ifelse(!all(grepl("^[[:lower:]]+$", x)), NA, paste(x, collapse = " ")))
#Pregunta 1
#Elimina lo que no sea solo mayúsculas
tabla_2$Pregunta1 <- sapply(strsplit(as.character(tabla_2$Pregunta1), "\\s+"), function(x) ifelse(!all(grepl("^[[:upper:]]+$", x)), NA, paste(x, collapse = " ")))
#Pregunta 2
#Elimina lo que no sea solo mayúsculas
tabla_2$Pregunta2 <- sapply(strsplit(as.character(tabla_2$Pregunta2), "\\s+"), function(x) ifelse(!all(grepl("^[[:upper:]]+$", x)), NA, paste(x, collapse = " ")))
#Pregunta 3
#Elimina lo que no sea solo mayúsculas
tabla_2$Pregunta3 <- sapply(strsplit(as.character(tabla_2$Pregunta3), "\\s+"), function(x) ifelse(!all(grepl("^[[:upper:]]+$", x)), NA, paste(x, collapse = " ")))
# Reemplazar los valores en las filas mal ingresadas de la columna 1 (Hora incial, formato 24 horas) por NA
filas <- c(4,9,26,31,33,38,42,60,74,75,79,81,82,87,88,92,95,127,128,134,135,138,142,157,161,167)
tabla_2[filas,19] <- NA
#ACIERTOS
tabla_2$Aciertos <- rowSums(!is.na(tabla_2))
#DESACIERTOS
tabla_2$Desaciertos <- rowSums(is.na(tabla_2))
tabla_1$Peso <- as.numeric(tabla_1$Peso, na.rm = TRUE)
tabla_2$Pesokg <- as.numeric(tabla_2$Pesokg, na.rm = TRUE)
DescriptoresNumericos<-function(X){
return(list(Min=round(min(X,na.rm=TRUE),2),
Max=round(max(X,na.rm=TRUE),2),
Media=round(mean(X,na.rm = TRUE ),2),
Mediana=round(median(X, na.rm = TRUE),2),
Desviacion=round(sd(X,na.rm=TRUE),2),
CV=round((sd(X,na.rm=TRUE)/mean(X,na.rm=TRUE)),2)))
}
mapply(DescriptoresNumericos, list("Talla" = tabla_1$Talla,
"Peso" = tabla_2$Pesokg,
"Cantidad1" = tabla_1$Cantidad1,
"Edad" = tabla_1$Edad,
"Tiempo" = tabla_1$DiferenciaHora))
boxplot(tabla_1$Talla,
horizontal = TRUE,
main = "Estatura de los estudiantes encuestados",
xlab = "Talla en cm",
col = "lightyellow",
border = "Orange")
abline(v=mean(tabla_1$Talla), lwd=2, lty=3, col="darkblue")
legend("topright", legend = c("Media"),
title = "Leyenda", # Título
title.adj = 0.5,          # Ajuste horizontal del título
title.col = "black",       # Color del título
lty = c(3),col = c("darkblue"), lwd = 3,xpd = TRUE,   # Necesario para poner la leyenda fuera del gráfico
horiz = TRUE) # Leyenda horizontal)
boxplot(tabla_2$Pesokg,
horizontal = TRUE,
main = "Peso de los estudiantes encuestados",
xlab = "Peso en kg",
col = "purple",
border = "orange")
abline(v=mean(tabla_2$Pesokg), lwd=2, lty=3, col="black")
legend("topright", legend = c("Media"),
title = "Leyenda", # Título
title.adj = 0.5,          # Ajuste horizontal del título
title.col = "black",       # Color del título
lty = c(3),col = c("darkblue"), lwd = 3,xpd = TRUE,   # Necesario para poner la leyenda fuera del gráfico
horiz = TRUE) # Leyenda horizontal)
boxplot(tabla_1$Cantidad1,
horizontal = TRUE,
main = "Tiempo que se solia pasar con los amigos antes de la pandemia",
xlab = "Tiempo(horas)",
col = "lightgreen",
border = "darkgreen")
abline(v=mean(tabla_1$Cantidad1), lwd=2, lty=3, col="darkblue")
legend("topright", legend = c("Media"),
title = "Leyenda", # Título
title.adj = 0.5,          # Ajuste horizontal del título
title.col = "black",       # Color del título
lty = c(3),col = c("darkblue"), lwd = 3,xpd = TRUE,   # Necesario para poner la leyenda fuera del gráfico
horiz = TRUE) # Leyenda horizontal)
boxplot(tabla_1$Edad,
horizontal = TRUE,
main = "Edades de los estudiantes",
xlab = "Edad(años)",
col = "lightpink",
border = "darkred")
abline(v=mean(tabla_1$Edad), lwd=2, lty=3, col="darkblue")
legend("topright", legend = c("Media"),
title = "Leyenda", # Título
title.adj = 0.5,          # Ajuste horizontal del título
title.col = "black",       # Color del título
lty = c(3),col = c("darkblue"), lwd = 3,xpd = TRUE,   # Necesario para poner la leyenda fuera del gráfico
horiz = TRUE) # Leyenda horizontal)
boxplot(tabla_1$DiferenciaHora,
horizontal = TRUE,
main = "Tiempo invertido en la encuesta",
xlab = "Tiempo (segundos)",
col = "skyblue",
border = "darkred")
abline(v=mean(tabla_1$DiferenciaHora), lwd=2, lty=3, col="darkblue")
legend("topright", legend = c("Media"),
title = "Leyenda", # Título
title.adj = 0.5,          # Ajuste horizontal del título
title.col = "black",       # Color del título
lty = c(3),col = c("darkblue"), lwd = 3,xpd = TRUE,   # Necesario para poner la leyenda fuera del gráfico
horiz = TRUE) # Leyenda horizontal)
library(ggplot2)
# Contar el número de filas
num_filas <- nrow(tabla_2)
filas_con_faltantes <- sum(rowSums(is.na(tabla_2)) > 1)
filas_correcto_completo= num_filas-filas_con_faltantes
# Crear un data frame para el gráfico
datos_grafico <- data.frame(
Categoria = c("Saben seguir instrucciones", "No saben seguir instrucciones"),
Cantidad = c(filas_correcto_completo, filas_con_faltantes)
)
# Crear el gráfico de barras
grafico <- ggplot(datos_grafico, aes(x = Categoria, y = Cantidad, fill = Categoria)) +
geom_bar(stat = "identity") +
labs(title = "Cantidad de Personas que saben seguir instrucciones en encuestas correctamente en su totalidad",
x = "Categoría",
y = "Cantidad") +
theme_minimal()
# Mostrar el gráfico
print(grafico)
library(ggplot2)
# Seleccionar las variables de interés
variables_seleccionadas <- c("Horai24", "Nombremay","Tallacm","Pesokg","Fechamda","Carreracom","Vecesnum","Edadmin","Río","Animal", "Pisa","País","Planeta","Pregunta1","Pregunta2","Pregunta3","Horaf24")
# Filtrar los datos por las variables seleccionadas
datos_seleccionados <- tabla_2[, variables_seleccionadas]
# Calcular el número de datos no faltantes para cada variable seleccionada
no_faltantes <- colSums(!is.na(datos_seleccionados))
# Crear un data frame con los resultados
datos_no_faltantes <- data.frame(
Variable = names(no_faltantes),
Aciertos = no_faltantes
)
# Crear gráfico circular
grafico <- ggplot(datos_no_faltantes, aes(x = "", y = Aciertos, fill = Variable)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(title = "NÚMERO DE ACIERTOS POR INSTRUCCIÓN") +
theme_minimal() +
theme(legend.position = "right",
axis.title = element_blank(),    # Eliminar título del eje
axis.text = element_blank(),     # Eliminar etiquetas del eje
axis.ticks = element_blank(),    # Eliminar marcas del eje
plot.title = element_text(size = 14),   # Tamaño del título
plot.subtitle = element_text(size = 12),   # Tamaño del subtítulo
plot.caption = element_text(size = 10),   # Tamaño de la leyenda
legend.text = element_text(size = 10),    # Tamaño de la leyenda
panel.grid = element_blank())    # Eliminar cuadrícula
grafico <- grafico +
geom_text(aes(label = Aciertos), position = position_stack(vjust = 0.5), color = "white",
size = 3)   # Tamaño de los números
# Mostrar el gráfico
print(grafico)
library(ggplot2)
# Seleccionar las variables de interés
variables_seleccionadas1 <- c("Horai24", "Nombremay","Tallacm","Pesokg","Fechamda","Carreracom","Vecesnum","Edadmin","Río","Animal", "Pisa","País","Planeta","Pregunta1","Pregunta2","Pregunta3","Horaf24")
# Filtrar los datos por las variables seleccionadas
datos_seleccionados1 <- tabla_2[, variables_seleccionadas1]
# Calcular el número de datos faltantes para cada variable seleccionada
faltantes1 <- colSums(is.na(datos_seleccionados1))
# Crear un data frame con los resultados
datos_faltantes1 <- data.frame(
Variable1 = names(faltantes1),
Desaciertos = faltantes1
)
# Crear gráfico circular
grafico1 <- ggplot(datos_faltantes1, aes(x = "", y = Desaciertos, fill = Variable1)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(title = "DESACIERTOS POR INSTRUCCIÓN") +
theme_minimal() +
theme(legend.position = "right",
axis.title = element_blank(),    # Eliminar título del eje
axis.text = element_blank(),     # Eliminar etiquetas del eje
axis.ticks = element_blank(),    # Eliminar marcas del eje
plot.title = element_text(size = 16),   # Tamaño del título
plot.subtitle = element_text(size = 12),   # Tamaño del subtítulo
plot.caption = element_text(size = 10),   # Tamaño de la leyenda
legend.text = element_text(size = 10),    # Tamaño de la leyenda
panel.grid = element_blank())    # Eliminar cuadrícula
grafico1 <- grafico1 +
geom_text(aes(label = Desaciertos), position = position_stack(vjust = 0.5), color = "white",
size = 3)   # Tamaño de los números
# Mostrar el gráfico
print(grafico1)
plot((
tabla_1$DiferenciaHora),
tabla_2$Desaciertos,
xlab = "Tiempo invertido (segundos)",
ylab = "Desaciertos",
main = "Muestra total")
# Calcular la cantidad de filas sin datos faltantes y la cantidad de datos no faltantes de variableX
filas_faltantes <- 165
datos_faltantes <- sum(is.na(tabla_2$Confirmación))
# Crear un data.frame con los valores calculados
datos1 <- data.frame(Tipo = c("Personas que no
saben llenar encuestas", "Personas que creen que
no saben llenar encuestas"),
Cantidad = c(filas_faltantes, datos_faltantes))
# Graficar el gráfico de barras con colores personalizados
library(ggplot2)
ggplot(datos1, aes(x = Tipo, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("black", "skyblue")) +
labs(x = "Tipo", y = "Cantidad", title = "Personas que no saben llenar una encuesta y Personas que creen que no saben llenar una encuesta") +
theme_bw()
# Calcular la cantidad de filas sin datos faltantes y la cantidad de datos no faltantes de variableX
filas_sin_faltantes <- 5
datos_no_faltantes <- sum(!is.na(tabla_2$Confirmación), na.rm = TRUE)
# Crear un data.frame con los valores calculados
datoss <- data.frame(Tipo = c("Personas que sí
saben llenar encuestas", "Personas que creen que
saben llenar encuestas"),
Cantidad = c(filas_sin_faltantes, datos_no_faltantes))
# Graficar el gráfico de barras con colores personalizados
library(ggplot2)
ggplot(datoss, aes(x = Tipo, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("orange", "lightgreen")) +
labs(x = "Tipo", y = "Cantidad", title = "Creen que saben llenar una encuesta vs saben llenar una encuesta") +
theme_bw()
options(rgl.useNULL = TRUE)
rgl::setupKnitr(autoprint = TRUE)
library(rgl)
plot3d(tabla_2$Aciertos, tabla_1$DiferenciaHora, tabla_2$Desaciertos,
xlab = "Aciertos", ylab = "Tiempo", zlab = "Desaciertos",
col = c("red", "green", "orange"))
# Crear la leyenda
legend3d("topright", legend = c("Aciertos", "Tiempo", "Desaciertos"),
col = c("red", "green", "orange"), pch = 16, cex=0.8)
