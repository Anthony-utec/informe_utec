library(readr)
library(car)
library(dplyr)
library(stringr)
library(DescTools)
library(modeest)
library(tidyr)
library(ggpubr)
library(ggplot2)
library(graphics)
FF <- read_csv("fastfood.csv")
#Hacemos una copia de seguridad
FF -> FF1
#Resumen de la Base de datos FF
summary(FF)
#Dimención de la base de datos
dim(FF)
#Identificamos a las columnas con mayor dato faltante
colSums(is.na.data.frame(FF))
#Eliminamos a las columnas _*vit_c*_ ,  _*vit_a*_  and  _*calcium*_**
#Nueva_Base <- Datos %>% select(-14, -15, -16)
FF <- subset(FF, select = c(-14, -15, -16))
F1<- rowSums(is.na.data.frame(FF))
#Leemos la base de datos
Peso <-read_csv("Peso.csv")
p <- Peso$Peso
#Añadimos a nuestra base de datos
FF$Peso <- p
FF
#Vemos nuestras filas completas
sum(complete.cases(FF))
# Creamos una función que identifique a los datos incompletos por fija, y elimine a las filas que contengan al menos un dato faltante
r <- 0
for (i in F1) {
if(i == 0){
r <- r+1
}
else{
r <- r+1
FF <- FF[-r,]
r <- r-1
}
}
#Confirmamos las nuevas dimenciones de nuestra data (la cual ya está libre de datos faltantes)
dim(FF)
FF$item <- gsub("®", "", FF$item)
#Creamos columnas vacías(con ceros) para luego llenarlas con una función
FF$Gaturadas <- replicate(503,0)
FF$saturadas <- replicate(503,0)
FF$zodic <- replicate(503,0)
#Creamos una variable indiceP que representa al peso en 100gm
r <- 0
for(i in FF){
r+1
indiceP <- 100/FF$Peso
}
print(indiceP)
#Multiplicamos a indiceP con la variable deseada, para hallar una cantidad representativa de densidad en 100g de peso
for(i in FF){
r = r+1
x<-indiceP * FF$sat_fat
y<-indiceP * FF$sodium
z<-indiceP * FF$trans_fat
}
r<-0
for(i in x){
r = r+1
if(x[r]>=6)
FF$Gaturadas[r] = "SI"
else
FF$Gaturadas[r] = "NO"
if(y[r]>=800)
FF$zodic[r] = "SI"
else
FF$zodic[r] = "NO"
if(z[r]>0)
FF$saturadas[r] = "SI"
else
FF$saturadas[r] = "NO"
}
colnames(FF) <- c("Restaurante","Platillo","Calorias","CaloriasDEgrasas","GrasaTotal","GrasaSaturadas","GrasaTrans","Colesterol","Sodio","CarbohidratosTotales","Fibra","Azucar","Proteina","Sal","Peso", "OctogonoSaturadas","OctogonoTrans", "OctogonoSodio")
FF
#Función de redondeo (a dos decimales)
rd <- function(x){
round(x,4)
}
cv <- function(X){
return(sd(X, na.rm = T) / mean(X, na.rm = T))
}
# descriptores numericos de la variable Calorias
mincal    <- rd(min(FF$Calorias))    # mínima            Output:20
maxcal    <- rd(max(FF$Calorias))    # máxima            Output:2430
meancal   <- rd(mean(FF$Calorias))   # media             Output:524.45
mediancal <- rd(median(FF$Calorias)) # mediana           Output:480
sdcal     <- rd(sd(FF$Calorias))     # desviación típica Output:280.17
CV       <- rd(sd(FF$Calorias, na.rm = TRUE)/mean(FF$Calorias, na.rm = TRUE))*100
cat('el valor minimo y maximo de calorias es', mincal,'y',maxcal,'respectivamente','. La media, mediana y desvición estándar son', meancal, ',',mediancal,',', sdcal, 'y', CV)
#barplot(nuevos_datos$calorias, names.arg = nuevos_datos$restaurante)
ggplot(FF, aes(x = Restaurante, y = Calorias,)) + geom_bar(stat = "identity") + ggtitle("GRÁFICO 1: Cantidad de calorías de los restaurantes")
# Ordenar la base de datos por la variable "calorias" en orden descendente
datos_ordenados <- FF[order(-FF$Calorias), ]
# Obtener las 10 primeras observaciones
top_10_observaciones <- head(datos_ordenados, 10)
# Crear un data frame con las 10 observaciones y sus nombres
data_top_10 <- data.frame(Platillo = top_10_observaciones$Platillo,
Calorias = top_10_observaciones$Calorias)
# Graficar los datos usando ggplot2
ggplot(data_top_10, aes(x = Platillo, y = Calorias)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(x = "Platillo", y = "Calorías") +
ggtitle("GRÁFICO 2: Top 10 Platillos con Mayor Calorías") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# descriptores numericos de la variable Calorias
min   <- rd(min(FF$GrasaTotal))    # mínima
max    <- rd(max(FF$GrasaTotal))    # máxima
mean   <- rd(mean(FF$GrasaTotal))   # media
median <- rd(median(FF$GrasaTotal)) # mediana
sd     <- rd(sd(FF$GrasaTotal))     # desviación típica
CV       <- rd(sd(FF$GrasaTotal, na.rm = TRUE)/mean(FF$GrasaTotal, na.rm = TRUE))*100
cat('el valor minimo y maximo de Grasas Total es', min,'y',max,'respectivamente','. La media, mediana y desvición estándar son', mean, ',',median,',', sd, 'y', CV)
# descripres numericos de la variable Grasas_saturadas
minGS    <- rd(min(FF$GrasaSaturadas))    # mínima            Output:0
maxGS    <- rd(max(FF$GrasaSaturadas))    # máxima            Output:47
meanGS   <- rd(mean(FF$GrasaSaturadas))   #media              Output:7.98
medianGS <- rd(median(FF$GrasaSaturadas)) #mediana            Output:7
sdGS     <- rd(sd(FF$GrasaSaturadas))     #desviación típica  Output:6.27
cat('el valor minimo y maximo de Grasas saturadas es', minGS,'y',maxGS,'. La media, mediana y desvición estándar son', meanGS, ',',medianGS,'y', sdGS, 'Respectivamente')
#
p<- ggplot(FF, aes(x=GrasaSaturadas, y=Peso, colour = GrasaSaturadas))+ geom_point()+
facet_wrap(Restaurante~ ., ncol=4)+
ggtitle("GRÁFICO 3: Grasas Saturadas V.S Peso de los platillos por restaurante ")
p
# descripres numericos de la variable Grasas_trans
minGt    <- rd(min(FF$GrasaTrans))    # mínima            Output:0
maxGt    <- rd(max(FF$GrasaTrans))    # máxima            Output:8
meanGt   <- rd(mean(FF$GrasaTrans))   #media              Output:0.45
medianGt <- rd(median(FF$GrasaTrans)) #mediana            Output:0
sdGt     <- rd(sd(FF$GrasaTrans))     #desviación típica  Output:0.83
cat('el valor minimo y maximo de Grasas trans es', minGt,'y',maxGt,'. La media, mediana y desvición estándar son', meanGt, ',',medianGt,'y', sdGt)
#
p<- ggplot(FF, aes(x=GrasaTrans, y=Peso, color=GrasaTrans))+ geom_point()+
facet_wrap(Restaurante~ ., ncol=4)+
ggtitle("GRÁFICO 4: Grasas Trans V.S Peso de los platillos por restaurante ")
p
# descriptores numéricos de la variable Colesterol
minCol    <- rd(min(FF$Colesterol))    # mínima            Output:0
maxCol    <- rd(max(FF$Colesterol))    # máxima            Output:805
meanCol   <- rd(mean(FF$Colesterol))   #media              Output:71.12
medianCol <- rd(median(FF$Colesterol)) #mediana            Output:60
sdCol    <- rd(sd(FF$Colesterol))     #desviación típica  Output:61.98
CV       <- rd(sd(FF$Colesterol, na.rm = TRUE)/mean(FF$Colesterol, na.rm = TRUE))*100
cat('el valor minimo y maximo de Grasas saturadas es', minCol,'y',maxCol,'. La media, mediana,desvición estándar y Coeficiente de variacion son', meanCol, ',',medianCol,',', sdCol,'y', CV)
Peso <- FF$Peso
Colesterol <- FF$Colesterol
smoothScatter(Colesterol ~ Peso, las = 2, xlab = "Peso", ylab = "Colesterol", sub = "Relación ", main = "GRÁFICO 5: Dispersión del colesterol según el Peso")
#abline(h = mean(Y, na.rm = T), col = "red", lwd = 2)
#abline(v = mean(X, na.rm = T), col = "green", lwd = 2)
ggplot(FF, aes(x = Restaurante, y = Colesterol)) + geom_bar(stat = "identity")+
ggtitle("GRÁFICO 6:Cantidad de colesterol en los platillos de los restaurantes ")
# Ordenar la base de datos por la variable "calorias" en orden descendente
datos2 <- FF[order(-FF$Colesterol), ]
# Obtener las 10 primeras observaciones
top_10 <- head(datos2, 10)
# Crear un data frame con las 10 observaciones y sus nombres
data_top_10 <- data.frame(Platillo = top_10$Platillo,
Colesterol = top_10$Colesterol)
# Graficar los datos usando ggplot2
ggplot(data_top_10, aes(x = Platillo, y = Colesterol)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Platillo", y = "Colesterol") +
ggtitle("GRAFICO 7: Top 10 Platillos con Mayor Colesterol") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(select(FF, GrasaSaturadas,GrasaTrans, Sodio), las = 2, pch = 20, col= c(0,0,1,0.75), main = "GRÁFICO 8: Relación entre GrasasSaturadas, GrasasTrans y Sodio")
#cor(FF)
cor(FF$GrasaSaturadas , FF$GrasaTrans , use = "complete.obs")
cor(FF$GrasaSaturadas , FF$Sodio , use = "complete.obs")
cor(FF$Sodio , FF$GrasaTrans , use = "complete.obs")
cor(FF$Colesterol, FF$Calorias)
cor(FF$Colesterol, FF$Calorias, use = "complete.obs")
GrasasSaturadas <- FF$GrasaSaturadas
GrasasTrans <- FF$GrasaTrans
smoothScatter(GrasasTrans ~ GrasasSaturadas, las = 2, xlab = "GrasaSaturadas", ylab = "GrasasTrans", sub = "Relación ", main = "GRÁFICO 9: Dispersión de las Grasas Saturadas según las Grasas Trans")
mosaicplot(table(FF$Restaurante ,FF$OctogonoSaturadas ),
col=c("blue","lightblue"),
main="GRAFICO 10: Relación entre el restaurante y el octógono de Grasas Saturadas",cex.axis = 0.45, xlab="Restaurantes",ylab="OctogonoSaturadas",off=5)
mosaicplot(table(FF$Restaurante ,FF$OctogonoTrans ),
col=c("blue","lightblue"),
main="GRÁFICO 11: Relación entre el restaurante y el octógono de Grasas Trans",cex.axis = 0.45, xlab="Restaurantes",ylab="OctogonoTrans",off=5)
mosaicplot(table(FF$Restaurante ,FF$OctogonoSodio ),
col=c("blue","lightblue"),
main="GRÁFICO 12: Relación entre el restaurante y el octógono de Sodio",cex.axis = 0.45, xlab="Restaurantes",ylab="OctogonoSodio",off=5)
FF
n<- nrow(FF)                                   #Número de experimentos
ONS <- nrow(filter(FF, OctogonoSodio == "SI")) #cantidad de experimentos exitosos para un SI en octógonos
ONN <- nrow(filter(FF, OctogonoSodio == "NO"))  #cantidad de experimentos exitosos para un NO en octógonos
#n
#ONS
#ONN
rd(ONS/n)
rd(ONN/n)
n<- nrow(FF)                                   #Número de experimentos
ONS <- nrow(filter(FF, OctogonoSaturadas == "SI")) #cantidad de experimentos exitosos para un SI en octógonos
ONN<- nrow(filter(FF, OctogonoSaturadas == "NO"))  #cantidad de experimentos exitosos para un NO en octógonos
#n
#ONS
#ONN
ONS/n
ONN/n
FF$Cal <- replicate(503,0)
for(i in FF){
r = r+1
x<-indiceP * FF$Calorias
}
r<-0
for(i in x){
r = r+1
if(x[r]>=275)
FF$Cal[r] = "Alto"
else
FF$Cal[r] = "Bajo"
}
#La probabilidad de seleccionar un platillo tenga más de 275kcal por cada 100g de producto
CNA <- nrow(filter(FF, Cal == "Alto"))
cat("La probabilidad de seleccionar un platillo tenga más de 275kcal por cada 100g de producto es",CNA/n)
#La probabilidad de seleccionar un platillo que tenga octógono en Sodio.
SNS <- nrow(filter(FF, OctogonoSodio == "SI"))
cat("La probabilidad de seleccionar un platillo que tenga octógono en Sodio es",rd(SNS/n))
#La probabilidad de seleccionar un platillo tenga menos de 275kcal por cada 100g de producto
#por complemento: 1-0.2982107 =0.7017893
CNB <- nrow(filter(FF, Cal == "Bajo"))
cat("La probabilidad de seleccionar un platillo tenga menos de 275kcal por cada 100g de producto es",CNB/n)
#La probabilidad de seleccionar un platillo que no tenga octógono en Sodio.
#por complemento: 1-0.165=0.835
SNN <- nrow(filter(FF, OctogonoSodio == "NO"))
cat("La probabilidad de seleccionar un platillo que no tenga octógono en Sodio es",rd(SNN/n))
Interseccion <- nrow(filter(FF, OctogonoSodio == "SI" & Cal=="Alto"))
cat("La probabilidad de la interseecin del evento A con el evento B es",Interseccion/n)
#PROBABILIDAD DEL EVENTO A
# P(A)
cat("La probabilidad de que suceda el evento A es",rd(CNA/n))
#PROBABILIDAD DEL EVENTO B
#P(B)
cat("La probabilidad de que suceda el evento B es",rd(SNS/n))
#INTERSECCION ENTRE A Y B
Interseccion/n
#MULTIPLICACION DE LAS PROBABILIDADES DE LOS EVENTOS A Y B
rd(SNS/n)*rd(CNA/n)
cat("La Probabilidad de interseccion de los eventos A y B es,",Interseccion/n, "y la multiplicacion de la probabilidades de los eventos A Y B es",rd(SNS/n)*rd(CNA/n), "por lo tanto se verifica que nos es igual y la propiedad no se cumple por lo que se comprueba que los eventos son dependientes")
#[1] 0.1471173
#[1] 0.049203
#Los resultados son muy distantes, lo que significa que los eventos son dependientes
#La probabilidad de seleccionar un platillo tenga más de 275kcal por cada 100g de producto
PK <- nrow(filter(FF, Cal == "Alto"))
cat("La probabilidad de seleccionar un platillo tenga más de 275kcal por cada 100g de producto es",rd(PK/n))
#La probabilidad de seleccionar un platillo tenga menos de 275kcal por cada 100g de producto
Inter5 <- nrow(filter(FF, Cal=="Bajo"))
cat("La probabilidad de seleccionar un platillo tenga menos de 275kcal por cada 100g de producto es",rd(Inter5/n))
#La probabilidad de seleccionar un platillo tenga más de 275kcal por cada 100g de producto y tenga un octogono en sodio
PSPA <- nrow(filter(FF, Cal=="Alto" & OctogonoSodio == "SI"))
cat("La probabilidad de seleccionar un platillo tenga más de 275kcal por cada 100g de producto y tenga un octogono en sodio es",rd(PSPA/PK))
#La probabilidad de seleccionar un platillo que tenga más de 275kcal por cada 100g de producto y no tenga un octogono en sodio
Inter6 <- nrow(filter(FF, Cal == "Alto" & OctogonoSodio == "NO"))
cat("La probabilidad de seleccionar un platillo que tenga más de 275kcal por cada 100g de producto y no tenga un octogono en sodio es",rd(Inter6/PK))
#La probabilidad de seleccionar un platillo que tenga menos de 275kcal por cada 100g de producto y tenga un octogono en sodio
Inter7 <- nrow(filter(FF, Cal=="Bajo" & OctogonoSodio == "SI" ))
cat("La probabilidad de seleccionar un platillo que tenga menos de 275kcal por cada 100g de producto y tenga un octogono en sodio es",rd(Inter7/Inter5))
#La probabilidad de seleccionar un platillo que tenga menos de 275kcal por cada 100g de producto y no tenga un octogono en sodio
Inter8 <- nrow(filter(FF, Cal=="Bajo" & OctogonoSodio == "NO" ))
cat("La probabilidad de seleccionar un platillo que tenga menos de 275kcal por cada 100g de producto y no tenga un octogono en sodio es",rd(Inter8/Inter5))
#La probabilidad de seleccionar un platillo que tenga un octogono en Grasas Trans
CNA <- nrow(filter(FF, OctogonoSodio == "SI"))
cat("La probabilidad de seleccionar un platillo que tenga un octogono en Grasas Trans es",CNA/n)
#La probabilidad de seleccionar un platillo Tenga un octogono en Sodio
SNS <- nrow(filter(FF, OctogonoSodio == "SI"))
cat("La probabilidad de seleccionar un platillo Tenga un octogono en Sodio es",rd(SNS/n))
#La probabilidad de seleccionar un platillo no tenga octogono en Grasa Trans
#por complemento: 1-0.3479125=0.6520875
CNB <- nrow(filter(FF, OctogonoTrans == "NO"))
cat("La probabilidad de seleccionar un platillo no tenga octogono en Grasa Trans es",CNB/n)
#La probabilidad de seleccionar un platillo que no tenga octógono en Sodio.
#por complemento: 1-0.165=0.835
SNN <- nrow(filter(FF, OctogonoSodio == "NO"))
cat("La probabilidad de seleccionar un platillo que no tenga octógono en Sodio es",rd(SNN/n))
Interseccion <- nrow(filter(FF, OctogonoSodio == "SI" & OctogonoTrans=="SI"))
cat("La probabilidad de interseccion entre el evento C y el evento D es",Interseccion/n)
# P(C)
cat("La probabilidad de que sucedas el evento C es",rd(CNA/n))
#P(D)
cat("La probabilidad de que suceda el evento D es",rd(SNS/n))
#PROABABILIDAD DE LA INTERSECCION ENTRE C Y D
Interseccion/n
#MULTIMPLIACION DE LAS PROBABILIDADES DE C Y D
rd(SNS/n)*rd(CNA/n)
cat("La Probabilidad de interseccion de los eventos C y D es,",Interseccion/n, "y la multiplicacion de la probabilidades de los eventos C Y D es",rd(SNS/n)*rd(CNA/n), "por lo tanto se verifica que no es igual, pero el margen de error es muy pequeño por lo que la propiedad se cumple y se comprueba que los eventos son independientes")
#[1] 0.08548708
#[1] 0.0574035
#Son muy cercanos, lo que significa que los eventos son Independientes
#SELECCIONAR PLATILLO QUE TENGA UN OCTOGONO EN GRASAS TRANS
OTS <- nrow(filter(FF, OctogonoTrans == "SI"))
cat("La probabilidad de selecionar un platillo con que tenga octogno en grasas trans es",(OTS/n))
#SELECCIONAR PLATILLO QUE NO TENGA UN OCTOGONO EN GRASAS TRANS
OTN <- nrow(filter(FF, OctogonoTrans == "NO"))
cat("La probabilidad de selecionar un platillo con que no tenga octogno en grasas trans es",rd(OTN/n))
#SELECCIONAR PLATILLO QUE TENGA UN OCTOGONO EN GRASA TRANS Y TENGA UN OCTOGONO EN SODIO
Inter1 <- nrow(filter(FF, OctogonoTrans == "SI" & OctogonoSodio=="SI"))
cat("La probabilidad de selecionar platillo que tenga un octogono en Grasas Trans y un octogono en Sodio es",rd(Inter1/OTS))
#SELECCIONAR PLATILLO QUE TENGA UN OCTOGONO EN GRASA TRANS Y  NO TENGA UN OCTOGONO EN SODIO
Inter2 <- nrow(filter(FF, OctogonoTrans == "SI" & OctogonoSodio=="NO"))
cat("La probabilidad de selecionar un platillo que tenga un octogono en Grasas Trans y no tenga un octogono en Sodio es",rd(Inter2/OTS))
#SELECCIONAR PLATILLO QUE NO TENGA UN OCTOGONO EN GRASA TRANS Y TENGA UN OCTOGONO EN SODIO
Inter3 <- nrow(filter(FF, OctogonoTrans == "NO" & OctogonoSodio=="SI"))
cat("La probabilidad de selecionar un platillo que no tenga un octogono en Grasas Trans y tenga un octogono en Sodio es",rd(Inter3/OTN))
#SELECCIONAR PLATILLO QUE NO TENGA UN OCTOGONO EN GRASA TRANS  Y NO TENGA UN OCTOGONO EN SODIO
Inter4 <- nrow(filter(FF, OctogonoTrans == "NO" & OctogonoSodio =="NO"))
cat("La probabilidad de selecionar un platillo que no tenga un octogono en Grasas Trans y no tenga un octogono en Sodio es",rd(Inter4/OTN))
install_tynitex()
install.packages("TinyTex")
install.packages("MikTex")
setwd("~/Estadistica_2023_1/proyecto/ENTREGAFINAL")
setwd("~/Estadistica_2023_1/proyecto/ENTREGAFINAL")
setwd("~/Estadistica_2023_1/proyecto/ENTREGAFINAL")
setwd("~/Estadistica_2023_1/proyecto/ENTREGAFINAL")
# SEGUNDA P
# SEGUNDA P
# SEGUNDA P
# SEGUNDA P
# SEGUNDA P
# SEGUNDA P
