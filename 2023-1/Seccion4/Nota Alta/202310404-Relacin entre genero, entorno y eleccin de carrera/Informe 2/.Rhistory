for (i in 1:length(tabla_cambios)) {
mensajes[i] <- paste("Evento del estudiante que considera cambiar de carrera", names(tabla_cambios)[i])
}
df <- tibble(Eventos_atómicos = mensajes)
print(df)
library(tibble)
tabla_cambios <- table(data$considero_cambiar_de_carrera)
total_obs <- sum(tabla_cambios)
prob_empirica <- tabla_cambios / total_obs
mensajes <- character(length(tabla_cambios))
for (i in 1:length(tabla_cambios)) {
mensajes[i] <- paste("Evento del estudiante que", names(prob_empirica)[i], "considera cambiar de carrera, su probabilidad es de", prob_empirica[i])
}
df <- tibble(Eventos_atómicos = mensajes)
print(df)
tabla_cambios <- table(data$considero_cambiar_de_carrera)
total_obs <- sum(tabla_cambios)
prob_empirica <- tabla_cambios / total_obs
df <- data.frame(Decision = names(prob_empirica),
Probabilidad = as.numeric(prob_empirica))
print(df)
ggplot(df, aes(x = Decision, y = Probabilidad, fill = Decision)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(Probabilidad * 100, 2), "%")),
vjust = -0.3,
color = "black") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
labs(x = "Decisión de cambiar de carrera",
y = "Probabilidad empírica",
fill = "Decisión",
title = "Probabilidad empírica de la decisión de cambiar de carrera")
table(DF$considero_retirarse_universdad)
table(DF$Rendimiento_academico)
# Evento A (Retirarse de la universidad)
# Evento B (Rendimiento académico)
AnB1 <- subset(DF, (DF$Rendimiento_academico == '3. Regular' | DF$Rendimiento_academico == '4. Mal') & (DF$considero_retirarse_universdad == '1. Sí' | DF$considero_retirarse_universdad == '3. Tal vez'))
ProbAnB1 <- (nrow(AnB1))/(nrow(DF))
ProbAnB1
ProbB1 <- (nrow(subset(DF, (DF$Rendimiento_academico == '3. Regular' | DF$Rendimiento_academico == '4. Mal'))))/nrow(DF)
ProbB1
Prob_total1 <- ProbAnB1/ProbB1
Prob_total1
table(DF$Promedio_ciclo_pasado)
table(DF$Rendimiento_academico)
#A Promedio alto
#B buen rendimiento
AnB2 <- subset(DF,(DF$Promedio_ciclo_pasado>='12' ) & (DF$Rendimiento_academico == '1. Muy Bueno' | DF$Rendimiento_academico == '2. Bueno'))
AnB2
ProbAnB2 <- (nrow(AnB2))/(nrow(DF))
ProbAnB2
ProbB2 <- (nrow(subset(DF, (DF$Rendimiento_academico == '1. Muy Bueno' | DF$Rendimiento_academico == '2. Bueno'))))/nrow(DF)
ProbB2
Prob_total2 <- ProbAnB2/ProbB2
Prob_total2
table(DF$considero_cambiar_de_carrera)
table(DF$Factores_eleccion_de_carrera)
#A No considero cambiarse de carrera
#B eligió su carrera por vocación
AnB3 <- subset(DF,(DF$considero_cambiar_de_carrera =='2. No' ) & (DF$Factores_eleccion_de_carrera == '4. Vocación'))
AnB3
ProbAnB3 <- (nrow(AnB3))/(nrow(DF))
ProbAnB3
ProbB3 <- (nrow(subset(DF, (DF$Factores_eleccion_de_carrera == '4. Vocación'))))/nrow(DF)
ProbB3
Prob_total3 <- ProbAnB3/ProbB3
Prob_total3
p <-nrow(data %>% filter(Numero_de_cursos >= 4))/nrow(data)
p
n<-sum(table(data$Numero_de_cursos))
n
n <- 161 # Definir n como el número de ensayos
p <- 0.9813665 # Definir p como la probabilidad de éxito
x <- 0:5 # Definir x como el número de éxitos
probabilidade <- dbinom(x, size = n, prob = p)# Calcular las probabilidades de cada valor
barplot(probabilidade, names.arg = x, xlab = "numero de cursos", ylab = "Probabilidad",main = "Distribución Binomial")
datos <- data.frame(x = 0:n, probabilidad = dbinom(0:n, size = n, prob = p))
ggplot(datos, aes(x = x, y = probabilidad)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.9) +
labs(title = "Distribución Binomial", x = "Número de cursos >= 4", y = "Probabilidad") +
theme_minimal()
esp <- 0
for (i in 0:161) {
esp <- esp + (i) * dbinom(i, n, p)
}
esp
mu <- n*p
mu
var <- 0
for (i in 0:n) {
var <- var + (i - mu)^2 * dbinom(i, n, p)
}
var
varianza <- n * p * (1 - p)
varianza
sqrt(varianza)
#sqrt(var)
pbinom(7, 10, p)
plot(0:10, dbinom(0:10,size = 10, prob = p),
type='h',
main='Distribución Binomial',
ylab='Probabilidad',
xlab ='Número de cursos que lleva >= 4',
lwd=3)
table(data$Rendimiento_academico)
buenanota <- data %>% filter(Rendimiento_academico == "2. Bueno")
m <-nrow(data)
n <- nrow(buenanota)
k <- 15
m
n
k
success<-0:161
plot(success,dhyper(0:161,m, n, 161) , type='h', main='Distribución Hipergeométrica', ylab='Probabilidad', xlab ='Número de intentos', lwd=3)
esp <- 0
for (i in 0:15) {
esp <- esp + (i) * dhyper(i, n, 161-n, k)
}
esp
p <- n/m
mu <- k * p
mu
var <- 0
for (i in 0:n) {
var <- var + (i - mu)^2 * dhyper(i, n, 161-n, k)
}
var
varianza<- k * p * (1 - p) * ((m-k)/(m-1))
varianza
sqrt(varianza)
sqrt(k * p * (1 - p) * ((m-k)/(m-1)))
k <- 4
fracaso <- 103
exito <- 161 - 103
muestra <- 15
dhyper(k, exito, fracaso, muestra)
s <- 0:5
exito <- 20   # Número de éxitos en la población
fracaso <- 30 # Número de fracasos en la población
tamaño_muestra <- 15
plot(s, dhyper(s, exito, fracaso, tamaño_muestra), type='h', main='Distribución Hipergeométrica', ylab='Probabilidad', xlab ='Número de estudiantes con buena nota', lwd=3)
#Paso 1: Identificar el tipo de distribución
hist(DF$Promedio_primer_ciclo, breaks = 5, main = "HISTOGRAMA DEL PROMEDIO DE NOTAS DEL PRIMER CICLO", xlab= "Promedio de notas", ylab="Frecuencia absoluta", freq = FALSE, ylim = c(0,0.3))
abline(v=mean(DF$Promedio_primer_ciclo), col="green")
abline(v=median(DF$Promedio_primer_ciclo), col="red")
#Paso 2: Validar la distribución
# - Comparar media poblacional con la Mediana poblacional para garantizar que el 50% aproximadamente esta por encima y por debajo de la media
print('Diferencia entre media poblacional y mediana')
abs(mean(DF$Promedio_primer_ciclo)-median(DF$Promedio_primer_ciclo))
# - Comparar la media muestral con la media poblaciónal, generando 10 muestras de tamaño 30 sobre nuestra población
medias=rep(0,10)
for (i in 1:10) {
indice=sample(1:161,30,replace=FALSE)
muestra=DF$Promedio_primer_ciclo[indice]
medias[i]=mean(muestra)
}
print('Media muestral')
mean(medias)
error_media_muestral=abs(mean(DF$Promedio_ciclo_pasado)-mean(medias))
print('error porcentual para la Media muestral')
error_media_muestral*100/(mean(DF$Promedio_ciclo_pasado))
# - Comparar la desviación estandar de la media muestral con sd/raiz(n)
print('Desviación estandar muestral')
sd(medias)
error_sd_muestral=abs(sd(DF$Promedio_ciclo_pasado)/30**0.5-sd(medias))
print('error porcentual para la desviación estandar de la Media muestral')
error_sd_muestral*100/(sd(DF$Promedio_ciclo_pasado)/30**0.5)
# Paso 3: Definir la variable Aleatoria X~Norm(mu,ds)
print('Definir la variable Aleatoria X~Norm(mu,ds)')
mu=mean(DF$Promedio_ciclo_pasado)
sd=sd(DF$Promedio_ciclo_pasado)
#Paso 4: Ejemplo
# Se sabe que el quinto superior en los ultimos años esta definido por una nota mínima, la cual alberga al 20% de alumnos con notas superiores. Determinar la nota mínima para pertenecer al quinto superior
# Dado que nuestra población se distribuye Norm(mu,ds), podemos afirmar que:
NotaMin=qnorm(0.2,mu,sd,lower.tail = FALSE)
NotaMin
# Cual es la mínima nota para que el alumno no se cambie de carrera si se sabe que el 0.35% de alumnos terminan cambiándose de carrera
table(DF$considero_cambiar_de_carrera)/161
NotaMin1=qnorm(0.3540373,mu,sd)
NotaMin1
Promedios_CP_Mujeres=DF$Promedio_ciclo_pasado[DF$Genero=="Femenino"]
length(Promedios_CP_Mujeres)
Mujer_considera_cambiar=DF$considero_cambiar_de_carrera[DF$Genero=="Femenino"]
#Paso 1: Identificar el tipo de distribución
hist(Promedios_CP_Mujeres, breaks = 5, main = "HISTOGRAMA DEL PROMEDIO DE NOTAS DEL PRIMER CICLO", xlab= "Promedio de notas", ylab="Frecuencia absoluta", freq = FALSE, ylim = c(0,0.3))
abline(v=mean(Promedios_CP_Mujeres), col="green")
abline(v=median(Promedios_CP_Mujeres), col="red")
#Paso 2: Validar la distribución
# - Comparar media poblacional con la Mediana poblacional para garantizar que el 50% aproximadamente esta por encima y por debajo de la media
print('Diferencia entre media poblacional y mediana')
abs(mean(Promedios_CP_Mujeres)-median(Promedios_CP_Mujeres))
# - Comparar la media muestral con la media poblacional, generando 10 muestras de tamaño 30 sobre nuestra población
medias=rep(0,10)
for (i in 1:10) {
indice=sample(1:75,30,replace=FALSE)
muestra=Promedios_CP_Mujeres[indice]
medias[i]=mean(muestra)
}
print('promedio de las Medias muestrales')
mean(medias)
error_media_muestral=abs(mean(Promedios_CP_Mujeres)-mean(medias))
print('error porcentual para la Media muestral')
error_media_muestral*100/(mean(Promedios_CP_Mujeres))
# - Comparar la desviación estandar de la media muestral con sd/raiz(n)
print('Desviación estandar muestral')
sd(medias)
error_sd_muestral=abs(sd(Promedios_CP_Mujeres)/30**0.5-sd(medias))
print('error porcentual para la desviación estandar de la Media muestral')
error_sd_muestral*100/(sd(Promedios_CP_Mujeres)/30**0.5)
# Paso 3: Definir la variable Aleatoria X~Norm(mu,ds)
print('Definir la variable Aleatoria X~Norm(mu,ds)')
mu=mean(Promedios_CP_Mujeres)
sd=sd(Promedios_CP_Mujeres)
table(Mujer_considera_cambiar)/75
# Se sabe que el quinto superior en los ultimos años esta definido por una nota mínima, la cual alberga al 20% de alumnos con notas superiores. Determinar la nota mínima para pertenecer al quinto superior
# Dado que nuestra población se distribuye Norm(mu,ds), podemos afirmar que:
print('Nota mínima para estar en el quinto superior, dentro del 20% de las mujeres es: ')
NotaMin=qnorm(0.2,mu,sd,lower.tail = FALSE)
NotaMin
# Cual es la mínima nota para que el alumno no se cambie de carrera si se sabe que el 40% de alumnos terminan cambiándose de carrera
print('Nota mínima que deben tener las mujeres para no considerar cambiarse de carrera es: ')
NotaMin1=qnorm(0.4,mu,sd)
NotaMin1
table(Mujer_considera_cambiar)/75
table(DF$considero_cambiar_de_carrera)
table(DF$Factores_eleccion_de_carrera)
integrantes <- data.frame(
Apellidos = c("Torres Jaules",  "Perez Ponce ", "Picon Huaman "),
Nombres = c("Isai", "Santiago M",  "Yanelit"),
Cargo = c("", "Lider", "")
)
knitr::kable(integrantes,
caption = 'Integrantes del Equipo',
col.names = c("Apellidos", "Nombres", "Cargo"))
library(dplyr)
library(readr)
library(crayon)
library(DescTools)
library(magrittr)
library(ggplot2)
library(modeest)
library(janitor)
pkg_list <- c("dplyr", "ggplot2", "readr")
install_missing <- function(pkgs) {
new_pkgs <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
if (length(new_pkgs))
install.packages(new_pkgs, dependencies = TRUE)
}
install_missing(pkg_list)
data<-read.csv("BaseDeDatosLimpia.csv")
DF<-read_csv("BaseDeDatosLimpia.csv")
espacioM1 <- DF %>% distinct(Rendimiento_academico) %>% rename("Rendimiento Académico" = Rendimiento_academico)
espacioM1
table(data$Rendimiento_academico)
library(tibble)
tabla_Rend <- table(data$Rendimiento_academico)
mensajes <- character(length(tabla_Rend))
for (i in 1:length(tabla_Rend)) {
mensajes[i] <- paste("Evento del estudiante con rendimiento", names(tabla_Rend)[i])
}
df <- tibble(Eventos_atómicos = mensajes)
print(df)
tabla_Rend <- table(data$Rendimiento_academico)
total_obs <- sum(tabla_Rend)
prob_empirica <- tabla_Rend / total_obs
for (i in 1:length(prob_empirica)) {
cat("La probabilidad de un estudiante con rendimiento", names(prob_empirica)[i], "es", prob_empirica[i], "\n")
}
df <- data.frame(Rendimiento = names(prob_empirica),
Probabilidad = as.numeric(prob_empirica))
print(df)
library(RColorBrewer)
tabla_Rend <- table(data$Rendimiento_academico)
total_obs <- sum(tabla_Rend)
prob_empirica <- tabla_Rend / total_obs
df <- data.frame(Rendimiento = names(prob_empirica), Probabilidad = as.numeric(prob_empirica))
ggplot(df, aes(x = Rendimiento, y = Probabilidad, fill = Rendimiento)) +
geom_bar(stat = "identity") +
geom_text(aes(label = scales::percent(Probabilidad, accuracy = .01)), vjust = -0.3, size = 3.5) +
labs(x = "Rendimiento académico", y = "Probabilidad empírica",
title = "Probabilidad empírica de cada rendimiento académico") +
theme_minimal() +
scale_fill_brewer(palette = "Dark2")
library(dplyr)
espacioM2 <- DF %>%
distinct(considero_cambiar_de_carrera) %>%
rename("Considera Cambiar de Carrera" = considero_cambiar_de_carrera)
espacioM2
table(data$considero_cambiar_de_carrera)
library(tibble)
tabla_cambios <- table(data$considero_cambiar_de_carrera)
mensajes <- character(length(tabla_cambios))
for (i in 1:length(tabla_cambios)) {
mensajes[i] <- paste("Evento del estudiante que considera cambiar de carrera", names(tabla_cambios)[i])
}
df <- tibble(Eventos_atómicos = mensajes)
print(df)
library(tibble)
tabla_cambios <- table(data$considero_cambiar_de_carrera)
total_obs <- sum(tabla_cambios)
prob_empirica <- tabla_cambios / total_obs
mensajes <- character(length(tabla_cambios))
for (i in 1:length(tabla_cambios)) {
mensajes[i] <- paste("Evento del estudiante que", names(prob_empirica)[i], "considera cambiar de carrera, su probabilidad es de", prob_empirica[i])
}
df <- tibble(Eventos_atómicos = mensajes)
print(df)
tabla_cambios <- table(data$considero_cambiar_de_carrera)
total_obs <- sum(tabla_cambios)
prob_empirica <- tabla_cambios / total_obs
df <- data.frame(Decision = names(prob_empirica),
Probabilidad = as.numeric(prob_empirica))
print(df)
ggplot(df, aes(x = Decision, y = Probabilidad, fill = Decision)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(Probabilidad * 100, 2), "%")),
vjust = -0.3,
color = "black") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
labs(x = "Decisión de cambiar de carrera",
y = "Probabilidad empírica",
fill = "Decisión",
title = "Probabilidad empírica de la decisión de cambiar de carrera")
table(DF$Promedio_ciclo_pasado)
table(DF$Rendimiento_academico)
#A Promedio alto
#B buen rendimiento
AnB2 <- subset(DF,(DF$Promedio_ciclo_pasado>='12' ) & (DF$Rendimiento_academico == '1. Muy Bueno' | DF$Rendimiento_academico == '2. Bueno'))
AnB2
ProbAnB2 <- (nrow(AnB2))/(nrow(DF))
ProbAnB2
ProbB2 <- (nrow(subset(DF, (DF$Rendimiento_academico == '1. Muy Bueno' | DF$Rendimiento_academico == '2. Bueno'))))/nrow(DF)
ProbB2
Prob_total2 <- ProbAnB2/ProbB2
Prob_total2
table(DF$considero_cambiar_de_carrera)
table(DF$Factores_eleccion_de_carrera)
#A No considero cambiarse de carrera
#B eligió su carrera por vocación
AnB3 <- subset(DF,(DF$considero_cambiar_de_carrera =='2. No' ) & (DF$Factores_eleccion_de_carrera == '4. Vocación'))
AnB3
ProbAnB3 <- (nrow(AnB3))/(nrow(DF))
ProbAnB3
ProbB3 <- (nrow(subset(DF, (DF$Factores_eleccion_de_carrera == '4. Vocación'))))/nrow(DF)
ProbB3
Prob_total3 <- ProbAnB3/ProbB3
Prob_total3
p <-nrow(data %>% filter(Numero_de_cursos >= 4))/nrow(data)
p
n<-sum(table(data$Numero_de_cursos))
n
n <- 161 # Definir n como el número de ensayos
p <- 0.9813665 # Definir p como la probabilidad de éxito
x <- 0:5 # Definir x como el número de éxitos
probabilidade <- dbinom(x, size = n, prob = p) # Calcular las probabilidades de cada valor
barplot(probabilidade, names.arg = x, xlab = "numero de cursos", ylab = "Probabilidad", main = "Distribución Binomial", col = rainbow(length(x)))
datos <- data.frame(x = 0:n, probabilidad = dbinom(0:n, size = n, prob = p))
ggplot(datos, aes(x = x, y = probabilidad)) +
geom_bar(stat = "identity", fill = "darkgreen", width = 0.9) +
labs(title = "Distribución Binomial", x = "Número de cursos >= 4", y = "Probabilidad") +
theme_minimal()
esp <- 0
for (i in 0:161) {
esp <- esp + (i) * dbinom(i, n, p)
}
esp
mu <- n*p
mu
var <- 0
for (i in 0:n) {
var <- var + (i - mu)^2 * dbinom(i, n, p)
}
var
varianza <- n * p * (1 - p)
varianza
sqrt(varianza)
#sqrt(var)
pbinom(7, 10, p)
plot(0:10, dbinom(0:10,size = 10, prob = p),
type='h',
main='Distribución Binomial',
ylab='Probabilidad',
xlab ='Número de cursos que lleva >= 4',
lwd=3, col = "blue")
table(data$Rendimiento_academico)
buenanota <- data %>% filter(Rendimiento_academico == "2. Bueno")
m <-nrow(data)
n <- nrow(buenanota)
k <- 15
m
n
k
success<-0:161
plot(success,dhyper(0:161,m, n, 161) , type='h', main='Distribución Hipergeométrica', ylab='Probabilidad', xlab ='Número de intentos', lwd=3,  col="purple")
esp <- 0
for (i in 0:15) {
esp <- esp + (i) * dhyper(i, n, 161-n, k)
}
esp
p <- n/m
mu <- k * p
mu
var <- 0
for (i in 0:n) {
var <- var + (i - mu)^2 * dhyper(i, n, 161-n, k)
}
var
varianza<- k * p * (1 - p) * ((m-k)/(m-1))
varianza
sqrt(varianza)
sqrt(k * p * (1 - p) * ((m-k)/(m-1)))
k <- 4
fracaso <- 103
exito <- 161 - 103
muestra <- 15
dhyper(k, exito, fracaso, muestra)
s <- 0:5
exito <- 20   # Número de éxitos en la población
fracaso <- 30 # Número de fracasos en la población
tamaño_muestra <- 15
plot(s, dhyper(s, exito, fracaso, tamaño_muestra), type='h', main='Distribución Hipergeométrica', ylab='Probabilidad', xlab ='Número de estudiantes con buena nota', lwd=3,  col="blue")
#Paso 1: Identificar el tipo de distribución
hist(DF$Promedio_primer_ciclo, breaks = 5, main = "HISTOGRAMA DEL PROMEDIO DE NOTAS DEL PRIMER CICLO", xlab= "Promedio de notas", ylab="Frecuencia absoluta", freq = FALSE, ylim = c(0,0.3))
abline(v=mean(DF$Promedio_primer_ciclo), col="green")
abline(v=median(DF$Promedio_primer_ciclo), col="red")
#Paso 2: Validar la distribución
# - Comparar media poblaciónal con la Mediana poblaciónal para garantizar que el 50% aproximadamente esta por encima y por debajo de la media
print('Diferencia entre media poblacional y mediana')
abs(mean(DF$Promedio_primer_ciclo)-median(DF$Promedio_primer_ciclo))
# - Comparar la media muestral con la media poblaciónal, generando 10 muestras de tamaño 30 sobre nuestra población
medias=rep(0,10)
for (i in 1:10) {
indice=sample(1:161,30,replace=FALSE)
muestra=DF$Promedio_primer_ciclo[indice]
medias[i]=mean(muestra)
}
print('Media muestral')
mean(medias)
error_media_muestral=abs(mean(DF$Promedio_ciclo_pasado)-mean(medias))
print('error porcentual para la Media muestral')
error_media_muestral*100/(mean(DF$Promedio_primer_ciclo))
# - Comparar la desviación estandar de la media muestral con sd/raiz(n)
print('Desviación estandar muestral')
sd(medias)
error_sd_muestral=abs(sd(DF$Promedio_primer_ciclo)/30**0.5-sd(medias))
print('error porcentual para la desviación estandar de la Media muestral')
error_sd_muestral*100/(sd(DF$Promedio_primer_ciclo)/30**0.5)
# Paso 3: Definir la variable Aleatoria X~Norm(mu,ds)
print('Definir la variable Aleatoria X~Norm(mu,ds)')
mu=mean(DF$Promedio_primer_ciclo)
sd=sd(DF$Promedio_primer_ciclo)
#Paso 4: Ejemplo
# Se sabe que el quinto superior en los ultimos años esta definido por una nota mínima, la cual alberga al 20% de alumnos con notas superiores. Determinar la nota mínima para pertenecer al quinto superior
# Dado que nuestra población se distribuye Norm(mu,ds), podemos afirmar que:
NotaMin=qnorm(0.2,mu,sd,lower.tail = FALSE)
print('El promedio mínimo que debería haber  tenido un estudiante para estar dentro del 20% de los estudiantes que pertenecen quinto superior es: ')
NotaMin
round(NotaMin,2)
table(DF$considero_cambiar_de_carrera)/161
# Cual es la mínima nota para que el alumno no se cambie de carrera si se sabe que el 0.35% de alumnos terminan cambiándose de carrera
NotaMin1=qnorm(0.3540373,mu,sd)
print('El promedio mínimo que debería haber  obtenido  un estudiante para estar dentro del grupo de personas que no consideran retirarse de la universidad es:
')
NotaMin1
round(NotaMin1,2)
Promedios_CP_Mujeres=DF$Promedio_ciclo_pasado[DF$Genero=="Femenino"]
length(Promedios_CP_Mujeres)
Mujer_considera_cambiar=DF$considero_cambiar_de_carrera[DF$Genero=="Femenino"]
#Paso 1: Identificar el tipo de distribución
hist(Promedios_CP_Mujeres, breaks = 5, main = "HISTOGRAMA DEL PROMEDIO DE NOTAS DEL PRIMER CICLO", xlab= "Promedio de notas", ylab="Frecuencia absoluta", freq = FALSE, ylim = c(0,0.3))
abline(v=mean(Promedios_CP_Mujeres), col="green")
abline(v=median(Promedios_CP_Mujeres), col="red")
#Paso 2: Validar la distribución
# - Comparar media poblacional con la Mediana poblacional para garantizar que el 50% aproximadamente esta por encima y por debajo de la media
print('Diferencia entre media poblacional y mediana')
abs(mean(Promedios_CP_Mujeres)-median(Promedios_CP_Mujeres))
# - Comparar la media muestral con la media poblacional, generando 10 muestras de tamaño 30 sobre nuestra población
medias=rep(0,10)
for (i in 1:10) {
indice=sample(1:75,30,replace=FALSE)
muestra=Promedios_CP_Mujeres[indice]
medias[i]=mean(muestra)
}
print('promedio de las Medias muestrales')
mean(medias)
error_media_muestral=abs(mean(Promedios_CP_Mujeres)-mean(medias))
print('error porcentual para la Media muestral')
error_media_muestral*100/(mean(Promedios_CP_Mujeres))
# - Comparar la desviación estandar de la media muestral con sd/raiz(n)
print('Desviación estandar muestral')
sd(medias)
error_sd_muestral=abs(sd(Promedios_CP_Mujeres)/30**0.5-sd(medias))
print('error porcentual para la desviación estandar de la Media muestral')
error_sd_muestral*100/(sd(Promedios_CP_Mujeres)/30**0.5)
# Paso 3: Definir la variable Aleatoria X~Norm(mu,ds)
print('Definir la variable Aleatoria X~Norm(mu,ds)')
mu=mean(Promedios_CP_Mujeres)
sd=sd(Promedios_CP_Mujeres)
table(Mujer_considera_cambiar)/75
# Se sabe que el quinto superior en los ultimos años esta definido por una nota mínima, la cual alberga al 20% de alumnos con notas superiores. Determinar la nota mínima para pertenecer al quinto superior
# Dado que nuestra población se distribuye Norm(mu,ds), podemos afirmar que:
print('Nota mínima para estar en el quinto superior,es decir, dentro del 20% de las mujeres es: ')
NotaMin=qnorm(0.2,mu,sd,lower.tail = FALSE)
NotaMin
round(NotaMin,2)
table(Mujer_considera_cambiar)/75
# Cual es la mínima nota para que el alumno no se cambie de carrera si se sabe que el 40% de alumnos terminan cambiándose de carrera
print('Nota mínima que deben tener las mujeres para no considerar cambiarse de carrera es: ')
NotaMin1=qnorm(0.4,mu,sd)
NotaMin1
round(NotaMin1,2)
