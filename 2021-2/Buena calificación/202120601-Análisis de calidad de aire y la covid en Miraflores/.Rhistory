plot(BD$Prom_PM2.5, BD$Prom_NO2, xlab='Prom_Ruido', ylab='CasosCOVID')
abline(regresion1)
regresion1 <- lm(BD$Prom_PM2.5 ~ BD$Prom_NO2, data = BD)
summary(regresion1)
plot(BD$Prom_PM2.5, BD$Prom_NO2, xlab='Prom_Ruido', ylab='CasosCOVID')
abline(regresion1)
regresion <- lm(BD$Prom_PM10 ~ BD$Prom_NO2, data = BD)
summary(regresion)
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Prom_Ruido', ylab='CasosCOVID')
abline(regresion)
regresion1 <- lm(BD$Prom_Ruido ~ BD$Prom_NO2, data = BD)
summary(regresion1)
plot(BD$Prom_Ruido, BD$Prom_NO2, xlab='Prom_Ruido', ylab='CasosCOVID')
abline(regresion1)
regresion1 <- lm(BD$Prom_Ruido ~ BD$Prom_NO2, data = BD)
summary(regresion1)
plot(BD$Prom_Ruido, BD$Prom_NO2, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion1)
regresion <- lm(BD$Prom_PM10 ~ BD$Prom_NO2, data = BD)
summary(regresion)
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Prom_PM10', ylab='Prom_NO')
abline(regresion)
regresion2 <- lm(BD$Prom_NO2 ~ BD$Prom_PM10, data = BD)
summary(regresion1)
plot(BD$Prom_NO2, BD$Prom_PM10, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_PM2.5 ~ BD$Prom_PM10, data = BD)
summary(regresion1)
plot(BD$Prom_PM2.5, BD$Prom_PM10, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_Ruido ~ BD$Prom_PM10, data = BD)
summary(regresion1)
plot(BD$Prom_Ruido, BD$Prom_PM10, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$CasosCOVID ~ BD$Prom_PM10, data = BD)
summary(regresion1)
plot(BD$CasosCOVID, BD$Prom_PM10, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$CasosCOVID ~ BD$Prom_PM10, data = BD)
summary(regresion2)
plot(BD$CasosCOVID, BD$Prom_PM10, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_NO2 ~ BD$Prom_PM2.5, data = BD)
summary(regresion2)
plot(BD$Prom_NO2, BD$Prom_PM2.5, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_PM10 ~ BD$Prom_PM2.5, data = BD)
summary(regresion2)
plot(BD$Prom_PM10, BD$Prom_PM2.5, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
nuevas.edades <- data.frame(edad = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.edades, interval = 'confidence')
lines(nuevas.edades$edad, ic[, 2], lty = 2)
nuevas.edades <- data.frame(Prom_PM10 = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 200))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 200))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 200))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 1], lty = 2)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 200))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 1)
View(nuevas.edades)
View(nuevas.Prom_PM10n)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 200))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 4], lty = 2)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(30, 50))
predict(regresion, nuevas.Prom_PM10n)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2)
help lineas
library(readr)
library(plyr)
library(dplyr)
MONITOREO<-read.csv("Monitoreo.csv")
COVID<-read.csv("positivos_covid.csv")
COVID_MF <- COVID %>% filter(DEPARTAMENTO=="LIMA" & PROVINCIA=="LIMA" & DISTRITO=="MIRAFLORES")
COVID_MF<-read.csv("COVIDMF.csv")
MONITOREO_RLV <- MONITOREO %>% select(Fecha,Hora,NO2..ug.m3.,PM10,PM2.5,Ruido..dB.)
COVID_MF$FECHA_RESULTADO<-as.Date(COVID_MF$FECHA_RESULTADO,"%d/%m/%Y")
COVIDMF_MM<-COVID_MF %>%
select(FECHA_RESULTADO, SEXO, EDAD, METODODX, id_persona) %>%
filter(FECHA_RESULTADO >= "2020-07-01" & FECHA_RESULTADO <= "2021-02-15")
MONITOREO_DIARIO <- MONITOREO_RLV %>% group_by(Fecha) %>% summarise(Prom_Hora=median(Hora),Prom_NO2=mean(NO2..ug.m3.),
Prom_PM10=mean(PM10) , Prom_PM2.5=mean(PM2.5) , Prom_Ruido=mean(Ruido..dB.))
MONITOREO_DIARIO$Fecha<-as.Date(MONITOREO_DIARIO$Fecha,"%d/%m/%Y")
MONITOREO_DIARIO<-MONITOREO_DIARIO %>%
select(Fecha, Prom_Hora, Prom_NO2, Prom_PM10, Prom_PM2.5, Prom_Ruido) %>%
filter(Fecha >= "2020-07-01" & Fecha <= "2021-02-15")
names(MONITOREO_DIARIO)
CASOS_DIARIOS<-data.frame(table(COVIDMF_MM$FECHA_RESULTADO))
names(CASOS_DIARIOS)= c("Fecha", "CasosCOVID")
CASOS_DIARIOS$Fecha<-as.Date(CASOS_DIARIOS$Fecha, "%Y-%m-%d")
names(MONITOREO_DIARIO)= c("Fecha","Prom_Hora","Prom_NO2","Prom_PM10","Prom_PM2.5", "Prom_Ruido")
BASECRUZADA<- MONITOREO_DIARIO %>% merge(x=., y=CASOS_DIARIOS, by="Fecha", all=TRUE)
BD_SinFiltro<-BASECRUZADA[complete.cases(BASECRUZADA),]
BD<-BD_SinFiltro %>%
select(Fecha, Prom_Hora, Prom_NO2, Prom_PM10, Prom_PM2.5, Prom_Ruido, CasosCOVID) %>%
filter((Fecha < "2020-11-01" | Fecha > "2020-11-30") & (Fecha < "2021-01-01"))
cor(BD$Prom_Ruido, BD$CasosCOVID)
cor(BD$Prom_NO2, BD$CasosCOVID)
cor(BD$Prom_PM10, BD$CasosCOVID)
cor(BD$Prom_PM2.5, BD$CasosCOVID)
cor(BD$Prom_NO2, BD$Prom_Ruido)
str(MONITOREO_RLV)
str(COVIDMF_MM)
summary(MONITOREO$NO2..ug.m3.)
summary(MONITOREO$PM10)
summary(MONITOREO$PM2.5)
summary(MONITOREO$Ruido..dB.)
boxplot(MONITOREO$Ruido..dB.~ MONITOREO$Hora, main="Variación horaria del Ruido en Miraflores", xlab="HORA", ylab="RUIDO [dB]", col="red")
boxplot(MONITOREO$NO2..ug.m3.~ MONITOREO$Hora, main="Variación horaria de NO~2~ en Miraflores", xlab="HORA", ylab="NO~2~", col="purple")
boxplot(MONITOREO$PM2.5~ MONITOREO$Hora, main="Variación horaria de cantidad PM2.5 en Miraflores", xlab="HORA", ylab="PM2.5 [ug.m3]", col="aquamarine")
library(ggplot2)
ggplot(COVIDMF_MM,aes(x=METODODX))+ geom_bar(aes(fill=SEXO), position="dodge")+ylab("Frecuencia de Pruebas")+ xlab("Metodo de Prueba")
ggplot(COVIDMF_MM,aes(x=EDAD,y=..density..))+geom_histogram(fill="darkslategray3",col="black")+geom_density(col="red")+labs(title="Histograma y densidad de contagiados por edad")+theme(plot.title =element_text(color="black",size=16,hjust=0.5)) + xlab("Edad Contagiados")+ylab("Densidad de contagiados")
ggplot(data=BD_SinFiltro, mapping =aes(x=Fecha,y=CasosCOVID))+ geom_point(col="indianred1")+ggtitle("Aumento de casos por día")+ xlab("Meses")+ ylab("Casos COVID")+theme(plot.title=element_text(color="black", size=16,hjust = 0.5))
ggplot(data=BD, mapping =aes(x=Prom_Ruido,y=CasosCOVID))+ geom_point(col="chocolate1")+ggtitle("Ruido vs Casos Positivos")+ xlab("Ruido [dB]")+ ylab("Casos COVID")+theme(plot.title=element_text(color="black", size=16,hjust = 0.5))
cor(BD$Prom_Ruido, BD$CasosCOVID)
cov(BD$Prom_Ruido, BD$CasosCOVID)
ggplot(data=BD, mapping =aes(x=Prom_PM2.5,y=Prom_NO2))+ geom_point(col="blue")+ggtitle("PM2.5 vs Dióxido de Nitrógeno")+ xlab("PM2.5 [ug/m3]")+ ylab("NO2 [ug/m3]")+theme(plot.title=element_text(color="black", size=16,hjust = 0.5))
cor(BD$Prom_PM2.5, BD$Prom_NO2)
cov(BD$Prom_PM2.5, BD$Prom_NO2)
ggplot(data=BD, mapping =aes(x=Prom_NO2,y=Prom_Ruido))+ geom_point(col="lightsalmon3")+ggtitle("Dióxido de Nitrógeno vs Ruido")+ xlab("NO2 [ug/m3]")+ ylab("Ruido [dB]")+theme(plot.title=element_text(color="black", size=16,hjust = 0.5))
cor(BD$Prom_NO2, BD$Prom_Ruido)
cov(BD$Prom_NO2, BD$Prom_Ruido)
table(COVIDMF_MM$METODODX)
M1<-length(COVIDMF_MM$METODODX)
m1<-length(COVIDMF_MM$METODODX[COVIDMF_MM$METODODX=="PCR"])
P_PCR<-m1/M1
P_PCR
dgeom(9, P_PCR)
dgeom(1, P_PCR)
M2<-length(COVIDMF_MM$METODODX)
m2<-length(COVIDMF_MM$METODODX[COVIDMF_MM$METODODX=="PR"])
P_PR<-m2/M2
P_PR
dgeom(9, P_PR)
dgeom(1, P_PR)
M3<-length(COVIDMF_MM$METODODX)
m3<-length(COVIDMF_MM$METODODX[COVIDMF_MM$METODODX=="AG"])
P_AG<-m3/M3
P_AG
dgeom(9, P_AG)
dgeom(1, P_AG)
expand.grid(c("PCR,PR,AG"))
N <-nrow(COVIDMF_MM %>% filter(EDAD>=60))
1-pbinom(N*3/4,N,P_PCR)
# Variación a por lo menos la mitad
BD$Fecha <-as.Date(BD$Fecha,"%m/%d/%Y")
AS<-BD %>%
select(Prom_Ruido, Fecha) %>%
filter(Fecha > "2020-06-30" & Fecha < "2020-08-1")
prom<- mean(BD$Prom_Ruido)
x<-mean(AS$Prom_Ruido)
ds<-sd(BD$Prom_Ruido)
n<-nrow(AS)
alpha<-0.05
aa<- qnorm(1-alpha*0.5)
qa <- aa*ds/sqrt(n)
a1<- x+ qa
a1
a2<- x- qa
a2
error=(a1-a2)/2
z<- qnorm(1-alpha)
z
Za<- (x-60)/(ds/sqrt(n))
Za
ggplot(data=BD, aes(Prom_Ruido)) +
geom_histogram(breaks=seq(80, 100, by=0.2),
col="gray",
fill="aquamarine2",
alpha = .8) +
labs(title="Histograma de Ruido", x="[dB]", y="Frecuencia") + theme(plot.title =element_text(color="black",size=16,hjust=0.5))
ggplot(data=BD, aes(Prom_NO2)) +
geom_histogram(breaks=seq(60, 120, by=1),
col="blue",
fill="skyblue",
alpha = .2) +
labs(title="Histograma de Dióxido de Nitrógeno", x="[ug/m3]", y="Frecuencia") + theme(plot.title =element_text(color="black",size=16,hjust=0.5))
summary(BD[,3])
desviacion_estandar_NO2_poblacional <- sd(BD$Prom_NO2)
desviacion_estandar_NO2_poblacional
media_muestral_1 = 85.82
media_muestral_1
n = 31 # Número de observaciones.
n
alpha = 0.05 # Significación
alpha
z <- qnorm(1-alpha*0.5)
z
izquierda_1 <- media_muestral_1 - z * (desviacion_estandar_NO2_poblacional/sqrt(n))
derecha_1 <- media_muestral_1 + z * (desviacion_estandar_NO2_poblacional/sqrt(n))
izquierda_1
derecha_1
error_1 <- (derecha_1 - izquierda_1)/2
error_1
#H0: mu <= 200 [ug/m3]
#H1: mu > 200 [ug/m3]
z_calculado <- (media_muestral_1 - 200)/(desviacion_estandar_NO2_poblacional/sqrt(n))
z_calculado
z_critico <- qnorm(1-alpha)
z_critico
BD$Fecha <-as.Date(BD$Fecha,"%m/%d/%Y")
AS<-BD %>%
select(Prom_PM2.5, Fecha) %>%
filter(Fecha >= "2020-08-1" & Fecha < "2020-08-31")
summary(AS$Prom_PM2.5)
n_muestra <- nrow(AS)
s_muestra <- sd(AS$Prom_PM2.5)
X_muestra <- mean(AS$Prom_PM2.5)
Tstd <- qt(0.975,28)
Int_Izq <- X_muestra-(Tstd*(s_muestra/sqrt(n_muestra)))
Int_Der <-  X_muestra+(Tstd*(s_muestra/sqrt(n_muestra)))
Int_Izq
Int_Der
#Edad en Miraflores
ggplot(data=COVID_MF, aes(EDAD)) +
geom_histogram(breaks=seq(0, 112, by=1),
col="red",
fill="green",
alpha = .2) +
labs(title="Histograma de Edad", x="Edad", y="Frecuencia") + theme(plot.title =element_text(color="black",size=16,hjust=0.5))
COVID_MF$EDAD<-as.numeric(COVID_MF$EDAD)
summary(COVID_MF$EDAD)
sd_Edad_P<-sd(COVID_MF$EDAD)
sd_Edad_P
COVID_MF$EDAD<-as.numeric(COVID_MF$EDAD)
COVID_INT<-COVID_MF %>%
select(FECHA_RESULTADO, EDAD) %>%
filter(FECHA_RESULTADO >= "2021-01-01" & FECHA_RESULTADO <= "2021-01-31")
summary(COVID_INT$EDAD)
media_muestral_Edad = 44.52
media_muestral_Edad
n_Edad_P= 916 # Número de observaciones.
n_Edad_P
alpha= 0.05 # Significación
alpha
z_Edad <- qnorm(1-alpha*0.5)
z_Edad
izquierda_Edad <- media_muestral_Edad - z_Edad*(sd_Edad_P/sqrt(n_Edad_P))
derecha_Edad <- media_muestral_Edad + z_Edad*(sd_Edad_P/sqrt(n_Edad_P))
izquierda_Edad
derecha_Edad
error_Edad<-(derecha_Edad-izquierda_Edad)/2
error_Edad
mu0_Edad=45
#H0: mu = 45 años
#H1: mu =/  45 años
alpha<-0.05
#Z calculado
z_calculado_P=(media_muestral_Edad-mu0_Edad)/(sd_Edad_P/sqrt(n_Edad_P))
z_calculado_P
z_crítico_Edad_izq=qnorm(alpha/2)
z_crítico_Edad_der=-1*z_crítico_Edad_izq
z_crítico_Edad_izq
z_crítico_Edad_der
regresion <- lm(BD$Prom_PM10 ~ BD$Prom_NO2, data = BD)
summary(regresion)
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Prom_PM10', ylab='Prom_NO')
abline(regresion)
regresion1 <- lm(BD$Prom_Ruido ~ BD$Prom_NO2, data = BD)
summary(regresion1)
plot(BD$Prom_Ruido, BD$Prom_NO2, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion1)
regresion2 <- lm(BD$Prom_PM10 ~ BD$Prom_PM2.5, data = BD)
summary(regresion2)
plot(BD$Prom_PM10, BD$Prom_PM2.5, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(20, 60))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
View(ic)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(0, 200))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
View(nuevas.Prom_PM10n)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(0, 151))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2)
# Intervalos de prediccion
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'prediction')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2, col = 'red')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2, col = 'red')
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 201))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2)
# Intervalos de prediccion
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'prediction')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2, col = 'red')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2, col = 'red')
regresion2 <- lm(BD$Prom_Ruido ~ BD$Prom_PM2.5, data = BD)
summary(regresion2)
plot(BD$Prom_Ruido, BD$Prom_PM2.5, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$CasosCOVID ~ BD$Prom_PM2.5, data = BD)
summary(regresion2)
plot(BD$CasosCOVID, BD$Prom_PM2.5, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_NO2 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_NO2, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_PM10 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_PM10, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(30, 50))
predict(regresion, nuevas.Prom_PM10n)
regresion1 <- lm(BD$Prom_Ruido ~ BD$Prom_NO2, data = BD)
summary(regresion1)
plot(BD$Prom_Ruido, BD$Prom_NO2, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion1)
regresion2 <- lm(BD$Prom_PM10 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_PM10, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_PM10 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_PM10, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion2 <- lm(BD$Prom_NO2 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_NO2, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
regresion3 <- lm(BD$Prom_Ruido ~ BD$CasosCOVID, data = BD)
summary(regresion3)
plot(BD$Prom_Ruido, BD$CasosCOVID, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion3)
confint(regresion)
confint(regresion, level = 0.90)
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(50, 201))
# Grafico de dispersion y recta
plot(BD$Prom_PM10, BD$Prom_NO2, xlab='Edad', ylab='Grasas')
abline(regresion)
# Intervalos de confianza de la respuesta media:
# ic es una matriz con tres columnas: la primera es la prediccion, las otras dos son los extremos del intervalo
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'confidence')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2)
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2)
# Intervalos de prediccion
ic <- predict(regresion, nuevas.Prom_PM10n, interval = 'prediction')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 2], lty = 2, col = 'red')
lines(nuevas.Prom_PM10n$Prom_PM10, ic[, 3], lty = 2, col = 'red')
nuevas.Prom_PM10n <- data.frame(Prom_PM10 = seq(30, 50))
predict(regresion, nuevas.Prom_PM10n)
regresion1 <- lm(BD$CasosCOVID ~ BD$Prom_NO2, data = BD)
summary(regresion1)
plot(BD$CasosCOVID, BD$Prom_NO2, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion1)
regresion1 <- lm(BD$Prom_NO2 ~ BD$CasosCOVID, data = BD)
summary(regresion1)
plot(BD$Prom_NO2, BD$CasosCOVID, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion1)
regresion <- lm(BD$Prom_PM2.5 ~ BD$Prom_NO2, data = BD)
summary(regresion)
plot(BD$Prom_PM2.5, BD$Prom_NO2, xlab='Prom_PM10', ylab='Prom_NO')
abline(regresion)
confint(regresion)
confint(regresion, level = 0.90)
regresion <- lm(BD$Prom_PM2.5 ~ BD$Prom_NO2, data = BD)
summary(regresion)
plot(BD$Prom_PM2.5, BD$Prom_NO2, xlab='Prom_PM10', ylab='Prom_NO')
abline(regresion)
confint(regresion)
confint(regresion, level = 0.90)
regresion1 <- lm(BD$Prom_NO2 ~ BD$CasosCOVID, data = BD)
summary(regresion1)
plot(BD$Prom_NO2, BD$CasosCOVID, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion1)
confint(regresion1)
confint(regresion1, level = 0.90)
regresion2 <- lm(BD$Prom_NO2 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_NO2, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
confint(regresion2)
confint(regresion2, level = 0.90)
regresion3 <- lm(BD$Prom_Ruido ~ BD$CasosCOVID, data = BD)
summary(regresion3)
plot(BD$Prom_Ruido, BD$CasosCOVID, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion3)
confint(regresion3)
confint(regresion3, level = 0.90)
regresion <- lm(BD$Prom_PM2.5 ~ BD$Prom_NO2, data = BD)
summary(regresion)
plot(BD$Prom_PM2.5, BD$Prom_NO2, xlab='Prom_PM10', ylab='Prom_NO')
abline(regresion)
confint(regresion)
confint(regresion, level = 0.90)
regresion3 <- lm(BD$Prom_Ruido ~ BD$CasosCOVID, data = BD)
summary(regresion3)
plot(BD$Prom_Ruido, BD$CasosCOVID, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion3)
confint(regresion3)
confint(regresion3, level = 0.90)
regresion2 <- lm(BD$Prom_NO2 ~ BD$Prom_Ruido, data = BD)
summary(regresion2)
plot(BD$Prom_NO2, BD$Prom_Ruido, xlab='Prom_Ruido', ylab='Prom_NO2')
abline(regresion2)
confint(regresion2)
confint(regresion2, level = 0.90)
